<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>对读写分离思想的思考</title>
    <link href="/2022/10/11/yuque/%E5%AF%B9%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E6%80%9D%E6%83%B3%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <url>/2022/10/11/yuque/%E5%AF%B9%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E6%80%9D%E6%83%B3%E7%9A%84%E6%80%9D%E8%80%83/</url>
    
    <content type="html"><![CDATA[<p>工作后一段时间后，慢慢发现读写分离的思想出现过很多。比如在 MySQL 集群中的读写分离，MySQL 引擎 InnoDB 中的 MVCC，以及 JDK 中的 CopyOnWriteArrayList 中都有体现。</p><span id="more"></span><h1 id="一、MySQL-集群读写分离"><a href="#一、MySQL-集群读写分离" class="headerlink" title="一、MySQL 集群读写分离"></a>一、MySQL 集群读写分离</h1><blockquote><p>大多数互联网业务中，往往读多写少,这时候数据库的读会首先成为数据库的瓶颈。如果我们已经优化了 SQL，但是读依旧还是瓶颈时，这时就可以选择“读写分离”架构了。</p></blockquote><h2 id="1、具体实施"><a href="#1、具体实施" class="headerlink" title="1、具体实施"></a>1、具体实施</h2><ul><li>集群分为主从库，主库用来写，可以不加索引，提高写效率，丛库追加索引，提高读效率</li></ul><h2 id="2、带来的问题"><a href="#2、带来的问题" class="headerlink" title="2、带来的问题"></a>2、带来的问题</h2><blockquote><p>主从架构会剧透延迟性，会带来一致性问题，对实时性要求搞的业务会产生影响</p></blockquote><ul><li><strong>写后立刻读</strong>: 在写入数据库之后某个时间内读操作去主库，其他时间去丛库</li><li><strong>二次查询</strong>：先去丛库读，读不到就去主库读，注意别给主库带来太大写压力</li><li><strong>特殊处理</strong>：实时性要求搞的业务读写放在主库，次要业务使用读写分离</li></ul><h1 id="二、InnoDB-的-MVCC"><a href="#二、InnoDB-的-MVCC" class="headerlink" title="二、InnoDB 的 MVCC"></a>二、InnoDB 的 MVCC</h1><blockquote><p>数据库通常使用锁实现隔离性。最近的锁，锁住资源之后禁止其他资源访问，不论是读还是写都会被排斥，但是在读多写少的情况下，对读进行锁互斥就显得没有必要。于是引入了读写锁，主要对读进行加锁。后来发现并发量还是不够，最终出现了 MVCC(Multi-Version Concurrency Control)即 多版本并发控制</p></blockquote><ul><li>MVCC 是 MySQL 引擎 InnoDB 对并发处理的无锁实现<img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fp3GkXluaXAMCYJ8nHBvOJ3CgFxn.png"></li></ul><h1 id="三、CopyOnWriteArrayList"><a href="#三、CopyOnWriteArrayList" class="headerlink" title="三、CopyOnWriteArrayList"></a>三、CopyOnWriteArrayList</h1><blockquote><p>顾名思义，这是一个写时复制的 ArrayList，是线程安全的。发生结构性变化时的时候加锁，此时会创建一个副本数组给其他线程进行读取，变化完成之后再替换之前的数组。因此不能保证实时性，只能保证最终一致性，适合读多写少的情况。</p></blockquote><h2 id="1、源码解析"><a href="#1、源码解析" class="headerlink" title="1、源码解析"></a>1、源码解析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CopyOnWriteArrayList</span>&lt;E&gt;<br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable &#123;<br><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">transient</span> <span class="hljs-type">Object</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The array, accessed only via getArray/setArray.</span><br><span class="hljs-comment">     * volatile保证可见性</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> Object[] array;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 读的时候不加锁</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">public</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br><span class="hljs-keyword">return</span> elementAt(getArray(), index);<br>&#125;<br><span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="hljs-keyword">static</span> &lt;E&gt; E <span class="hljs-title function_">elementAt</span><span class="hljs-params">(Object[] a, <span class="hljs-type">int</span> index)</span> &#123;<br><span class="hljs-keyword">return</span> (E) a[index];<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * remove的時候先獲取之前的es數組，remove完之后再setArray(newElements);</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> E <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>            Object[] es = getArray();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> es.length;<br>            <span class="hljs-type">E</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> elementAt(es, index);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">numMoved</span> <span class="hljs-operator">=</span> len - index - <span class="hljs-number">1</span>;<br>            Object[] newElements;<br>            <span class="hljs-keyword">if</span> (numMoved == <span class="hljs-number">0</span>)<br>                newElements = Arrays.copyOf(es, len - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">else</span> &#123;<br>                newElements = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[len - <span class="hljs-number">1</span>];<br>                System.arraycopy(es, <span class="hljs-number">0</span>, newElements, <span class="hljs-number">0</span>, index);<br>                System.arraycopy(es, index + <span class="hljs-number">1</span>, newElements, index,<br>                                 numMoved);<br>            &#125;<br>            setArray(newElements);<br>            <span class="hljs-keyword">return</span> oldValue;<br>        &#125;<br>    &#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * TODO 完善此部分</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E element)</span> &#123;<br><span class="hljs-keyword">synchronized</span> (lock) &#123;<br>checkForComodification();<br>CopyOnWriteArrayList.<span class="hljs-built_in">this</span>.add(offset + size, element);<br>expectedArray = getArray();<br>size++;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ReentrantLock</title>
    <link href="/2022/10/10/yuque/ReentrantLock/"/>
    <url>/2022/10/10/yuque/ReentrantLock/</url>
    
    <content type="html"><![CDATA[<p>很常用的一个锁</p><span id="more"></span><h1 id="一、可重入原理"><a href="#一、可重入原理" class="headerlink" title="一、可重入原理"></a>一、可重入原理</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//TODO acquireQueued方法还不算熟悉</span><br><span class="hljs-comment">//公平策略</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">3000897897090466540L</span>;<br><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//尝试抢占</span><br>acquire(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-comment">//tryAcquire返回false会进入</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquire</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br><span class="hljs-keyword">if</span> (!tryAcquire(arg) &amp;&amp;<br><span class="hljs-comment">//加入一个新节点进入CLH</span><br>acquireQueued(addWaiter(Node.EXCLUSIVE), arg))<br>selfInterrupt();<br>&#125;<br><br><span class="hljs-comment">//可重入原理:如果没人占有锁,就cas尝试占有,否则如果是当前线程，state++,</span><br><span class="hljs-comment">//会检查,由此可以看到嵌套的最大层数不能超过int,两者都失败会返回false,</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br><span class="hljs-keyword">final</span> <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br><span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;<br>compareAndSetState(<span class="hljs-number">0</span>, acquires)) &#123;<br>setExclusiveOwnerThread(current);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (current == getExclusiveOwnerThread()) &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">nextc</span> <span class="hljs-operator">=</span> c + acquires;<br><span class="hljs-keyword">if</span> (nextc &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>setState(nextc);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NonfairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">7316153563782823691L</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 很鲁莽，上来就想抢占锁，把自己设置为占有锁的线程，否则尝试抢占</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (compareAndSetState(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>))<br>setExclusiveOwnerThread(Thread.currentThread());<br><span class="hljs-keyword">else</span><br>acquire(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br><span class="hljs-keyword">return</span> nonfairTryAcquire(acquires);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二、Condition-的使用"><a href="#二、Condition-的使用" class="headerlink" title="二、Condition 的使用"></a>二、Condition 的使用</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">//TODO<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JUC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Thread和Synchronized锁</title>
    <link href="/2022/10/09/yuque/Thread%E5%92%8CSynchronized%E9%94%81/"/>
    <url>/2022/10/09/yuque/Thread%E5%92%8CSynchronized%E9%94%81/</url>
    
    <content type="html"><![CDATA[<p>Thread 的基本介绍和 Synchronized 常见注意事项</p><span id="more"></span><h1 id="一、State-类型"><a href="#一、State-类型" class="headerlink" title="一、State 类型"></a>一、State 类型</h1><h2 id="1、操作系统线程-State"><a href="#1、操作系统线程-State" class="headerlink" title="1、操作系统线程 State"></a>1、操作系统线程 State</h2><ul><li><p>新建（new）：创建了一个新的线程对象</p></li><li><p>就绪（runnable）:调用线程的 start()方法，处于就绪状态</p></li><li><p>运行（running）:获得了 CPU 时间片，执行程序代码,就绪状态是进入到运行状态的唯一入口</p></li><li><p>阻塞（block）: 线程放弃对 CPU 的使用权，停止执行，直到进入就绪状态在有可能再次被 CPU 调度</p><blockquote><p>等待阻塞：运行状态的线程执行 wait 方法，JVM 会把线程放在等待队列中，使本线程进入阻塞状态。<br>同步阻塞：线程在获得 synchronized 同步锁失败，JVM 会把线程放入锁池中，线程进入同步阻塞。对于锁池和等待池，可以看这篇文章<br>其他阻塞：调用线程的 sleep()或者 join()后，线程会进入道阻塞状态，当 sleep 超时或者 join 终止或超时，线程重新转入就绪状态</p></blockquote></li><li><p>死亡（dead）:线程 run()、main()方法执行结束，或者因为异常退出了 run()方法，则该线程结束生命周期</p></li></ul><h2 id="2、Java-线程-State"><a href="#2、Java-线程-State" class="headerlink" title="2、Java 线程 State"></a>2、Java 线程 State</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">State</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 线程被构建，但是还没有调用start方法</span><br><span class="hljs-comment">*/</span><br>NEW,<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Java线程把操作系统中就绪和运行两种状态统一称为“运行中”</span><br><span class="hljs-comment">*/</span><br>RUNNABLE,<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 表示线程进入等待状态，也就是线程因为某种原因放弃了CPU的使用权，阻塞也分为几种情况（当一个线程试图获取一个内部的对象锁（非java.util.concurrent库中的锁），而该锁被其他线程持有，则该线程进入阻塞状态。）</span><br><span class="hljs-comment">* 等待阻塞：运行的线程执行了Thread.sleep、wait、join等方法，JVM会把当前线程设置为等待状态，当sleep结束，join线程终止或者线程被唤醒后，该线程从等待状态进入阻塞状态，重新占用锁后进行线程恢复</span><br><span class="hljs-comment">    * 同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被其他线程锁占用了，那么JVM会把当前项城放入到锁池中</span><br><span class="hljs-comment">    * 其他阻塞：发出I/O请求，JVM会把当前线程设置为阻塞状态，当I/O处理完毕则线程恢复</span><br><span class="hljs-comment">*/</span><br>BLOCKED,<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 等待状态，没有超时时间（无限等待），要被其他线程或者有其他的中断操作执行wait、join、LockSupport.park()</span><br><span class="hljs-comment">*/</span><br>WAITING,<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 与等待不同的是，不是无限等待，超时后自动返回，执行sleep，带参数的wait等可以实现</span><br><span class="hljs-comment">*/</span><br>TIMED_WAITING,<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 代表线程执行完毕</span><br><span class="hljs-comment">*/</span><br>TERMINATED;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二、创建线程的方法"><a href="#二、创建线程的方法" class="headerlink" title="二、创建线程的方法"></a>二、创建线程的方法</h1><h2 id="1、继承-Thread"><a href="#1、继承-Thread" class="headerlink" title="1、继承 Thread"></a>1、继承 Thread</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//注意:打印出来的结果会交替执行</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//4.创建Thread类的子类对象</span><br>        MyThread myThread=<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>        <span class="hljs-comment">//5.调用start()方法开启线程</span><br>        <span class="hljs-comment">//[ 会自动调用run方法这是JVM做的事情,源码看不到 ]</span><br>        myThread.start();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;我是主线程&quot;</span>+i);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-comment">//2.重写run方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//3.将要执行的代码写在run方法中</span><br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100</span>;i++)&#123;<br>           System.out.println(<span class="hljs-string">&quot;我是线程&quot;</span>+i);<br>       &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2、实现-Runable"><a href="#2、实现-Runable" class="headerlink" title="2、实现 Runable"></a>2、实现 Runable</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RunnableDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//4.创建Runnable的子类对象</span><br>        MyRunnale mr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnale</span>();<br>        <span class="hljs-comment">//5.将子类对象当做参数传递给Thread的构造函数,并开启线程</span><br>        <span class="hljs-comment">//MyRunnale taget=mr; 多态</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(mr).start();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;我是主线程&quot;</span>+i);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//1.定义一个类实现Runnable</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnale</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-comment">//2.重写run方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//3.将要执行的代码写在run方法中</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;我是线程&quot;</span>+i);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="3、实现-Callable"><a href="#3、实现-Callable" class="headerlink" title="3、实现 Callable"></a>3、实现 Callable</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">创建线程的方式三: 实现callable接口 ---JDK 5.0 新增</span><br><span class="hljs-comment">1.创建一个实现Callable接口的实现类</span><br><span class="hljs-comment">2.实现call方法,将此线程需要执行的操作声明在call()中</span><br><span class="hljs-comment">3.创建callable接口实现类的对象</span><br><span class="hljs-comment">4.将此callable的对象作为参数传入到FutureTask构造器中,创建FutureTask的对象</span><br><span class="hljs-comment">5.将FutureTask对象作为参数传递到Thread类的构造器中,创建Thread对象,并调用star</span><br><span class="hljs-comment">6.获取callable接口中call方法的返回值</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadNew</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//3.创建callable接口实现类的对象</span><br>        NumThead m=<span class="hljs-keyword">new</span> <span class="hljs-title class_">NumThead</span>();<br>        <span class="hljs-comment">//4.将此callable的对象作为参数传入到FutureTask构造器中,创建FutureTask的对象</span><br><br>        <span class="hljs-type">FutureTask</span> <span class="hljs-variable">futureTask</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>(m);<br>        <span class="hljs-comment">//5.将FutureTask对象作为参数传递到Thread类的构造器中,创建Thread对象,并调用start()方法</span><br>        <span class="hljs-comment">//FutureTask类继承了Runnable接口</span><br>        <span class="hljs-comment">//new Runnable = futrueTask;</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(futureTask).start();<br><br>        <span class="hljs-comment">//6.获取callable接口中call方法的返回值</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//get()方法返回值即为FutureTask构造器参数callable实现类重写的call方法的返回值</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> futureTask.get();<br>            System.out.println(<span class="hljs-string">&quot;总和是:&quot;</span>+sum);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//1.创建一个实现Callable接口的实现类</span><br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">NumThead</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&#123;<br>   <span class="hljs-comment">// class  NumThead implements Callable&lt;Integer&gt;&#123;</span><br>    <span class="hljs-comment">//2.实现call方法,将此线程需要执行的操作声明在call()中</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//public Integer call() throws Exception &#123;</span><br>        <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">100</span>;i++)&#123;<br>            System.out.println(i);<br>            sum+=i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="4、线程池"><a href="#4、线程池" class="headerlink" title="4、线程池"></a>4、线程池</h2><ul><li><input disabled="" type="checkbox"> 后续做</li></ul><h1 id="三、同步问题及解决"><a href="#三、同步问题及解决" class="headerlink" title="三、同步问题及解决"></a>三、同步问题及解决</h1><h2 id="1、多线程同步问题"><a href="#1、多线程同步问题" class="headerlink" title="1、多线程同步问题"></a>1、多线程同步问题</h2><ul><li>结果不符合预期</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SellTicket</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-comment">//定义一个成员变量表示有100张票</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> tickets=<span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>     <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>         <span class="hljs-keyword">if</span>(tickets&gt;<span class="hljs-number">0</span>)&#123;<br>             <span class="hljs-keyword">try</span> &#123;<br>                 <span class="hljs-comment">//通过sleep()方法来等待</span><br>                 Thread.sleep(<span class="hljs-number">100</span>);<br>             &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                 e.printStackTrace();<br>             &#125;<br>             System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;正在出售第&quot;</span>+tickets--+<span class="hljs-string">&quot;张票&quot;</span>);<br>         &#125;<span class="hljs-keyword">else</span>&#123;<br>             <span class="hljs-comment">//System.out.println(&quot;&quot;);</span><br>         &#125;<br>     &#125;<br>    &#125;<br>&#125;<br><span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SellTicketDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">SellTicket</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SellTicket</span>();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(st, <span class="hljs-string">&quot;窗口1&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(st, <span class="hljs-string">&quot;窗口2&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(st, <span class="hljs-string">&quot;窗口3&quot;</span>);<br>        t1.start();<br>        t2.start();<br>        t3.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、同步锁"><a href="#2、同步锁" class="headerlink" title="2、同步锁"></a>2、同步锁</h2><blockquote><p>synchronized 同步锁，对 this 和 class 的效果是不一样的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SellTicket</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">tickets</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (tickets &gt; <span class="hljs-number">0</span>) &#123;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            Thread.sleep(<span class="hljs-number">100</span>);<br>                        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                            e.printStackTrace();<br>                        &#125;<br>                        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;正在出售第&quot;</span> + tickets + <span class="hljs-string">&quot;张票&quot;</span>);<br>                        tickets--;<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                sellTicket();<br>            &#125;<br>            x++;<br>        &#125;<br>    &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sellTicket</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (tickets &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;正在出售第&quot;</span> + tickets + <span class="hljs-string">&quot;张票&quot;</span>);<br>            tickets--;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> synchorized 高阶操作</li></ul><h2 id="3、虚假唤醒"><a href="#3、虚假唤醒" class="headerlink" title="3、虚假唤醒"></a>3、虚假唤醒</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> github.polarisink.sync;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> hzsk</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Food</span> <span class="hljs-variable">noodles</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegularNoodles</span>();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>          noodles.makeNoodles();<br>        &#125;<br>      &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>      &#125;<br>    &#125;, <span class="hljs-string">&quot;厨师A&quot;</span>).start();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>          noodles.makeNoodles();<br>        &#125;<br>      &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>      &#125;<br>    &#125;, <span class="hljs-string">&quot;厨师B&quot;</span>).start();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>          noodles.eatNoodles();<br>        &#125;<br>      &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>      &#125;<br>    &#125;, <span class="hljs-string">&quot;食客甲&quot;</span>).start();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>          noodles.eatNoodles();<br>        &#125;<br>      &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>      &#125;<br>    &#125;, <span class="hljs-string">&quot;食客乙&quot;</span>).start();<br>  &#125;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 普通面</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RegularNoodles</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Food</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeNoodles</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-comment">//如果面的数量不为0，则等待食客吃完面再做面</span><br>    <span class="hljs-keyword">if</span> (num != <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-built_in">this</span>.wait();<br>    &#125;<br>    num++;<br>    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;做好了一份面，当前有&quot;</span> + num + <span class="hljs-string">&quot;份面&quot;</span>);<br>    <span class="hljs-comment">//面做好后，唤醒食客来吃</span><br>    <span class="hljs-built_in">this</span>.notifyAll();<br>  &#125;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eatNoodles</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-comment">//如果面的数量为0，则等待厨师做完面再吃面</span><br>    <span class="hljs-keyword">if</span> (num == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-built_in">this</span>.wait();<br>    &#125;<br>    num--;<br>    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;吃了一份面，当前有&quot;</span> + num + <span class="hljs-string">&quot;份面&quot;</span>);<br>    <span class="hljs-comment">//吃完则唤醒厨师来做面</span><br>    <span class="hljs-built_in">this</span>.notifyAll();<br>  &#125;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * if改while可以不再虚假唤醒</span><br><span class="hljs-comment"> * 手擀面</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HandRolled</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Food</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeNoodles</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-comment">//如果面的数量不为0，则等待食客吃完面再做面</span><br>    <span class="hljs-keyword">while</span> (num != <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-built_in">this</span>.wait();<br>    &#125;<br>    num++;<br>    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;做好了一份面，当前有&quot;</span> + num + <span class="hljs-string">&quot;份面&quot;</span>);<br>    <span class="hljs-comment">//面做好后，唤醒食客来吃</span><br>    <span class="hljs-built_in">this</span>.notifyAll();<br>  &#125;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eatNoodles</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-comment">//如果面的数量为0，则等待厨师做完面再吃面</span><br>    <span class="hljs-keyword">while</span> (num == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-built_in">this</span>.wait();<br>    &#125;<br>    num--;<br>    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;吃了一份面，当前有&quot;</span> + num + <span class="hljs-string">&quot;份面&quot;</span>);<br>    <span class="hljs-comment">//吃完则唤醒厨师来做面</span><br>    <span class="hljs-built_in">this</span>.notifyAll();<br>  &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Food</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 做面</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@throws</span> InterruptedException</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeNoodles</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 吃面</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@throws</span> InterruptedException</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">eatNoodles</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JUC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringData JPA &amp;&amp; QueryDSL</title>
    <link href="/2022/08/21/yuque/SpringData%20JPA%20&amp;&amp;%20QueryDSL/"/>
    <url>/2022/08/21/yuque/SpringData%20JPA%20&amp;&amp;%20QueryDSL/</url>
    
    <content type="html"><![CDATA[<blockquote><p>去年入职的公司使用的 ORM 是 JPA，与之前的 Mybatis 系差别较大，这里记录对 JPA 的了解</p></blockquote><span id="more"></span><ul><li>pom 依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.querydsl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>querydsl-apt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--QueryDSL支持--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.querydsl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>querydsl-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--需要APT插件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mysema.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>apt-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;querydsl-maven.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>process<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>&gt;</span>target/generated-sources/java<br>          <span class="hljs-tag">&lt;/<span class="hljs-name">outputDirectory</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">processor</span>&gt;</span><br>            com.querydsl.apt.jpa.JPAAnnotationProcessor<br>          <span class="hljs-tag">&lt;/<span class="hljs-name">processor</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="一、JPA-基本使用"><a href="#一、JPA-基本使用" class="headerlink" title="一、JPA 基本使用"></a>一、JPA 基本使用</h1><ul><li>使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//实体类基类</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@MappedSuperclass</span><br><span class="hljs-meta">@EntityListeners(AuditingEntityListener.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JpaBaseEntity</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">733899366518016549L</span>;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 主键id</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@Id</span><br>  <span class="hljs-meta">@ApiModelProperty(&quot;主键id&quot;)</span><br>  <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><br>  <span class="hljs-keyword">protected</span> Long id;<br><br>  <span class="hljs-meta">@DateTimeFormat(pattern = TimeUtils.sFStr)</span><br>  <span class="hljs-meta">@JsonFormat(pattern = TimeUtils.sFStr, timezone = &quot;GMT+8&quot;)</span><br>  <span class="hljs-meta">@CreatedDate</span><br>  <span class="hljs-keyword">protected</span> LocalDateTime createTime;<br><br>  <span class="hljs-meta">@DateTimeFormat(pattern = TimeUtils.sFStr)</span><br>  <span class="hljs-meta">@JsonFormat(pattern = TimeUtils.sFStr, timezone = &quot;GMT+8&quot;)</span><br>  <span class="hljs-meta">@LastModifiedDate</span><br>  <span class="hljs-keyword">protected</span> LocalDateTime updateTime;<br>&#125;<br><br><span class="hljs-comment">//实体类</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@RequiredArgsConstructor</span><br><span class="hljs-meta">@Table(name = &quot;archives&quot;,indexes =</span><br><span class="hljs-meta">       &#123;@Index(columnList = &quot;type&quot;), @Index(columnList = &quot;result&quot;), @Index(columnList = &quot;userId&quot;)&#125;</span><br><span class="hljs-meta">     )</span><br><span class="hljs-meta">@Entity(name = &quot;archives&quot;)</span><br><span class="hljs-meta">@ApiModel(&quot;机床档案&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Archives</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaBaseEntity</span> &#123;<br><br>  <span class="hljs-meta">@Column(columnDefinition = &quot;varchar(255) comment &#x27;机床标识&#x27;&quot;)</span><br>  <span class="hljs-keyword">private</span> String handle;<br><br>  <span class="hljs-meta">@Column(columnDefinition = &quot;varchar(255) comment &#x27;光机编号&#x27;&quot;)</span><br>  <span class="hljs-keyword">private</span> String opticalMachNum;<br><br>  <span class="hljs-meta">@Column(columnDefinition = &quot;datetime comment &#x27;光机落位时间&#x27;&quot;)</span><br>  <span class="hljs-meta">@DateTimeFormat(pattern = UTC_MS_PATTERN)</span><br>  <span class="hljs-meta">@JsonFormat(pattern = UTC_MS_PATTERN, timezone = &quot;GMT+8&quot;)</span><br>  <span class="hljs-keyword">private</span> LocalDateTime opticalMachLoadTime;<br><br>  <span class="hljs-meta">@Column(columnDefinition = &quot;varchar(255) comment &#x27;机床编号&#x27;&quot;)</span><br>  <span class="hljs-keyword">private</span> String machNum;<br><br>  <span class="hljs-meta">@Column(columnDefinition = &quot;bigint comment &#x27;机床型号&#x27;&quot;)</span><br>  <span class="hljs-keyword">private</span> Long machModelId;<br><br>  <span class="hljs-meta">@Column(columnDefinition = &quot;int comment &#x27;进度&#x27;&quot;)</span><br>  <span class="hljs-keyword">private</span> Integer process;<br><br>  <span class="hljs-meta">@Column(columnDefinition = &quot;datetime comment &#x27;出厂时间&#x27;&quot;)</span><br>  <span class="hljs-meta">@DateTimeFormat(pattern = UTC_MS_PATTERN)</span><br>  <span class="hljs-meta">@JsonFormat(pattern = UTC_MS_PATTERN, timezone = &quot;GMT+8&quot;)</span><br>  <span class="hljs-keyword">private</span> LocalDateTime factoryTime;<br><br>  <span class="hljs-meta">@Column(columnDefinition = &quot;varchar(255) comment &#x27;出厂编号&#x27;&quot;)</span><br>  <span class="hljs-keyword">private</span> String serialNum;<br><br>  <span class="hljs-meta">@Column(columnDefinition = &quot;varchar(255) comment &#x27;SN码&#x27;&quot;)</span><br>  <span class="hljs-keyword">private</span> String machSn;<br><br>  <span class="hljs-meta">@Column(columnDefinition = &quot;varchar(255) comment &#x27;产品名称&#x27;&quot;)</span><br>  <span class="hljs-keyword">private</span> String prodName;<br><br>  <span class="hljs-meta">@Column(columnDefinition = &quot;varchar(255) comment &#x27;产品名称&#x27;&quot;)</span><br>  <span class="hljs-keyword">private</span> String prodStandard;<br><br>  <span class="hljs-meta">@Column(columnDefinition = &quot;bigint comment &#x27;bomID&#x27;&quot;)</span><br>  <span class="hljs-keyword">private</span> Long bomId;<br><br>  <span class="hljs-meta">@Column(columnDefinition = &quot;bit comment &#x27;注册状态&#x27; not null default false&quot;)</span><br>  <span class="hljs-keyword">private</span> Boolean register;<br><br>  <span class="hljs-meta">@Column(columnDefinition = &quot;bit comment &#x27;注册状态&#x27; not null default false&quot;)</span><br>  <span class="hljs-keyword">private</span> Boolean online;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 数据修改的时间</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@DateTimeFormat(pattern = TimeUtils.sFStr)</span><br>  <span class="hljs-meta">@JsonFormat(pattern = TimeUtils.sFStr, timezone = &quot;GMT+8&quot;)</span><br>  <span class="hljs-keyword">private</span> LocalDateTime dataTime;<br>  <span class="hljs-comment">//-----数据库不存在字段</span><br>  <span class="hljs-meta">@Transient</span><br>  <span class="hljs-meta">@ApiModelProperty(&quot;bom&quot;)</span><br>  <span class="hljs-keyword">private</span> ModelBom bom;<br><br>  <span class="hljs-meta">@Transient</span><br>  <span class="hljs-meta">@ApiModelProperty(&quot;型号实体类&quot;)</span><br>  <span class="hljs-keyword">private</span> ModelTemplate modelTemplate;<br>&#125;<br><br><br><span class="hljs-comment">//Repo接口:分别用于基本操作和复杂查询</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MenuRepo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;Menu, Long&gt;, JpaSpecificationExecutor&lt;Menu&gt; &#123;<br>  <span class="hljs-type">boolean</span> <span class="hljs-title function_">existsByParentId</span><span class="hljs-params">(Long menuId)</span>;<br><br>  List&lt;Menu&gt; <span class="hljs-title function_">findByParentId</span><span class="hljs-params">(Long id)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TimeUtils</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">sFStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasePage</span> &#123;<br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-variable">page</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ApiModel(&quot;机床档案分页实体&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArchivesPageRequest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BasePage</span> &#123;<br>  <span class="hljs-meta">@ApiModelProperty(&quot;机床型号&quot;)</span><br>  <span class="hljs-keyword">private</span> String machModel;<br>  <span class="hljs-meta">@ApiModelProperty(&quot;机床编号&quot;)</span><br>  <span class="hljs-keyword">private</span> String machNum;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 类型: &#123;<span class="hljs-doctag">@link</span> cn.hzncc.common.enums.DataTypes&#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@ApiModelProperty(&quot;类型&quot;)</span><br>  <span class="hljs-keyword">private</span> Integer type;<br>  <span class="hljs-meta">@ApiModelProperty(&quot;SN&quot;)</span><br>  <span class="hljs-keyword">private</span> String sn;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * true:档案管理用创建时间&lt;br/&gt;</span><br><span class="hljs-comment">   * false:进度用数据最新时间</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@ApiModelProperty(&quot;排序类型&quot;)</span><br>  <span class="hljs-keyword">private</span> Boolean sort;<br>  <span class="hljs-meta">@ApiModelProperty(&quot;是否注册&quot;)</span><br>  <span class="hljs-keyword">private</span> Boolean register;<br>  <span class="hljs-meta">@ApiModelProperty(&quot;是否在线&quot;)</span><br>  <span class="hljs-keyword">private</span> Boolean online;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="二、JPA-复杂查询"><a href="#二、JPA-复杂查询" class="headerlink" title="二、JPA 复杂查询"></a>二、JPA 复杂查询</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ArchivesService</span>&#123;<br>    <span class="hljs-meta">@Transactional(readOnly = true)</span><br>  <span class="hljs-keyword">public</span> PageUtil&lt;Archives&gt; <span class="hljs-title function_">page</span><span class="hljs-params">(ArchivesPageRequest req)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">machModel</span> <span class="hljs-operator">=</span> req.getMachModel();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">machNum</span> <span class="hljs-operator">=</span> req.getMachNum();<br>    <span class="hljs-type">DataTypes</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> DataTypes.getType(req.getType());<br>    <span class="hljs-type">Sort</span> <span class="hljs-variable">sort</span> <span class="hljs-operator">=</span> req.getSort() ? Sort.by(Sort.Direction.DESC, <span class="hljs-string">&quot;createTime&quot;</span>) : Sort.by(Sort.Direction.DESC, <span class="hljs-string">&quot;dataTime&quot;</span>);<br>    <span class="hljs-type">Pageable</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> PageUtil.getPageRequest(req, sort);<br>    Specification&lt;Archives&gt; specification = (root, cq, cb) -&gt; &#123;<br>      List&lt;Predicate&gt; predicates = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>      <span class="hljs-comment">//三个模糊查询一个精确查询</span><br>      <span class="hljs-keyword">if</span> (StrUtil.isNotEmpty(machModel)) &#123;<br>        List&lt;Long&gt; idList = modelTemplateRepo.findIdByModelNameLike(SqlUtils.getBlurStr(machModel));<br>        <span class="hljs-keyword">if</span> (CollUtil.isEmpty(idList)) &#123;<br>          <span class="hljs-comment">//没有符合条件的,写入一个不可能成立的条件</span><br>          predicates.add(cb.equal(root.get(<span class="hljs-string">&quot;machModelId&quot;</span>), -<span class="hljs-number">1L</span>));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          predicates.add(root.&lt;Long&gt;get(<span class="hljs-string">&quot;machModelId&quot;</span>).in(idList));<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (StrUtil.isNotEmpty(machNum)) &#123;<br>        predicates.add(cb.like(root.get(<span class="hljs-string">&quot;machNum&quot;</span>), SqlUtils.getBlurStr(machNum)));<br>      &#125;<br>      <span class="hljs-keyword">if</span> (StrUtil.isNotBlank(req.getSn())) &#123;<br>        predicates.add(cb.like(root.get(<span class="hljs-string">&quot;machSn&quot;</span>), SqlUtils.getBlurStr(req.getSn())));<br>      &#125;<br>      <span class="hljs-keyword">if</span> (Objects.nonNull(type)) &#123;<br>        predicates.add(cb.equal(root.get(<span class="hljs-string">&quot;process&quot;</span>), type.getCode()));<br>      &#125;<br>      Predicate[] p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Predicate</span>[predicates.size()];<br>      <span class="hljs-keyword">return</span> cb.and(predicates.toArray(p));<br>    &#125;;<br>    Page&lt;Archives&gt; archives = archivesRepo.findAll(specification, request);<br>    List&lt;String&gt; onlineSnList = debugServer.onlineSnList();<br>    archives.forEach(a -&gt; &#123;<br>      modelTemplateRepo.findById(a.getMachModelId()).ifPresent(mt -&gt; &#123;<br>        mt.setAxisList(StrUtils.string2list(mt.getAxisListStr()));<br>        a.setModelTemplate(mt);<br>      &#125;);<br>      a.setBom(modelBomRepo.findById(a.getBomId()).orElse(<span class="hljs-literal">null</span>));<br>      a.setOnline(onlineSnList.contains(a.getMachSn()));<br>    &#125;);<br>    <span class="hljs-keyword">return</span> PageUtil.of(archives);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SqlUtils</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取模糊查询字符串</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> pattern</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getBlurStr</span><span class="hljs-params">(String pattern)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;%&quot;</span> + pattern + <span class="hljs-string">&quot;%&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="三、QueryDSL-的使用"><a href="#三、QueryDSL-的使用" class="headerlink" title="三、QueryDSL 的使用"></a>三、QueryDSL 的使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QueryDslConfig</span> &#123;<br>  <span class="hljs-meta">@PersistenceContext</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> EntityManager entityManager;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 有配置多数据源,此处不指定Bean的名字</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> entityManager</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">QueryDslConfig</span><span class="hljs-params">(EntityManager entityManager)</span> &#123;<br>    <span class="hljs-built_in">this</span>.entityManager = entityManager;<br>  &#125;<br><br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-keyword">public</span> JPAQueryFactory <span class="hljs-title function_">jpaQueryFactory</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JPAQueryFactory</span>(entityManager);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用更简洁,相比Specification不用再写魔法字符串,十分安全</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@RequiredArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArchivesDsl</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">QArchives</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> QArchives.archives;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> JPAQueryFactory factory;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ModelTemplateRepo modelTemplateRepo;<br><br>  <span class="hljs-keyword">public</span> QueryResults&lt;Archives&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">(ArchivesPageRequest req)</span> &#123;<br>    JPAQuery&lt;Archives&gt; query = factory.select(a).from(a);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">machModel</span> <span class="hljs-operator">=</span> StrUtil.trim(req.getMachModel());<br>    <span class="hljs-type">String</span> <span class="hljs-variable">machNum</span> <span class="hljs-operator">=</span> StrUtil.trim(req.getMachNum());<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sn</span> <span class="hljs-operator">=</span> StrUtil.trim(req.getSn());<br>    <span class="hljs-type">DataTypes</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> DataTypes.getType(req.getType());<br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">online</span> <span class="hljs-operator">=</span> req.getOnline();<br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">register</span> <span class="hljs-operator">=</span> req.getRegister();<br>    <span class="hljs-keyword">if</span> (StrUtil.isNotBlank(StrUtil.trim(machModel))) &#123;<br>      List&lt;Long&gt; idList = modelTemplateRepo.findIdByModelNameLike(SqlUtils.getBlurStr(machModel));<br>      <span class="hljs-keyword">if</span> (CollUtil.isEmpty(idList))&#123;<br>        <span class="hljs-comment">//不成立时加入不可能满足的条件</span><br>        query.where(a.id.eq(-<span class="hljs-number">1L</span>));<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>        query.where(a.machModelId.in(idList));<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (StrUtil.isNotBlank(machNum))&#123;<br>      query.where(a.machNum.like(SqlUtils.getBlurStr(machNum)));<br>    &#125;<br>    <span class="hljs-keyword">if</span> (StrUtil.isNotBlank(machNum))&#123;<br>      query.where(a.machSn.like(SqlUtils.getBlurStr(sn)));<br>    &#125;<br>    <span class="hljs-keyword">if</span> (Objects.nonNull(type))&#123;<br>      query.where(a.process.eq(type.getType()));<br>    &#125;<br>    <span class="hljs-keyword">if</span> (Objects.nonNull(register))&#123;<br>      query.where(a.register.eq(register));<br>    &#125;<br>    <span class="hljs-keyword">if</span> (Objects.nonNull(online))&#123;<br>      query.where(a.online.eq(online));<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> req.getSize();<br>    <span class="hljs-type">long</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> (<span class="hljs-type">long</span>) (req.getPage() - <span class="hljs-number">1</span>) * size;<br>   <span class="hljs-keyword">return</span> query.orderBy(a.createTime.desc()).offset(offset).limit(size).fetchResults();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>复杂查询</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@RequiredArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonDsl</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> JPAQueryFactory jpaQueryFactory;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">QTemplateItem</span> <span class="hljs-variable">ti</span> <span class="hljs-operator">=</span> QTemplateItem.templateItem;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">QSystemDataDic</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> QSystemDataDic.systemDataDic;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 找出对应模板在指定轴下的templateItem</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> List&lt;TemplateItem&gt; <span class="hljs-title function_">detailWithAxis</span><span class="hljs-params">(Long templateId, Integer type, String axisName)</span> &#123;<br>        <span class="hljs-keyword">return</span> jpaQueryFactory.selectFrom(ti)<br>            .select(Projections.fields(TemplateItem.class, ti.id, ti.dicId, ti.templateId, d.isDefault, d.axisName, d.paramNum, d.paramName))<br>            .from(d).where(d.type.eq(type)).where(d.axisName.eq(axisName))<br>            .leftJoin(ti).on(d.id.eq(ti.dicId)).where(ti.templateId.eq(templateId))<br>            .fetch();<br>    &#125;<br>    <span class="hljs-keyword">public</span> List&lt;TemplateItem&gt; <span class="hljs-title function_">detailWithoutAxis</span><span class="hljs-params">(Long templateId, Integer type)</span> &#123;<br>        <span class="hljs-keyword">return</span> jpaQueryFactory.selectFrom(ti)<br>            .select(Projections.fields(TemplateItem.class, ti.id, ti.dicId, ti.templateId, d.isDefault, d.axisName, d.paramNum, d.paramName))<br>            .from(d).where(d.type.eq(type))<br>            .leftJoin(ti).on(d.id.eq(ti.dicId)).where(ti.templateId.eq(templateId))<br>            .fetch();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="四、索引的使用"><a href="#四、索引的使用" class="headerlink" title="四、索引的使用"></a>四、索引的使用</h1>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ORM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL复制数据库</title>
    <link href="/2022/08/13/yuque/MySQL%E5%A4%8D%E5%88%B6%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2022/08/13/yuque/MySQL%E5%A4%8D%E5%88%B6%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<p>需要把数据库进行迁移，做一个记录</p><span id="more"></span><blockquote><p>需要两个服务器数据库版本相同才可迁移</p></blockquote><h1 id="1、单个或多个数据库"><a href="#1、单个或多个数据库" class="headerlink" title="1、单个或多个数据库"></a>1、单个或多个数据库</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysqldump -h远程ip -u用户 -p密码 -P3306 --default-character-set=utf8 \<br>--databases 单个或多个数据库名称空格分开 | mysql -h127.0.0.1 -uroot -p -P3306<br></code></pre></td></tr></table></figure><p>执行后输入本地数据库密码即可</p><h1 id="2、所有数据库"><a href="#2、所有数据库" class="headerlink" title="2、所有数据库"></a>2、所有数据库</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysqldump -h远程ip -u用户 -p密码 -P3306 --default-character-set=utf8 \<br>--all-databases | mysql -h127.0.0.1 -uroot -p -P3306<br></code></pre></td></tr></table></figure><h1 id="3、某库某表"><a href="#3、某库某表" class="headerlink" title="3、某库某表"></a>3、某库某表</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysqldump -h远程ip -u用户 -p密码 -P3306 --default-character-set=utf8 \<br>dbname table1 table2…… | mysql -h127.0.0.1 -uroot -p -P3306<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Win10-WSL安装Ubuntu配置开发环境</title>
    <link href="/2022/08/13/yuque/Win10-WSL%E5%AE%89%E8%A3%85Ubuntu%E9%85%8D%E7%BD%AE%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <url>/2022/08/13/yuque/Win10-WSL%E5%AE%89%E8%A3%85Ubuntu%E9%85%8D%E7%BD%AE%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<p>公司不能使用 macos 进行开发,无奈之下准备使用 win10 安装 wsl2&#x2F;ubuntu 进行开发环境的搭建</p><span id="more"></span><h1 id="一-基本安装"><a href="#一-基本安装" class="headerlink" title="一 基本安装"></a>一 基本安装</h1><h2 id="先确定-BIOS-是否开启虚拟化支持"><a href="#先确定-BIOS-是否开启虚拟化支持" class="headerlink" title="先确定 BIOS 是否开启虚拟化支持"></a>先确定 BIOS 是否开启虚拟化支持</h2><h2 id="安装-Windows-Terminal和-Ubuntu20-04"><a href="#安装-Windows-Terminal和-Ubuntu20-04" class="headerlink" title="安装 Windows Terminal和 Ubuntu20.04"></a>安装 <code>Windows Terminal</code>和 <code>Ubuntu20.04</code></h2><ul><li>找到 windows terminal 地址</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">C:\ProgramFiles\WindowsApps\Microsoft.WindowsTerminal<span class="hljs-emphasis">_1.11.2921.0_</span>x64\<span class="hljs-emphasis">_\_</span>8wekyb3d8bbwe\wt.exe<br></code></pre></td></tr></table></figure><ul><li>创建快捷方式复制到开始菜单</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&quot;C:\ProgramData\Microsoft\Windows\Start Menu\Programs\AdminTerminal.lnk&quot;<br></code></pre></td></tr></table></figure><ul><li>对快捷方式点击<code>右键</code>-<code>属性</code>-<code>快捷方式</code>-<code>高级-用管理员身份运行</code> .这样以后每次默认使用管理员打开 Windows Terminal,更方便</li><li>管理员打开<code>Powershell</code>,开启<code>linux</code>子系统支持</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux<br></code></pre></td></tr></table></figure><ul><li>微软商店安装 Ubuntu,进行基本配置</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FvUnnkL_UW6u7M9TeMOytdcvHa6h.png"></p><ul><li>之后可以直接在 Windows Terminal 中打开 Ubuntu,更方便</li></ul><h1 id="三-go-wsl2-host"><a href="#三-go-wsl2-host" class="headerlink" title="三 go-wsl2-host"></a>三 <a href="https://github.com/shayne/go-wsl2-host">go-wsl2-host</a></h1><blockquote><p>ubuntu 的 ip 会随时变化,使用该程序可动态维护 ubuntu 到 hosts 文件中</p></blockquote><ul><li>下载<a href="https://github.com/shayne/go-wsl2-host/releases/download/v0.3.5/wsl2host.exe">go-wsl2-host</a>到本地</li><li>使用管理员&#x2F;powershell 打开</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">.\wsl2host.exe install</span><br>Windows Username: &lt;username-you-use-to-login-to-windows&gt;<br>Windows Password: &lt;password-for-this-user&gt;<br></code></pre></td></tr></table></figure><h1 id="四-Docker"><a href="#四-Docker" class="headerlink" title="四 Docker"></a>四 Docker</h1><ul><li>先更新系统,换镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo vim /etc/apt/sources.list<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将这个放到文件最顶端</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">添加阿里源</span><br>deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse<br><span class="hljs-meta prompt_">#</span><span class="language-bash">添加清华源</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse<br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse<br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse<br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse<br><span class="hljs-meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse multiverse</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">更新源</span><br>sudo apt-get update<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如出现依赖问题，解决方式如下</span><br>sudo apt-get -f install<br><span class="hljs-meta prompt_"># </span><span class="language-bash">更新软件</span><br>sudo apt-get upgrade<br></code></pre></td></tr></table></figure><ul><li>安装 docker</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看ubuntu版本</span><br>cat /etc/lsb-release<br><span class="hljs-meta prompt_"># </span><span class="language-bash">切换到root权限</span><br>sudo -i<br><span class="hljs-meta prompt_"># </span><span class="language-bash">需要的包</span><br>apt-get install apt-transport-https ca-certificates software-properties-common curl<br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加docker-ce源</span><br>curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -<br>sudo add-apt-repository &quot;deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu \<br><span class="hljs-meta prompt_">$</span><span class="language-bash">(lsb_release -cs) stable<span class="hljs-string">&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">更新缓存</span></span><br>sudo apt-get update<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">安装docker-ce源</span></span><br>sudo apt-get install docker-ce<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">启动/重启/查看docker</span></span><br>service docker start/restart/status<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">docker换源</span></span><br>sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;<br>&#123;<br>  &quot;registry-mirrors&quot;: [&quot;https://qtpwk07g.mirror.aliyuncs.com&quot;]<br>&#125;<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">启动hello-world进行测试</span></span><br>docker run hello-world<br><br>//TODO hello-world不能启动,学习如何修复<br></code></pre></td></tr></table></figure><h1 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h1><blockquote><p>默认界面太丑,美化也不用太多,配置 ohmyzsh 即可</p></blockquote><ul><li>安装<code>Zsh</code>并将<code>Zsh</code>设置为默认 shell：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装zsh</span><br>sudo apt install zsh<br><span class="hljs-meta prompt_"># </span><span class="language-bash">然后将zsh设置为默认shell：</span><br>chsh -s /bin/zsh<br></code></pre></td></tr></table></figure><ul><li>安装 ohmyzsh</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">方式一</span><br>wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh<br><span class="hljs-meta prompt_"># </span><span class="language-bash">方式二</span><br>wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh<br>bash ./install.sh<br><span class="hljs-meta prompt_"># </span><span class="language-bash">方式三</span><br>wget https://github.com/ohmyzsh/ohmyzsh.git<br>./ohmyzhs/tools/install.sh<br></code></pre></td></tr></table></figure><ul><li>主题 Powerlevel10k</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone --depth=1 https://github.com/romkatv/powerlevel10k.git $&#123;ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom&#125;/themes/powerlevel10k<br></code></pre></td></tr></table></figure><ul><li>插件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install autojump<br>sudo apt install fasd<br>git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions<br> git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting<br><span class="hljs-meta prompt_"># </span><span class="language-bash">autojump 功能弱，fasd 功能强，但是没 autojump 实用</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">值得注意的是，根据官方文档，zsh-syntax-highlighting 插件需放在最后</span><br>plugins=(<br>  git extract autojump zsh-autosuggestions zsh-syntax-highlighting<br>)<br></code></pre></td></tr></table></figure><ul><li>terminal 安装字体</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/Ubuntu.zip<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>System</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java8到Java17</title>
    <link href="/2022/08/13/yuque/Java8%E5%88%B0Java17/"/>
    <url>/2022/08/13/yuque/Java8%E5%88%B0Java17/</url>
    
    <content type="html"><![CDATA[<p>JAVA17 就要正式发布了，趁有时间学习一下。以后就 JAVA8 工作和 JAVA17 学习了。下面讲一下 JAVA9 到 JAVA17 所有的新特性</p><span id="more"></span><blockquote><p>还没有发正式版，先手动安装 GA 版。我的电脑是<code>Manjaro</code>系统,使用 archlinux-java 进行版本管理</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ~/Downloads<br>wget https://download.java.net/java/GA/jdk17/0d483333a00540d886896bac774ff48b/35/GPL/openjdk-17_linux-x64_bin.tar.gz<br>sudo tar -zxvf openjdk-17_linux-x64_bin.tar.gz -C /usr/lib/jvm<br>cd /usr/liv/jvm<br>sudo mv jdk-17 java-17-openjdk<br></code></pre></td></tr></table></figure><p>archlinux-java 进行版本管理成功</p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FqFTaZAOpkFQES0cNSs8PSYYuRXX.png"></p><h1 id="JAVA9"><a href="#JAVA9" class="headerlink" title="JAVA9"></a>JAVA9</h1><h2 id="内置集合工厂"><a href="#内置集合工厂" class="headerlink" title="内置集合工厂"></a>内置集合工厂</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//集合工厂,immutable,Guava有类似功能</span><br><span class="hljs-comment">//声明的时候set不能重复，map的key也不能重复</span><br>List&lt;Integer&gt; list = List.of(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">10</span>);<br>Set&lt;Integer&gt; set = Set.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>);<br>Map&lt;String, String&gt; map = Map.of(<span class="hljs-string">&quot;k1&quot;</span>, <span class="hljs-string">&quot;v1&quot;</span>, <span class="hljs-string">&quot;k2&quot;</span>, <span class="hljs-string">&quot;v3&quot;</span>, <span class="hljs-string">&quot;k3&quot;</span>, <span class="hljs-string">&quot;v3&quot;</span>);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">UnsupportedOperationException,不可变的</span><br><span class="hljs-comment">list.remove(3)</span><br><span class="hljs-comment">set.remove(2);</span><br><span class="hljs-comment">map.remove(&quot;k3&quot;);*/</span><br><span class="hljs-comment">//java8 方法引用</span><br>list.forEach(System.out::println);<br>set.forEach(System.out::println);<br>map.forEach((k, v) -&gt; System.out.println(<span class="hljs-string">&quot;k: &quot;</span> + k + <span class="hljs-string">&quot;,v: &quot;</span> + v));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitFlow使用教程</title>
    <link href="/2022/08/13/yuque/GitFlow%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2022/08/13/yuque/GitFlow%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>实习的时候使用的 git 管理方式</p><span id="more"></span><h1 id="1、clone-项目到本地"><a href="#1、clone-项目到本地" class="headerlink" title="1、clone 项目到本地"></a>1、clone 项目到本地</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone git@github.com:##orgname##/##reponame##<br></code></pre></td></tr></table></figure><blockquote><p>不能使用 fork，必须 clone<br>fork 用于载服务器端建立副本，clone 创建项目的本地副本</p></blockquote><h1 id="2、初始化-gitflow"><a href="#2、初始化-gitflow" class="headerlink" title="2、初始化 gitflow"></a>2、初始化 gitflow</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> <span class="hljs-comment">#reponame#</span><br>git hf init<br></code></pre></td></tr></table></figure><blockquote><p>每次 clone 存储库都需要这么做</p></blockquote><h1 id="3、创建特性分支"><a href="#3、创建特性分支" class="headerlink" title="3、创建特性分支"></a>3、创建特性分支</h1><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 如果开始一个从，需要start<br>git hf feature start #feature-name#<br># 如果开始在一个已经存在的个人分支上工作，直接checkout即可<br></code></pre></td></tr></table></figure><blockquote><p>所有的工作（新特性、不紧急的 bug 修复）都必须在功能开发分支进行<br>特性分知名需要得体，可以使用代号为功能开发分支命名<br>如果主存储库一级存在该功能开发分支，命令会失效</p></blockquote><h1 id="4、在-github-发布功能开发分支"><a href="#4、在-github-发布功能开发分支" class="headerlink" title="4、在 github 发布功能开发分支"></a>4、在 github 发布功能开发分支</h1><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">git hf <span class="hljs-built_in">push</span><br></code></pre></td></tr></table></figure><h1 id="5、不断更新"><a href="#5、不断更新" class="headerlink" title="5、不断更新"></a>5、不断更新</h1><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 你将会经常从别人那拉取已完成的功能开发分支和热修复，再合并到你的分支<br><br># 如果你不在你的功能开发分支上<br>git hf feature checkout #feature-name#<br><br># 拉取主分支和开发分支<br>git hf update<br><br># 合并开发分支到你的分支<br>git merge develop<br></code></pre></td></tr></table></figure><h1 id="6、和别人协同开发"><a href="#6、和别人协同开发" class="headerlink" title="6、和别人协同开发"></a>6、和别人协同开发</h1><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-meta"># 当你需要向你的同事展示你的修改，push你的分支到github</span><br>git hf <span class="hljs-keyword">push</span><br><br><span class="hljs-meta"># 拉取同事的修改到你的仓库</span><br>git hf pull<br></code></pre></td></tr></table></figure><h1 id="7、合并你的分支到-develop-分支"><a href="#7、合并你的分支到-develop-分支" class="headerlink" title="7、合并你的分支到 develop 分支"></a>7、合并你的分支到 develop 分支</h1><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">git hf <span class="hljs-keyword">push</span><br><span class="hljs-meta"># 之后通过github网站创建一个pull请求给管理员</span><br><span class="hljs-meta"># 接受之后关闭</span><br>git hf feature finish<br></code></pre></td></tr></table></figure><h1 id="8、创建测试分支"><a href="#8、创建测试分支" class="headerlink" title="8、创建测试分支"></a>8、创建测试分支</h1><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 当你有足够多完成的改变，创建测试分支<br>git hf update<br>git hf release start #版本号#<br># 当你完成创建测试分支，记得更新版本信息<br># 构建代码，部署到测试环境，找bug。修复之后继续构建、部署、debug、fix直到结束<br># 当你准备去给release打tag而且合并到master和develop分支<br>git hf release finish #version-number#<br></code></pre></td></tr></table></figure><h1 id="9、创建热修复"><a href="#9、创建热修复" class="headerlink" title="9、创建热修复"></a>9、创建热修复</h1><p>TODO</p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>分布式事务</title>
    <link href="/2022/08/13/yuque/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    <url>/2022/08/13/yuque/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<p>区别于本地事务，事务在分布式情况下很重要</p><span id="more"></span><h1 id="本地事务"><a href="#本地事务" class="headerlink" title="本地事务"></a>本地事务</h1><h2 id="ACID-基本性质"><a href="#ACID-基本性质" class="headerlink" title="ACID 基本性质"></a>ACID 基本性质</h2><table><thead><tr><th></th><th>名称</th><th>解释</th></tr></thead><tbody><tr><td>Atomicity</td><td>原子性</td><td>要么都执行，要么都回滚</td></tr><tr><td>Consistency</td><td>一致性</td><td>保证数据的状态操作前和操作后保持一致</td></tr><tr><td>Lsolation</td><td>隔离性</td><td>多个事务同时操作相同数据库的同一个数据时，一个事务的执行不受另外一个事务的干扰</td></tr><tr><td>Durability</td><td>持久性</td><td>一个事务一旦提交，则数据将持久化到本地，除非其他事务对其进行修改</td></tr></tbody></table><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><table><thead><tr><th></th><th>脏读</th><th>不可重复读</th><th>幻读</th><th>ORACLE 支持</th><th>MYSQL 支持</th></tr></thead></table><p>| Y：可以解决<br>N：不能解决 | 一个事务读取到另外一个事务未提交的数据 | 同一个事务中，多次读取到的数据不一致 | 一个事务读取数据时，另外一个事务进行更新，导致第一个事务读取到了没有更新的数据 | | |<br>| READ_UNCOMMITTED | Y | Y | Y | Y | Y |<br>| READ_COMMITTED<br>(Oracle SQL 默认) | N | Y | Y | N | Y |<br>| REPEATABLE_READ<br>(MySQL 默认) | N | N | Y | N | Y |<br>| SERIALIZABLE | N | N | N | Y | Y |</p><h2 id="传播行为"><a href="#传播行为" class="headerlink" title="传播行为"></a>传播行为</h2><h2 id="SpringBoot-本地事务失效问题"><a href="#SpringBoot-本地事务失效问题" class="headerlink" title="SpringBoot 本地事务失效问题"></a>SpringBoot 本地事务失效问题</h2><blockquote><p>同一个方法内事务方法互相调用失效</p><p>原因：绕过了代理对象</p></blockquote><ul><li>解决办法：使用代理对象调用事务方法</li></ul><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-variable">&lt;dependency&gt;</span><br>    <span class="hljs-variable">&lt;groupId&gt;</span>org.springframework.boot<span class="hljs-variable">&lt;/groupId&gt;</span><br>    <span class="hljs-variable">&lt;artifactId&gt;</span>spring-boot-starter-aop<span class="hljs-variable">&lt;/artifactId&gt;</span><br><span class="hljs-variable">&lt;/dependency&gt;</span><br><br><span class="hljs-meta">@EnableAspectJAutoProxy</span><br>//开启aspectj动态代理，即使没有接口也能代理，所有代理都由aspectj代理<br></code></pre></td></tr></table></figure><h2 id="本地事务在分布式下的问题"><a href="#本地事务在分布式下的问题" class="headerlink" title="本地事务在分布式下的问题"></a>本地事务在分布式下的问题</h2><blockquote><p>例子：在购物订单一块时，需要查询优惠券、库存、积分等多个信息，这几个信息一般由不同微服务负责。下单时各个微服务进行数据库操作，只能保证自己的事务，不能保证其他服务的回滚</p></blockquote><h1 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h1><h2 id="CAP-定理与-BASE-理论"><a href="#CAP-定理与-BASE-理论" class="headerlink" title="CAP 定理与 BASE 理论"></a>CAP 定理与 BASE 理论</h2><h3 id="CAP-定理"><a href="#CAP-定理" class="headerlink" title="CAP 定理"></a>CAP 定理</h3><blockquote><p>CAP 定理是由加州大学伯克利分校 Eric Brewer 教授提出来的，他指出 WEB 服务无法同时满足一下 3 个属性：</p><ul><li>一致性(Consistency) ： 客户端知道一系列的操作都会同时发生(生效)</li><li>可用性(Availability) ： 每个操作都必须以可预期的响应结束</li><li>分区容错性(Partition tolerance) ： 即使出现单个组件无法可用,操作依然可以完成</li></ul></blockquote><blockquote><p>在任何数据库设计中，一个 Web 应用至多只能同时支持 CP 或者 AP。显然，任何横向扩展策略都要依赖于数据分区。因此，设计人员必须在一致性与可用性之间做出选择。</p></blockquote><h3 id="面临的问题"><a href="#面临的问题" class="headerlink" title="面临的问题"></a>面临的问题</h3><h3 id="BASE-理论"><a href="#BASE-理论" class="headerlink" title="BASE 理论"></a>BASE 理论</h3><blockquote><p>BASE：全称：Basically Available(基本可用)，Soft state（软状态）,和 Eventually consistent（最终一致性）三个短语的缩写，来自 ebay 的架构师提出。</p></blockquote><p>Base 理论是对 CAP 中一致性和可用性权衡的结果，其来源于对大型互联网分布式实践的总结，是基于 CAP 定理逐步演化而来的。其核心思想是：</p><blockquote><p>既是无法做到强一致性（Strong consistency），但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性（Eventual consistency）。</p></blockquote><h4 id="Basically-Available-基本可用"><a href="#Basically-Available-基本可用" class="headerlink" title="Basically Available(基本可用)"></a>Basically Available(基本可用)</h4><p>什么是基本可用呢？假设系统，出现了不可预知的故障，但还是能用，相比较正常的系统而言：</p><ol><li>响应时间上的损失：正常情况下的搜索引擎 0.5 秒即返回给用户结果，而<strong>基本可用</strong>的搜索引擎可以在 1 秒作用返回结果。</li><li>功能上的损失：在一个电商网站上，正常情况下，用户可以顺利完成每一笔订单，但是到了大促期间，为了保护购物系统的稳定性，部分消费者可能会被引导到一个降级页面。</li></ol><h4 id="Soft-state（软状态）"><a href="#Soft-state（软状态）" class="headerlink" title="Soft state（软状态）"></a>Soft state（软状态）</h4><p>什么是软状态呢？相对于原子性而言，要求多个节点的数据副本都是一致的，这是一种 “硬状态”。</p><p>软状态指的是：允许系统中的数据存在中间状态，并认为该状态不影响系统的整体可用性，即允许系统在多个不同节点的数据副本存在数据延时。</p><h4 id="Eventually-consistent（最终一致性）"><a href="#Eventually-consistent（最终一致性）" class="headerlink" title="Eventually consistent（最终一致性）"></a>Eventually consistent（最终一致性）</h4><p>这个比较好理解了哈。</p><p>上面说软状态，然后不可能一直是软状态，必须有个时间期限。在期限过后，应当保证所有副本保持数据一致性。从而达到数据的最终一致性。这个时间期限取决于网络延时，系统负载，数据复制方案设计等等因素。</p><p>稍微官方一点的说法就是：</p><blockquote><p>系统能够保证在没有其他新的更新操作的情况下，数据最终一定能够达到一致的状态，因此所有客户端对系统的数据访问最终都能够获取到最新的值。</p></blockquote><p>而在实际工程实践中，<strong>最终一致性分为 5 种：</strong></p><p><strong>1. 因果一致性（Causal consistency）</strong></p><p>指的是：如果节点 A 在更新完某个数据后通知了节点 B，那么节点 B 之后对该数据的访问和修改都是基于 A 更新后的值。于此同时，和节点 A 无因果关系的节点 C 的数据访问则没有这样的限制。</p><p><strong>2. 读己之所写（Read your writes）</strong></p><p>这种就很简单了，节点 A 更新一个数据后，它自身总是能访问到自身更新过的最新值，而不会看到旧值。其实也算一种因果一致性。</p><p><strong>3. 会话一致性（Session consistency）</strong></p><p>会话一致性将对系统数据的访问过程框定在了一个会话当中：系统能保证在同一个有效的会话中实现 “读己之所写” 的一致性，也就是说，执行更新操作之后，客户端能够在同一个会话中始终读取到该数据项的最新值。</p><p><strong>4. 单调读一致性（Monotonic read consistency）</strong></p><p>单调读一致性是指如果一个节点从系统中读取出一个数据项的某个值后，那么系统对于该节点后续的任何数据访问都不应该返回更旧的值。</p><p><strong>5. 单调写一致性（Monotonic write consistency）</strong></p><p>指一个系统要能够保证来自同一个节点的写操作被顺序的执行。</p><p>然而，在实际的实践中，这 5 种系统往往会结合使用，以构建一个具有最终一致性的分布式系统。实际上，不只是分布式系统使用最终一致性，关系型数据库在某个功能上，也是使用最终一致性的，比如备份，数据库的复制过程是需要时间的，这个复制过程中，业务读取到的值就是旧的。当然，最终还是达成了数据一致性。这也算是一个最终一致性的经典案例。</p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>总的来说，BASE 理论面向的是大型高可用可扩展的分布式系统，和传统事务的 ACID 是<strong>相反的</strong>，它完全不同于 ACID 的强一致性模型，而是<strong>通过牺牲强一致性</strong>来获得可用性，并允许数据在一段时间是不一致的。</p><h3 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h3><h4 id="问题起源"><a href="#问题起源" class="headerlink" title="问题起源"></a>问题起源</h4><p>在电商等业务中，系统一般由多个独立的服务组成，如何解决分布式调用时候数据的一致性？</p><p>具体业务场景如下，比如一个业务操作，如果同时调用服务 A、B、C，需要满足要么同时成功；要么同时失败。A、B、C 可能是多个不同部门开发、部署在不同服务器上的远程服务。</p><p>在分布式系统来说，如果不想牺牲一致性，CAP 理论告诉我们只能放弃可用性，这显然不能接受。为了便于讨论问题，先简单介绍下数据一致性的基础理论。</p><h4 id="强一致"><a href="#强一致" class="headerlink" title="强一致"></a>强一致</h4><blockquote><p>当更新操作完成之后，任何多个后续进程或者线程的访问都会返回最新的更新过的值。这种是对用户最友好的，就是用户上一次写什么，下一次就保证能读到什么。根据 CAP 理论，这种实现需要牺牲可用性。</p></blockquote><h4 id="弱一致性"><a href="#弱一致性" class="headerlink" title="弱一致性"></a>弱一致性</h4><blockquote><p>系统并不保证后续进程或者线程的访问都会返回最新的更新过的值。系统在数据写入成功之后，不承诺立即可以读到最新写入的值，也不会具体的承诺多久之后可以读到。</p></blockquote><h4 id="最终一致性"><a href="#最终一致性" class="headerlink" title="最终一致性"></a>最终一致性</h4><blockquote><p>弱一致性的特定形式。系统保证在没有后续更新的前提下，系统最终返回上一次更新操作的值。在没有故障发生的前提下，不一致窗口的时间主要受通信延迟，系统负载和复制副本的个数影响。DNS 是一个典型的最终一致性系统。</p></blockquote><h2 id="分布式事务几种方案"><a href="#分布式事务几种方案" class="headerlink" title="分布式事务几种方案"></a>分布式事务几种方案</h2><h2 id="SEATA"><a href="#SEATA" class="headerlink" title="SEATA"></a>SEATA</h2><p>官方文档：<a href="http://seata.io/zh-cn/docs/overview/what-is-seata.html">http://seata.io/zh-cn/docs/overview/what-is-seata.html</a></p>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Nginx</title>
    <link href="/2022/08/13/yuque/Nginx/"/>
    <url>/2022/08/13/yuque/Nginx/</url>
    
    <content type="html"><![CDATA[<p>市场占有率最大的 web 服务器</p><span id="more"></span><ul><li><p>nginx 配置文件</p></li><li><p>全局块: 配置影响 nginx 全局的指令。如：用户组、nginx 进程 pid 存放路径、日志路径、配置文件引入、线程数</p></li><li><p>events 块:影响 nginx 服务器或与用户都网络连接。如</p></li><li><p>http 块: 可嵌套多个 server，配置代理、缓存、日志定义</p><ul><li>http 全局块:</li><li>server 块:<ul><li>location:</li><li>location</li><li>…</li></ul></li></ul></li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fu1rsmJHKL7hMYSpCbYnvzKkpixJ.png"></p>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch</title>
    <link href="/2022/08/13/yuque/ElasticSearch/"/>
    <url>/2022/08/13/yuque/ElasticSearch/</url>
    
    <content type="html"><![CDATA[<p>Elasticsearch 是一个基于<a href="https://lucene.apache.org/core/">Apache Lucene(TM)</a>的开源搜索引擎。无论在开源还是专有领域，Lucene 可以被认为是迄今为止最先进、性能最好的、功能最全的搜索引擎库。</p><span id="more"></span><h1 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h1><h2 id="1、Index-索引"><a href="#1、Index-索引" class="headerlink" title="1、Index(索引)"></a>1、Index(索引)</h2><blockquote><p>类比 MySQL 的数据库</p></blockquote><h2 id="2、Type-类型"><a href="#2、Type-类型" class="headerlink" title="2、Type(类型)"></a>2、Type(类型)</h2><blockquote><p>类比 MySQL 的数据表</p></blockquote><h2 id="3、Document-文件"><a href="#3、Document-文件" class="headerlink" title="3、Document(文件)"></a>3、Document(文件)</h2><blockquote><p>类比 MySQL 的数据</p></blockquote><h2 id="4、倒排索引机制"><a href="#4、倒排索引机制" class="headerlink" title="4、倒排索引机制"></a>4、倒排索引机制</h2><h1 id="二、Docker-安装"><a href="#二、Docker-安装" class="headerlink" title="二、Docker 安装"></a>二、Docker 安装</h1><h2 id="1、下载镜像文件"><a href="#1、下载镜像文件" class="headerlink" title="1、下载镜像文件"></a>1、下载镜像文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">存储和检索数据</span><br>docker pull elasticsearch:7.4.2<br><span class="hljs-meta prompt_"># </span><span class="language-bash">可视化检索数据</span><br>docker pull kibana:7.4.2<br></code></pre></td></tr></table></figure><h2 id="2、创建实例"><a href="#2、创建实例" class="headerlink" title="2、创建实例"></a>2、创建实例</h2><ul><li>启动 ElasticSearch</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/mydata/</span>elasticsearch/config<br>mkdir -p <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/mydata/</span>elasticsearch/data<br>echo <span class="hljs-string">&quot;http.host: 0.0.0.0&quot;</span> &gt; <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/mydata/</span>elasticsearch<span class="hljs-regexp">/config/</span>elasticsearch.yml<br>chmod -R <span class="hljs-number">777</span> <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/mydata/</span>elasticsearch/<br><br>docker run --name elasticsearch -p <span class="hljs-number">9200</span>:<span class="hljs-number">9200</span> -p <span class="hljs-number">9300</span>:<span class="hljs-number">9300</span> \<br>-e  <span class="hljs-string">&quot;discovery.type=single-node&quot;</span> \<br>-e ES_JAVA_OPTS=<span class="hljs-string">&quot;-Xms64m -Xmx512m&quot;</span> \<br>-v <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/mydata/</span>elasticsearch<span class="hljs-regexp">/config/</span>elasticsearch.yml:<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/elasticsearch/</span>config/elasticsearch.yml \<br>-v <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/mydata/</span>elasticsearch<span class="hljs-regexp">/data:/u</span>sr<span class="hljs-regexp">/share/</span>elasticsearch/data \<br>-v  <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/mydata/</span>elasticsearch<span class="hljs-regexp">/plugins:/u</span>sr<span class="hljs-regexp">/share/</span>elasticsearch/plugins \<br>-d elasticsearch:<span class="hljs-number">7.4</span>.<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><ul><li>启动 kibana</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># ELASTICSEARCH_HOSTS一定虚拟机的host</span><br><span class="hljs-attribute">docker</span> run --name kibana -e ELASTICSEARCH_HOSTS=http://localhost:<span class="hljs-number">9200</span> -p <span class="hljs-number">5601</span>:<span class="hljs-number">5601</span> -d kibana:<span class="hljs-number">7</span>.<span class="hljs-number">4</span>.<span class="hljs-number">2</span><br><br><span class="hljs-comment"># 或者此方法，但要记住先启动es再启动kibana</span><br><span class="hljs-attribute">docker</span> run -d --name kibana --link elasticsearch -p <span class="hljs-number">5601</span>:<span class="hljs-number">5601</span> kibana:<span class="hljs-number">7</span>.<span class="hljs-number">4</span>.<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><ul><li>设置开机启动</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker update elasticsearch --restart=always<br>docker update kibana  --restart=always<br></code></pre></td></tr></table></figure><h1 id="三、初步探索"><a href="#三、初步探索" class="headerlink" title="三、初步探索"></a>三、初步探索</h1><h2 id="1、-cat"><a href="#1、-cat" class="headerlink" title="1、_cat"></a>1、_cat</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 查看所有节点</span><br><span class="hljs-built_in">GET</span> /_cat/nodes<br><span class="hljs-comment"># 查看es健康情况</span><br><span class="hljs-built_in">GET</span> /_cat<span class="hljs-built_in">/health</span><br><span class="hljs-built_in"></span><span class="hljs-comment"># 查看主节点</span><br><span class="hljs-built_in">GET</span> /_cat/master<br><span class="hljs-comment"># 查看所有索引</span><br><span class="hljs-built_in">GET</span> /_cat/indices<br></code></pre></td></tr></table></figure><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fohsw7OX1aZhjkVUjoSwYwMYdfAu.png"></p><h2 id="2、索引一个文档"><a href="#2、索引一个文档" class="headerlink" title="2、索引一个文档"></a>2、索引一个文档</h2><ul><li>保存一个数据，保存在哪个索引的哪个类型下，指定用那个唯一标识<br>PUT customer&#x2F;external&#x2F;1;在 customer 索引下的 external 类型下保存 1 号数据为</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT customer<span class="hljs-regexp">/external/</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;John Doe&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>PUT 和 POST 对比<table><thead><tr><th>项目</th><th>功能</th><th>id</th><th>一般用途</th></tr></thead><tbody><tr><td>POST</td><td>新增</td><td>可以不指定</td><td>新增</td></tr><tr><td>PUT</td><td>新增&#x2F;修改</td><td>必须指定</td><td>修改</td></tr></tbody></table></li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fkx5yJ8LHbY7fylPF8vR6jDg09Sb.png"></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># _前缀表示他为元数据</span><br>&#123;<br>    <span class="hljs-meta"># 表明该数据在customer数据库下</span><br>    <span class="hljs-string">&quot;_index&quot;</span>: <span class="hljs-string">&quot;customer&quot;</span>,<br>    <span class="hljs-meta"># 表明类型</span><br>    <span class="hljs-string">&quot;_type&quot;</span>: <span class="hljs-string">&quot;external&quot;</span>,<br>    <span class="hljs-meta"># id值</span><br>    <span class="hljs-string">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>    <span class="hljs-meta"># 版本，修改之后升级</span><br>    <span class="hljs-string">&quot;_version&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-meta"># 创建时返回created，修改时返回updated</span><br>    <span class="hljs-string">&quot;result&quot;</span>: <span class="hljs-string">&quot;created&quot;</span>,<br>    <span class="hljs-string">&quot;_shards&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;total&quot;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;failed&quot;</span>: <span class="hljs-number">0</span><br>    &#125;,<br>    <span class="hljs-string">&quot;_seq_no&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;_primary_term&quot;</span>: <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、查看文档"><a href="#3、查看文档" class="headerlink" title="3、查看文档"></a>3、查看文档</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/customer/</span>external/<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fsg250SkNXMktxqBkaZOtlb4SmHv.png"></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&#123;<br><span class="hljs-string">&quot;_index&quot;</span>: <span class="hljs-string">&quot;customer&quot;</span>,<br><span class="hljs-string">&quot;_type&quot;</span>: <span class="hljs-string">&quot;external&quot;</span>,<br><span class="hljs-string">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br><span class="hljs-string">&quot;_version&quot;</span>: <span class="hljs-number">1</span>,<br><span class="hljs-comment"># 并发控制字段，每次更新+1，做乐观锁</span><br><span class="hljs-string">&quot;_seq_no&quot;</span>: <span class="hljs-number">0</span>,<br><span class="hljs-comment"># 同上，主分片重新分配，如重启就会变化</span><br><span class="hljs-string">&quot;_primary_term&quot;</span>: <span class="hljs-number">1</span>,<br><span class="hljs-string">&quot;found&quot;</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-string">&quot;_source&quot;</span>: &#123;<br><span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;John Doe&quot;</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4、更新文档"><a href="#4、更新文档" class="headerlink" title="4、更新文档"></a>4、更新文档</h2><ul><li>三种实现</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 方法一：post带update</span><br><span class="hljs-comment"># 需要doc标签，数据无变化不操作，version不更新，result为noop(no operation)</span><br>POST customer<span class="hljs-regexp">/external/</span><span class="hljs-number">1</span>/_update<br>&#123;<br>    <span class="hljs-string">&quot;doc&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;John Doew&quot;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment"># 方法二：post不带update</span><br><span class="hljs-comment"># 不需要doc，重复执行更新也能成功，也version会更新</span><br>POST customer<span class="hljs-regexp">/external/</span><span class="hljs-number">1</span><br>&#123;<br>    <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;John Doew2&quot;</span><br>&#125;<br><br><span class="hljs-comment"># 方法三：put操作（不存在带update的情况）</span><br><span class="hljs-comment"># 更新，不管是否有变化，version都会增加</span><br><span class="hljs-comment">#</span><br>PUT customer<span class="hljs-regexp">/external/</span><span class="hljs-number">1</span><br>&#123;<br>    <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;John Doew3&quot;</span><br>&#125;<br><br><span class="hljs-comment"># 更新同时增加属性</span><br>POST customer<span class="hljs-regexp">/external/</span><span class="hljs-number">1</span>/_update<br>&#123;<br>    <span class="hljs-string">&quot;doc&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;John Doew4&quot;</span>,<br><span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">20</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>对比<ul><li>POST 会对比原文件数据，相同不会有操作，version 不增加</li><li>PUT 总会更新数据且增加 version 字段</li><li>带_update 对比原数据一样就不进行任何操作</li><li>使用场景： - 大并发更新：不带 update - 大并发查询偶尔更新，带 update；对比更新，重新计算分配规则<table><thead><tr><th></th><th>带 update</th><th>不带 update</th></tr></thead><tbody><tr><td>POST</td><td>body 带 doc 标签</td><td></td></tr><tr><td>PUT</td><td></td><td></td></tr></tbody></table></li></ul></li></ul><h2 id="5、删除文档或索引"><a href="#5、删除文档或索引" class="headerlink" title="5、删除文档或索引"></a>5、删除文档或索引</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">DELETE</span> customer<span class="hljs-regexp">/external/</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">DELETE customer</span><br></code></pre></td></tr></table></figure><p>注：<strong>elasticsearch 并没有提供删除类型的操作，只提供了删除索引和文档的操作</strong></p><h2 id="6、bulk-批量-API"><a href="#6、bulk-批量-API" class="headerlink" title="6、bulk 批量 API"></a>6、bulk 批量 API</h2><ul><li>语法</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">POST customer<span class="hljs-regexp">/external/</span>_bulk<br><span class="hljs-comment"># 元数据</span><br>&#123;action:&#123;metadata&#125;&#125;<br><span class="hljs-comment"># 具体数据</span><br>&#123;request body  &#125;<br><br>&#123;action:&#123;metadata&#125;&#125;<br>&#123;request body&#125;<br></code></pre></td></tr></table></figure><ul><li>例子</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fmh7yyND1x5EaLMBJWC0LM6KrHHX.png"></p><ul><li>规则</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">批量操作，彼此之间是独立:当发生某一条执行发生失败时，其他的数据仍然能够接着执行.<br>bulkapi 以此按顺序执行所有的 action（动作）。<br>如果一个单个的动作因任何原因失败，它将继续处理它后面剩余的动作。<br>当 bulk api 返回时，它将提供每个动作的状态（与发送的顺序相同），可以检查是否一个指定的动作是否失败了。<br></code></pre></td></tr></table></figure><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fs61AX2VGvKV0fHEJFYa0s6udqaE.png"></p><h2 id="7、样本测试数据"><a href="#7、样本测试数据" class="headerlink" title="7、样本测试数据"></a>7、样本测试数据</h2><p><a href="https://github.com/elastic/elasticsearch/blob/master/docs/src/test/resources/accounts.json?raw=true">测试数据</a>，将所有数据保存，基于此进行测试</p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FmoQqBjCPGECB9wRMfHdrw8zlRxr.png"></p><h1 id="四、进阶检索"><a href="#四、进阶检索" class="headerlink" title="四、进阶检索"></a>四、进阶检索</h1><h2 id="1、Search-API"><a href="#1、Search-API" class="headerlink" title="1、Search API"></a>1、Search API</h2><h3 id="1、检索信息"><a href="#1、检索信息" class="headerlink" title="1、检索信息"></a>1、检索信息</h3><p>ES 支持两种基本方式检索；</p><ul><li>通过 REST request uri 发送搜索参数 （uri +检索参数）；</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> bank/_search/?<span class="hljs-attribute">q</span>=*&amp;sort=account_number:asc<br></code></pre></td></tr></table></figure><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FofEQpqKNNfyn8gmX6W7asql9b4F.png"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">took:执行时间<br>time<span class="hljs-emphasis">_out:是否超时</span><br><span class="hljs-emphasis">\_</span>shards:被搜索的分片数量<br>hits:搜索结果<br>hits.total:搜索结果<br>hits.hits:实际的搜索结果数组<br>sort:结果排序的 key<br>score:相关性得分<br>max<span class="hljs-emphasis">_score:最高得分</span><br></code></pre></td></tr></table></figure><ul><li>通过 REST request body 来发送它们（uri+请求体）；</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> bank/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;sort&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;account_number&quot;</span>: <span class="hljs-string">&quot;asc&quot;</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fhzgj6I0Ed-2ZEfJ_d62uUuEfdAj.png"></p><h2 id="2、Query-DSL"><a href="#2、Query-DSL" class="headerlink" title="2、Query DSL"></a>2、Query DSL</h2><h3 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h3><blockquote><p>Elasticsearch 提供了一个可以执行查询的 JSON 风格的 DSL。这个被称为 Query DSL，该查询语言非常全面。</p></blockquote><ul><li>一个查询语句的典型结构</li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">QUERY_NAME:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol">   ARGUMENT:</span>VALUE,<br><span class="hljs-symbol">   ARGUMENT:</span>VALUE,...<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol">  QUERY_NAME:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol">     FIELD_NAME:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol">       ARGUMENT:</span>VALUE,<br><span class="hljs-symbol">       ARGUMENT:</span>VALUE,...<br>      <span class="hljs-punctuation">&#125;</span>  <br>   <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET bank/_search<br>&#123;<br>  <span class="hljs-comment"># 查询规则</span><br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>  &#125;,<br>  <span class="hljs-comment"># 分页规则，从哪开始，页码大小</span><br>  <span class="hljs-string">&quot;from&quot;</span>: 0,<br>  <span class="hljs-string">&quot;size&quot;</span>: 5,<br>  <span class="hljs-comment"># 排序规则</span><br>  <span class="hljs-string">&quot;sort&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;account_number&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;order&quot;</span>: <span class="hljs-string">&quot;desc&quot;</span><br>      &#125;<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>match_all 查询类型【代表查询所有的所有】，es 中可以在 query 中组合非常多的查询类型完成复杂查询；</li><li>除了 query 参数之外，我们可也传递其他的参数以改变查询结果，如 sort，size；</li><li>from+size 限定，完成分页功能；</li><li>sort 排序，多字段排序，会在前序字段相等时后续字段内部排序，否则以前序为准；</li></ul><h3 id="2、返回部分"><a href="#2、返回部分" class="headerlink" title="2、返回部分"></a>2、返回部分</h3><ul><li>规则</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET bank/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;from&quot;</span>: 0,<br>  <span class="hljs-string">&quot;size&quot;</span>: 5,<br>  <span class="hljs-string">&quot;sort&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;account_number&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;order&quot;</span>: <span class="hljs-string">&quot;desc&quot;</span><br>      &#125;<br>    &#125;<br>  ],<br>  <span class="hljs-comment"># 返回，直接指定需要返回的字段</span><br>  <span class="hljs-string">&quot;_source&quot;</span>: [<span class="hljs-string">&quot;balance&quot;</span>,<span class="hljs-string">&quot;firstname&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>例子</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FraO_9HSmMUu4wRZICS-1oY76gS6.png"></p><h3 id="3、match-匹配查询"><a href="#3、match-匹配查询" class="headerlink" title="3、match - 匹配查询"></a>3、match - 匹配查询</h3><blockquote><p>全文检索，按照评分进行排序，依赖倒排索引</p></blockquote><ul><li>语法</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># match匹配字符串，可以做模糊查询</span><br><span class="hljs-comment"># match匹配数值，为精确查询</span><br><br><span class="hljs-built_in">GET</span> bank/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    # 满足<span class="hljs-attribute">account_number</span>=20的<br>    <span class="hljs-string">&quot;match&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;account_number&quot;</span>: 20<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>例子</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FjBFJQ2LRN7XWzPwtsA9gsu0k_LC.png"></p><h3 id="4、match-phrase-短句匹配"><a href="#4、match-phrase-短句匹配" class="headerlink" title="4、match_phrase - 短句匹配"></a>4、match_phrase - 短句匹配</h3><blockquote><p>将需要匹配的值当成一整个单词（不分词）进行检索。</p><p>文本字段的匹配，使用 keyword，匹配的条件就是要显示字段的全部值，要进行精确匹配的。</p><p>match_phrase 是做短语匹配，只要文本中包含匹配条件，就能匹配到。</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> bank/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match_phrase&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;mill road&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5、multi-match-多字段匹配"><a href="#5、multi-match-多字段匹配" class="headerlink" title="5、multi_match - 多字段匹配"></a>5、multi_match - 多字段匹配</h3><blockquote><p>从几个字段中查询，相当于多个 match 叠加，会进行分词</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 从state和address中分词查询mill</span><br><span class="hljs-built_in">GET</span> bank/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;multi_match&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;query&quot;</span>: <span class="hljs-string">&quot;mill&quot;</span>,<br>      <span class="hljs-string">&quot;fields&quot;</span>: [<br>        <span class="hljs-string">&quot;state&quot;</span>,<br>        <span class="hljs-string">&quot;address&quot;</span><br>      ]<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6、bool-复合查询"><a href="#6、bool-复合查询" class="headerlink" title="6、bool - 复合查询"></a>6、bool - 复合查询</h3><blockquote><p>复合查询，即可以进行嵌套，实现复杂的逻辑</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># must：必须达到must所列举的所有条件</span><br><span class="hljs-comment"># must_not，必须不匹配must_not所列举的所有条件。</span><br><span class="hljs-comment"># should，应该满足should所列举的条件。如果到达会增加相关文档的评分，并不会改变查询的</span><br><span class="hljs-comment"># 结果。如果query中只有should且只有一种匹配规则，那么should的条件就会被作为默认匹配</span><br><span class="hljs-comment"># 条件二区改变查询结果。</span><br><span class="hljs-built_in">GET</span> bank/_search<br>&#123;<br>   <span class="hljs-string">&quot;query&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;bool&quot;</span>:&#123;<br>             <span class="hljs-string">&quot;must&quot;</span>:[<br>              &#123;<span class="hljs-string">&quot;match&quot;</span>:&#123;<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;mill&quot;</span>&#125;&#125;,<br>              &#123;<span class="hljs-string">&quot;match&quot;</span>:&#123;<span class="hljs-string">&quot;gender&quot;</span>:<span class="hljs-string">&quot;M&quot;</span>&#125;&#125;<br>             ]<br>         &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7、filter-结果过滤"><a href="#7、filter-结果过滤" class="headerlink" title="7、filter - 结果过滤"></a>7、filter - 结果过滤</h3><blockquote><p>对结果进行过滤，相当于 MySQL 的<code>having</code>。使用时不计算相关性得分。</p><p>并不是所有的查询都需要产生分数，特别是哪些仅用于 filtering 过滤的文档。为了不计算分数，elasticsearch 会自动检查场景并且优化查询的执行。</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 这里先是查询所有匹配address=mill的文档。</span><br><span class="hljs-comment"># 然后再根据10000&lt;=balance&lt;=20000进行过滤查询结果</span><br><span class="hljs-built_in">GET</span> bank/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;must&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;match&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;mill&quot;</span><br>          &#125;<br>        &#125;<br>      ],<br>      <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;range&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;balance&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;gte&quot;</span>: <span class="hljs-string">&quot;10000&quot;</span>,<br>            <span class="hljs-string">&quot;lte&quot;</span>: <span class="hljs-string">&quot;20000&quot;</span><br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>Each <code>must</code>, <code>should</code>, and <code>must_not</code> element in a Boolean query is referred to as a query clause. How well a document meets the criteria in each <code>must</code> or <code>should</code> clause contributes to the document’s <em>relevance score</em>. The higher the score, the better the document matches your search criteria. By default, Elasticsearch returns documents ranked by these relevance scores.</p><p>在 boolean 查询中，<code>must</code>, <code>should</code> 和<code>must_not</code> 元素都被称为查询子句 。 文档是否符合每个“must”或“should”子句中的标准，决定了文档的“相关性得分”。   得分越高，文档越符合您的搜索条件。   默认情况下，Elasticsearch 返回根据这些相关性得分排序的文档。</p><p>The criteria in a <code>must_not</code> clause is treated as a <em>filter</em>. It affects whether or not the document is included in the results, but does not contribute to how documents are scored. You can also explicitly specify arbitrary filters to include or exclude documents based on structured data.</p><p><code>“must_not”子句中的条件被视为“过滤器”。</code> 它影响文档是否包含在结果中，   但不影响文档的评分方式。   还可以显式地指定任意过滤器来包含或排除基于结构化数据的文档。</p></blockquote><h3 id="8、term-匹配查询"><a href="#8、term-匹配查询" class="headerlink" title="8、term - 匹配查询"></a>8、term - 匹配查询</h3><blockquote><p>和 match 一样。匹配某个属性的值。<strong>全文检索字段用 match，其他非 text 字段匹配用 term。</strong></p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> bank/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;mill Road&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9、aggregation-执行聚合"><a href="#9、aggregation-执行聚合" class="headerlink" title="9、aggregation - 执行聚合"></a>9、aggregation - 执行聚合</h3><blockquote><p>从数据中分组和提取数据。</p><p>最简单的聚合方法大致等于 SQL Group by 和 SQL 聚合函数。在 elasticsearch 中，执行搜索返回 this（命中结果），并且同时返回聚合结果，把以响应中的所有 hits（命中结果）分隔开的能力。这是非常强大且有效的，你可以执行查询和多个聚合，并且在一次使用中得到各自的（任何一个的）返回结果，使用一次简洁和简化的 API 啦避免网络往返。</p></blockquote><h2 id="3、Mapping"><a href="#3、Mapping" class="headerlink" title="3、Mapping"></a>3、Mapping</h2><h3 id="1、字段类型"><a href="#1、字段类型" class="headerlink" title="1、字段类型"></a>1、字段类型</h3><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FguJfHPkZ7dzBZkhXWZLFMnbzHq9.png"></p><h3 id="2、映射"><a href="#2、映射" class="headerlink" title="2、映射"></a>2、映射</h3><blockquote><p>Maping 是用来定义一个文档（document），以及它所包含的属性（field）是如何存储和索引的</p></blockquote><h3 id="3、新版本改变"><a href="#3、新版本改变" class="headerlink" title="3、新版本改变"></a>3、新版本改变</h3><h4 id="创建映射"><a href="#创建映射" class="headerlink" title="创建映射"></a>创建映射</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">PUT /my_index<br>&#123;<br>  <span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;age&quot;</span>: &#123;<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;integer&quot;</span>&#125;,<br>      <span class="hljs-string">&quot;email&quot;</span>: &#123;<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>&#125;,<br>      <span class="hljs-string">&quot;name&quot;</span>: &#123;<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>&#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FoakU_gLWXz79c4c26JPkNwHCAs4.png"></p><h4 id="查看映射"><a href="#查看映射" class="headerlink" title="查看映射"></a>查看映射</h4><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FlcYSjHqaKM2bzvLQV4OMJQBiwfT.png"></p><h4 id="添加新字段映射"><a href="#添加新字段映射" class="headerlink" title="添加新字段映射"></a>添加新字段映射</h4><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FsQfqDb98HCLdQFh8Pxj7Z7Zl1QJ.png"></p><h4 id="更新映射"><a href="#更新映射" class="headerlink" title="更新映射"></a>更新映射</h4><p>对于已经存在的字段映射，我们不能更新。更新必须创建新的索引，进行数据迁移。</p><h4 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css">POST _reindex <span class="hljs-selector-attr">[固定写法]</span><br>&#123;<br>  &quot;source&quot;:&#123;<br>      &quot;index&quot;:<span class="hljs-string">&quot;twitter&quot;</span>,<br>      <span class="hljs-string">&quot;twitter&quot;</span>:<span class="hljs-string">&quot;twitter&quot;</span><br>   &#125;,<br>  &quot;dest&quot;:&#123;<br>      &quot;index&quot;:<span class="hljs-string">&quot;new_twitters&quot;</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>更多详情见： <a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.6/docs-reindex.html">数据迁移</a></p><h2 id="4、分词"><a href="#4、分词" class="headerlink" title="4、分词"></a>4、分词</h2><blockquote><p>一个 tokenizer（分词器）接收一个字符流，将之分割为独立的 tokens（词元，通常是独立的单词），然后输出 tokens 流。</p><p>例如：whitespace tokenizer 遇到空白字符时分割文本。它会将文本“Quick brown fox!”分割为[Quick,brown,fox!]。</p><p>该 tokenizer（分词器）还负责记录各个 terms(词条)的顺序或 position 位置（用于 phrase 短语和 word proximity 词近邻查询），以及 term（词条）所代表的原始 word（单词）的 start（起始）和 end（结束）的 character offsets（字符串偏移量）（用于高亮显示搜索的内容）。</p><p>elasticsearch 提供了很多内置的分词器，可以用来构建 custom analyzers（自定义分词器）。</p><p>关于分词器： <a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.6/analysis.html">分词器</a></p></blockquote><ul><li>使用</li></ul><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs fsharp">POST <span class="hljs-keyword">_analyze</span><br>&#123;<br>  <span class="hljs-string">&quot;analyzer&quot;</span><span class="hljs-operator">:</span> <span class="hljs-string">&quot;standard&quot;</span>,<br>  <span class="hljs-string">&quot;text&quot;</span><span class="hljs-operator">:</span> <span class="hljs-string">&quot;The 2 QUICK Brown-Foxes jumped over the lazy dog&#x27;s bone.&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1、安装-ik-分词器"><a href="#1、安装-ik-分词器" class="headerlink" title="1、安装 ik 分词器"></a>1、安装 ik 分词器</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-comment"># 注意和es版本对应</span><br>[root@server1 elasticsearch]<span class="hljs-comment"># wget https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.4.2/elasticsearch-analysis-ik-7.4.2.zip</span><br>[root@server1 elasticsearch]<span class="hljs-comment"># unzip elasticsearch-analysis-ik-7.4.2.zip -d ik</span><br>[root@server1 elasticsearch]<span class="hljs-comment"># mv ik plugins/</span><br>[root@server1 elasticsearch]<span class="hljs-comment"># docker restart elasticsearch kibana</span><br></code></pre></td></tr></table></figure><h3 id="2、测试"><a href="#2、测试" class="headerlink" title="2、测试"></a>2、测试</h3><ul><li>使用默认分词器</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> my_index/_analyze<br>&#123;<br>   <span class="hljs-string">&quot;text&quot;</span>:<span class="hljs-string">&quot;我是中国人&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs ada">&#123;<br>  <span class="hljs-string">&quot;tokens&quot;</span> : [<br>    &#123;<br>      <span class="hljs-string">&quot;token&quot;</span> : &quot;我&quot;,<br>      <span class="hljs-string">&quot;start_offset&quot;</span> : 0,<br>      <span class="hljs-string">&quot;end_offset&quot;</span> : 1,<br>      <span class="hljs-string">&quot;type&quot;</span> : &quot;&lt;<span class="hljs-type">IDEOGRAPHIC</span>&gt;<span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>position<span class="hljs-string">&quot; : 0</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    &#123;</span><br><span class="hljs-string">      &quot;</span>token<span class="hljs-string">&quot; : &quot;</span>是<span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>start_offset<span class="hljs-string">&quot; : 1,</span><br><span class="hljs-string">      &quot;</span>end_offset<span class="hljs-string">&quot; : 2,</span><br><span class="hljs-string">      &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>&lt;IDEOGRAPHIC&gt;<span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>position<span class="hljs-string">&quot; : 1</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    &#123;</span><br><span class="hljs-string">      &quot;</span>token<span class="hljs-string">&quot; : &quot;</span>中<span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>start_offset<span class="hljs-string">&quot; : 2,</span><br><span class="hljs-string">      &quot;</span>end_offset<span class="hljs-string">&quot; : 3,</span><br><span class="hljs-string">      &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>&lt;IDEOGRAPHIC&gt;<span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>position<span class="hljs-string">&quot; : 2</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    &#123;</span><br><span class="hljs-string">      &quot;</span>token<span class="hljs-string">&quot; : &quot;</span>国<span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>start_offset<span class="hljs-string">&quot; : 3,</span><br><span class="hljs-string">      &quot;</span>end_offset<span class="hljs-string">&quot; : 4,</span><br><span class="hljs-string">      &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>&lt;IDEOGRAPHIC&gt;<span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>position<span class="hljs-string">&quot; : 3</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    &#123;</span><br><span class="hljs-string">      &quot;</span>token<span class="hljs-string">&quot; : &quot;</span>人<span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>start_offset<span class="hljs-string">&quot; : 4,</span><br><span class="hljs-string">      &quot;</span>end_offset<span class="hljs-string">&quot; : 5,</span><br><span class="hljs-string">      &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>&lt;IDEOGRAPHIC&gt;<span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>position<span class="hljs-string">&quot; : 4</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  ]</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>使用智能分词器</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> my_index/_analyze<br>&#123;<br>   <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span>,<br>   <span class="hljs-string">&quot;text&quot;</span>:<span class="hljs-string">&quot;我是中国人&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs ada">&#123;<br>  <span class="hljs-string">&quot;tokens&quot;</span> : [<br>    &#123;<br>      <span class="hljs-string">&quot;token&quot;</span> : &quot;我&quot;,<br>      <span class="hljs-string">&quot;start_offset&quot;</span> : 0,<br>      <span class="hljs-string">&quot;end_offset&quot;</span> : 1,<br>      <span class="hljs-string">&quot;type&quot;</span> : &quot;<span class="hljs-type">CN_CHAR</span><span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>position<span class="hljs-string">&quot; : 0</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    &#123;</span><br><span class="hljs-string">      &quot;</span>token<span class="hljs-string">&quot; : &quot;</span>是<span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>start_offset<span class="hljs-string">&quot; : 1,</span><br><span class="hljs-string">      &quot;</span>end_offset<span class="hljs-string">&quot; : 2,</span><br><span class="hljs-string">      &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>CN_CHAR<span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>position<span class="hljs-string">&quot; : 1</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    &#123;</span><br><span class="hljs-string">      &quot;</span>token<span class="hljs-string">&quot; : &quot;</span>中国人<span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>start_offset<span class="hljs-string">&quot; : 2,</span><br><span class="hljs-string">      &quot;</span>end_offset<span class="hljs-string">&quot; : 5,</span><br><span class="hljs-string">      &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>CN_WORD<span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>position<span class="hljs-string">&quot; : 2</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  ]</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>使用 max 分词器</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> my_index/_analyze<br>&#123;<br>   <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>   <span class="hljs-string">&quot;text&quot;</span>:<span class="hljs-string">&quot;我是中国人&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs ada">&#123;<br>  <span class="hljs-string">&quot;tokens&quot;</span> : [<br>    &#123;<br>      <span class="hljs-string">&quot;token&quot;</span> : &quot;我&quot;,<br>      <span class="hljs-string">&quot;start_offset&quot;</span> : 0,<br>      <span class="hljs-string">&quot;end_offset&quot;</span> : 1,<br>      <span class="hljs-string">&quot;type&quot;</span> : &quot;<span class="hljs-type">CN_CHAR</span><span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>position<span class="hljs-string">&quot; : 0</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    &#123;</span><br><span class="hljs-string">      &quot;</span>token<span class="hljs-string">&quot; : &quot;</span>是<span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>start_offset<span class="hljs-string">&quot; : 1,</span><br><span class="hljs-string">      &quot;</span>end_offset<span class="hljs-string">&quot; : 2,</span><br><span class="hljs-string">      &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>CN_CHAR<span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>position<span class="hljs-string">&quot; : 1</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    &#123;</span><br><span class="hljs-string">      &quot;</span>token<span class="hljs-string">&quot; : &quot;</span>中国人<span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>start_offset<span class="hljs-string">&quot; : 2,</span><br><span class="hljs-string">      &quot;</span>end_offset<span class="hljs-string">&quot; : 5,</span><br><span class="hljs-string">      &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>CN_WORD<span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>position<span class="hljs-string">&quot; : 2</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    &#123;</span><br><span class="hljs-string">      &quot;</span>token<span class="hljs-string">&quot; : &quot;</span>中国<span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>start_offset<span class="hljs-string">&quot; : 2,</span><br><span class="hljs-string">      &quot;</span>end_offset<span class="hljs-string">&quot; : 4,</span><br><span class="hljs-string">      &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>CN_WORD<span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>position<span class="hljs-string">&quot; : 3</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    &#123;</span><br><span class="hljs-string">      &quot;</span>token<span class="hljs-string">&quot; : &quot;</span>国人<span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>start_offset<span class="hljs-string">&quot; : 3,</span><br><span class="hljs-string">      &quot;</span>end_offset<span class="hljs-string">&quot; : 5,</span><br><span class="hljs-string">      &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>CN_WORD<span class="hljs-string">&quot;,</span><br><span class="hljs-string">      &quot;</span>position<span class="hljs-string">&quot; : 4</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  ]</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3、自定义词库"><a href="#3、自定义词库" class="headerlink" title="3、自定义词库"></a>3、自定义词库</h3><h4 id="安装-nginx"><a href="#安装-nginx" class="headerlink" title="安装 nginx"></a>安装 nginx</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 随便启动一个，为了复制出配置</span><br> lqs@PolarisiMac  ~/mydata  docker run -p <span class="hljs-number">80</span>:<span class="hljs-number">80</span> --name nginx -d nginx:<span class="hljs-number">1.10</span><br><span class="hljs-comment"># 把配置文件复制到mydata文件夹下</span><br> lqs@PolarisiMac  ~<span class="hljs-regexp">/mydata  docker container cp nginx:/</span>etc/nginx .<br><span class="hljs-comment"># 将nginx命名为conf，新建nginx文件夹，将conf移进nginx</span><br>└── nginx<br>    └── conf<br>        ├── conf.d<br>        │   └── default.conf<br>        ├── fastcgi_params<br>        ├── koi-utf<br>        ├── koi-win<br>        ├── mime.types<br>        ├── modules -&gt; <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/nginx/m</span>odules<br>        ├── nginx.conf<br>        ├── scgi_params<br>        ├── uwsgi_params<br>        └── win-utf<br><span class="hljs-comment"># 创建新的nginx</span><br>docker run -p <span class="hljs-number">80</span>:<span class="hljs-number">80</span> --name nginx \<br>-v <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/mydata/</span>nginx<span class="hljs-regexp">/html:/u</span>sr<span class="hljs-regexp">/share/</span>nginx/html \<br>-v <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/mydata/</span>nginx<span class="hljs-regexp">/logs:/</span>var<span class="hljs-regexp">/log/</span>nginx \<br>-v <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/mydata/</span>nginx<span class="hljs-regexp">/conf:/</span>etc/nginx \<br>-d nginx:<span class="hljs-number">1.10</span><br></code></pre></td></tr></table></figure><h4 id="添加字典"><a href="#添加字典" class="headerlink" title="添加字典"></a>添加字典</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">echo <span class="hljs-string">&quot;尚硅谷 乔碧罗&quot;</span> &gt; <span class="hljs-regexp">/mydata/</span>nginx<span class="hljs-regexp">/html/</span>fenci.txt<br></code></pre></td></tr></table></figure><h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml">vim $HOME/mydata/elasticsearch/plugins/ik/config/IKAnalyzer.cfg.xml<br><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">properties</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="hljs-tag">&lt;/<span class="hljs-name">comment</span>&gt;</span><br><span class="hljs-comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;ext_dict&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br> <span class="hljs-comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;ext_stopwords&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br><span class="hljs-comment">&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;remote_ext_dict&quot;</span>&gt;</span>http://#/es/fenci.txt<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br><span class="hljs-comment">&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;entry key=&quot;remote_ext_stopwords&quot;&gt;words_location&lt;/entry&gt; --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul><li>先重启 es</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FvVKkWUgdz03tRzLx1G3cXc-Pr7e.png"></p><h1 id="五、ElasticSearch-Rest-Client"><a href="#五、ElasticSearch-Rest-Client" class="headerlink" title="五、ElasticSearch-Rest-Client"></a>五、ElasticSearch-Rest-Client</h1><p>有几种办法</p><ol><li>9300: TCP</li></ol><ul><li>spring-data-elasticsearch:transport-api.jar;<ul><li>springboot 版本不同，ransport-api.jar 不同，不能适配 es 版本</li><li>7.x 已经不建议使用，8 以后就要废弃</li></ul></li></ul><ol start="2"><li>9200: HTTP</li></ol><ul><li>jestClient: 非官方，更新慢；</li><li>RestTemplate：模拟 HTTP 请求，ES 很多操作需要自己封装，麻烦；</li><li>HttpClient：同上；</li><li>Elasticsearch-Rest-Client：官方 RestClient，封装了 ES 操作，API 层次分明，上手简单；<br>最终选择 Elasticsearch-Rest-Client（elasticsearch-rest-high-level-client）；<br><a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high.html">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high.html</a></li></ul><h2 id="1、SpringBoot-整合-ES"><a href="#1、SpringBoot-整合-ES" class="headerlink" title="1、SpringBoot 整合 ES"></a>1、SpringBoot 整合 ES</h2><ul><li>1、maven 依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">elasticsearch.version</span>&gt;</span>7.4.2<span class="hljs-tag">&lt;/<span class="hljs-name">elasticsearch.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch.client<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;elasticsearch.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch.client<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch-rest-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch.client<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch-rest-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;elasticsearch.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;elasticsearch.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>2、yml 配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 应用名称</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">gulimall-search</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span><br>  <span class="hljs-attr">elasticsearch:</span><br>    <span class="hljs-attr">jest:</span><br>      <span class="hljs-attr">proxy:</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-number">9200</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">elastic</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">changme</span><br></code></pre></td></tr></table></figure><ul><li>3、配置类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//以后会修改</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GulimallElasticSearchConfig</span> &#123;<br><br>    <span class="hljs-comment">//通用设置项</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> RequestOptions COMMON_OPTIONS;<br>    <span class="hljs-keyword">static</span> &#123;<br>        RequestOptions.<span class="hljs-type">Builder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> RequestOptions.DEFAULT.toBuilder();<br>        COMMON_OPTIONS = builder.build();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RestHighLevelClient <span class="hljs-title function_">esRestClient</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">RestClientBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        builder = RestClient.builder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHost</span>(<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-number">9200</span>,<span class="hljs-string">&quot;http&quot;</span>));<br><br>        <span class="hljs-type">RestHighLevelClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestHighLevelClient</span>(builder);<br>        <span class="hljs-keyword">return</span> client;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>4、测试使用</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs awk">@RunWith(SpringRunner.class)<br>@SpringBootTest<br>public class GulimallSearchApplicationTests &#123;<br><br>    @Resource<br>    private RestHighLevelClient client;<br><br>    @Data<br>    @AllArgsConstructor<br>    @NoArgsConstructor<br>    class User&#123;<br>        private String userName;<br>        private String gender;<br>        private Integer age;<br>    &#125;<br><br>    @Data<br>    @ToString<br>    @AllArgsConstructor<br>    @NoArgsConstructor<br>    static class Account&#123;<br>        private int account_number;<br>        private int balance;<br>        private String firstname;<br>        private String lastname;<br>        private int age;<br>        private String gender;<br>        private String address;<br>        private String employer;<br>        private String email;<br>        private String city;<br>        private String state;<br>    &#125;<br>    /**<br>     * 更新保存二合一<br>     * @throws IOException 网络操作必定需要处理异常<br>     */<br>    @Test<br>    public void contextLoads() throws IOException &#123;<br>        IndexRequest indexRequest = new IndexRequest(<span class="hljs-string">&quot;users&quot;</span>);<br>        indexRequest.id(<span class="hljs-string">&quot;1&quot;</span>);<br>        <span class="hljs-regexp">//</span>使用方法一<br><span class="hljs-regexp">//</span>        indexRequest.source(<span class="hljs-string">&quot;userName&quot;</span>,<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;gender&quot;</span>,<span class="hljs-string">&quot;male&quot;</span>);<br>        <span class="hljs-regexp">//</span>使用方法二<br>        User user = new User(<span class="hljs-string">&quot;lqs&quot;</span>, <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-number">21</span>);<br>        String jsonString = JSON.toJSONString(user);<br>        indexRequest.source(jsonString, XContentType.JSON);<br><br>        <span class="hljs-regexp">//</span>执行操作<br>        IndexResponse index = client.index(indexRequest, GulimallElasticSearchConfig.COMMON_OPTIONS);<br><br>        <span class="hljs-regexp">//</span>提取响应数据<br>        System.out.println(index);<br>    &#125;<br><br>    @Test<br>    public void testSearch() throws IOException &#123;<br>        <span class="hljs-regexp">//</span><span class="hljs-number">1</span>、创建检索请求<br>        SearchRequest searchRequest = new SearchRequest();<br>        <span class="hljs-regexp">//</span>指定索引<br>        searchRequest.indices(<span class="hljs-string">&quot;bank&quot;</span>);<br>        <span class="hljs-regexp">//</span>指定DSL，检索条件<br>        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();<br>        searchRequest.source(sourceBuilder);<br>        <span class="hljs-regexp">//</span><span class="hljs-number">1</span>、<span class="hljs-number">1</span>构建检索条件<br>        sourceBuilder.query(QueryBuilders.matchQuery(<span class="hljs-string">&quot;address&quot;</span>,<span class="hljs-string">&quot;mill&quot;</span>));<br><span class="hljs-regexp">//</span>        System.out.println(sourceBuilder.toString());<br><span class="hljs-regexp">//</span>        sourceBuilder.from();<br><span class="hljs-regexp">//</span>        sourceBuilder.size();<br>        <span class="hljs-regexp">//</span><span class="hljs-number">1</span>、<span class="hljs-number">2</span>按照年龄聚合<br>        TermsAggregationBuilder ageAgg = AggregationBuilders.terms(<span class="hljs-string">&quot;ageAgg&quot;</span>).field(<span class="hljs-string">&quot;age&quot;</span>).size(<span class="hljs-number">10</span>);<br>        sourceBuilder.aggregation(ageAgg);<br>        <span class="hljs-regexp">//</span><span class="hljs-number">1</span>、<span class="hljs-number">3</span>计算平均薪资<br>        AvgAggregationBuilder balanceAvg = AggregationBuilders.avg(<span class="hljs-string">&quot;balanceAvg&quot;</span>).field(<span class="hljs-string">&quot;balance&quot;</span>);<br><span class="hljs-regexp">//</span>        System.out.println(<span class="hljs-string">&quot;检索条件&quot;</span>+sourceBuilder.toString());<br>        sourceBuilder.aggregation(balanceAvg);<br><br>        <span class="hljs-regexp">//</span><span class="hljs-number">2</span>、执行检索<br>        SearchResponse response = client.search(searchRequest, GulimallElasticSearchConfig.COMMON_OPTIONS);<br><br>        <span class="hljs-regexp">//</span><span class="hljs-number">3</span>、结果分析<br><span class="hljs-regexp">//</span>        System.out.println(response.toString());<br>        Map map = JSON.parseObject(response.toString(), Map.class);<br>        <span class="hljs-regexp">//</span>&#123;<span class="hljs-string">&quot;query&quot;</span>:&#123;<span class="hljs-string">&quot;match&quot;</span>:&#123;<span class="hljs-string">&quot;address&quot;</span>:&#123;<span class="hljs-string">&quot;query&quot;</span>:<span class="hljs-string">&quot;mill&quot;</span>,<span class="hljs-string">&quot;operator&quot;</span>:<span class="hljs-string">&quot;OR&quot;</span>,<span class="hljs-string">&quot;prefix_length&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;max_expansions&quot;</span>:<span class="hljs-number">50</span>,<span class="hljs-string">&quot;fuzzy_transpositions&quot;</span>:true,<span class="hljs-string">&quot;lenient&quot;</span>:false,<span class="hljs-string">&quot;zero_terms_query&quot;</span>:<span class="hljs-string">&quot;NONE&quot;</span>,<span class="hljs-string">&quot;auto_generate_synonyms_phrase_query&quot;</span>:true,<span class="hljs-string">&quot;boost&quot;</span>:<span class="hljs-number">1.0</span>&#125;&#125;&#125;&#125;<br>        <span class="hljs-regexp">//</span>&#123;<span class="hljs-string">&quot;took&quot;</span>:<span class="hljs-number">24</span>,<span class="hljs-string">&quot;timed_out&quot;</span>:false,<span class="hljs-string">&quot;_shards&quot;</span>:&#123;<span class="hljs-string">&quot;total&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;successful&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;skipped&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;failed&quot;</span>:<span class="hljs-number">0</span>&#125;,<span class="hljs-string">&quot;hits&quot;</span>:&#123;<span class="hljs-string">&quot;total&quot;</span>:&#123;<span class="hljs-string">&quot;value&quot;</span>:<span class="hljs-number">4</span>,<span class="hljs-string">&quot;relation&quot;</span>:<span class="hljs-string">&quot;eq&quot;</span>&#125;,<span class="hljs-string">&quot;max_score&quot;</span>:<span class="hljs-number">5.4032025</span>,<span class="hljs-string">&quot;hits&quot;</span>:[&#123;<span class="hljs-string">&quot;_index&quot;</span>:<span class="hljs-string">&quot;bank&quot;</span>,<span class="hljs-string">&quot;_type&quot;</span>:<span class="hljs-string">&quot;account&quot;</span>,<span class="hljs-string">&quot;_id&quot;</span>:<span class="hljs-string">&quot;970&quot;</span>,<span class="hljs-string">&quot;_score&quot;</span>:<span class="hljs-number">5.4032025</span>,<span class="hljs-string">&quot;_source&quot;</span>:&#123;<span class="hljs-string">&quot;account_number&quot;</span>:<span class="hljs-number">970</span>,<span class="hljs-string">&quot;balance&quot;</span>:<span class="hljs-number">19648</span>,<span class="hljs-string">&quot;firstname&quot;</span>:<span class="hljs-string">&quot;Forbes&quot;</span>,<span class="hljs-string">&quot;lastname&quot;</span>:<span class="hljs-string">&quot;Wallace&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">28</span>,<span class="hljs-string">&quot;gender&quot;</span>:<span class="hljs-string">&quot;M&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;990 Mill Road&quot;</span>,<span class="hljs-string">&quot;employer&quot;</span>:<span class="hljs-string">&quot;Pheast&quot;</span>,<span class="hljs-string">&quot;email&quot;</span>:<span class="hljs-string">&quot;forbeswallace@pheast.com&quot;</span>,<span class="hljs-string">&quot;city&quot;</span>:<span class="hljs-string">&quot;Lopezo&quot;</span>,<span class="hljs-string">&quot;state&quot;</span>:<span class="hljs-string">&quot;AK&quot;</span>&#125;&#125;,&#123;<span class="hljs-string">&quot;_index&quot;</span>:<span class="hljs-string">&quot;bank&quot;</span>,<span class="hljs-string">&quot;_type&quot;</span>:<span class="hljs-string">&quot;account&quot;</span>,<span class="hljs-string">&quot;_id&quot;</span>:<span class="hljs-string">&quot;136&quot;</span>,<span class="hljs-string">&quot;_score&quot;</span>:<span class="hljs-number">5.4032025</span>,<span class="hljs-string">&quot;_source&quot;</span>:&#123;<span class="hljs-string">&quot;account_number&quot;</span>:<span class="hljs-number">136</span>,<span class="hljs-string">&quot;balance&quot;</span>:<span class="hljs-number">45801</span>,<span class="hljs-string">&quot;firstname&quot;</span>:<span class="hljs-string">&quot;Winnie&quot;</span>,<span class="hljs-string">&quot;lastname&quot;</span>:<span class="hljs-string">&quot;Holland&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">38</span>,<span class="hljs-string">&quot;gender&quot;</span>:<span class="hljs-string">&quot;M&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;198 Mill Lane&quot;</span>,<span class="hljs-string">&quot;employer&quot;</span>:<span class="hljs-string">&quot;Neteria&quot;</span>,<span class="hljs-string">&quot;email&quot;</span>:<span class="hljs-string">&quot;winnieholland@neteria.com&quot;</span>,<span class="hljs-string">&quot;city&quot;</span>:<span class="hljs-string">&quot;Urie&quot;</span>,<span class="hljs-string">&quot;state&quot;</span>:<span class="hljs-string">&quot;IL&quot;</span>&#125;&#125;,&#123;<span class="hljs-string">&quot;_index&quot;</span>:<span class="hljs-string">&quot;bank&quot;</span>,<span class="hljs-string">&quot;_type&quot;</span>:<span class="hljs-string">&quot;account&quot;</span>,<span class="hljs-string">&quot;_id&quot;</span>:<span class="hljs-string">&quot;345&quot;</span>,<span class="hljs-string">&quot;_score&quot;</span>:<span class="hljs-number">5.4032025</span>,<span class="hljs-string">&quot;_source&quot;</span>:&#123;<span class="hljs-string">&quot;account_number&quot;</span>:<span class="hljs-number">345</span>,<span class="hljs-string">&quot;balance&quot;</span>:<span class="hljs-number">9812</span>,<span class="hljs-string">&quot;firstname&quot;</span>:<span class="hljs-string">&quot;Parker&quot;</span>,<span class="hljs-string">&quot;lastname&quot;</span>:<span class="hljs-string">&quot;Hines&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">38</span>,<span class="hljs-string">&quot;gender&quot;</span>:<span class="hljs-string">&quot;M&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;715 Mill Avenue&quot;</span>,<span class="hljs-string">&quot;employer&quot;</span>:<span class="hljs-string">&quot;Baluba&quot;</span>,<span class="hljs-string">&quot;email&quot;</span>:<span class="hljs-string">&quot;parkerhines@baluba.com&quot;</span>,<span class="hljs-string">&quot;city&quot;</span>:<span class="hljs-string">&quot;Blackgum&quot;</span>,<span class="hljs-string">&quot;state&quot;</span>:<span class="hljs-string">&quot;KY&quot;</span>&#125;&#125;,&#123;<span class="hljs-string">&quot;_index&quot;</span>:<span class="hljs-string">&quot;bank&quot;</span>,<span class="hljs-string">&quot;_type&quot;</span>:<span class="hljs-string">&quot;account&quot;</span>,<span class="hljs-string">&quot;_id&quot;</span>:<span class="hljs-string">&quot;472&quot;</span>,<span class="hljs-string">&quot;_score&quot;</span>:<span class="hljs-number">5.4032025</span>,<span class="hljs-string">&quot;_source&quot;</span>:&#123;<span class="hljs-string">&quot;account_number&quot;</span>:<span class="hljs-number">472</span>,<span class="hljs-string">&quot;balance&quot;</span>:<span class="hljs-number">25571</span>,<span class="hljs-string">&quot;firstname&quot;</span>:<span class="hljs-string">&quot;Lee&quot;</span>,<span class="hljs-string">&quot;lastname&quot;</span>:<span class="hljs-string">&quot;Long&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">32</span>,<span class="hljs-string">&quot;gender&quot;</span>:<span class="hljs-string">&quot;F&quot;</span>,<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;288 Mill Street&quot;</span>,<span class="hljs-string">&quot;employer&quot;</span>:<span class="hljs-string">&quot;Comverges&quot;</span>,<span class="hljs-string">&quot;email&quot;</span>:<span class="hljs-string">&quot;leelong@comverges.com&quot;</span>,<span class="hljs-string">&quot;city&quot;</span>:<span class="hljs-string">&quot;Movico&quot;</span>,<span class="hljs-string">&quot;state&quot;</span>:<span class="hljs-string">&quot;MT&quot;</span>&#125;&#125;]&#125;&#125;<br>        <span class="hljs-regexp">//</span><span class="hljs-number">3</span>、<span class="hljs-number">1</span> 获取所有查到的数据<br>        SearchHits hits = response.getHits();<br>        SearchHit[] searchHits = hits.getHits();<br>        <span class="hljs-keyword">for</span> (SearchHit hit : searchHits)&#123;<br>            /*&#123;<br>                <span class="hljs-string">&quot;_index&quot;</span> : <span class="hljs-string">&quot;bank&quot;</span>,<br>                    <span class="hljs-string">&quot;_type&quot;</span> : <span class="hljs-string">&quot;account&quot;</span>,<br>                    <span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-string">&quot;970&quot;</span>,<br>                    <span class="hljs-string">&quot;_score&quot;</span> : <span class="hljs-number">5.4032025</span>,<br>                    <span class="hljs-string">&quot;_source&quot;</span> : &#123;<br>                <span class="hljs-string">&quot;account_number&quot;</span> : <span class="hljs-number">970</span>,<br>                        <span class="hljs-string">&quot;balance&quot;</span> : <span class="hljs-number">19648</span>,<br>                         <span class="hljs-string">&quot;firstname&quot;</span> : <span class="hljs-string">&quot;Forbes&quot;</span>,<br>                        <span class="hljs-string">&quot;lastname&quot;</span> : <span class="hljs-string">&quot;Wallace&quot;</span>,<br>                        <span class="hljs-string">&quot;age&quot;</span> : <span class="hljs-number">28</span>,<br>                        <span class="hljs-string">&quot;gender&quot;</span> : <span class="hljs-string">&quot;M&quot;</span>,<br>                        <span class="hljs-string">&quot;address&quot;</span> : <span class="hljs-string">&quot;990 Mill Road&quot;</span>,<br>                        <span class="hljs-string">&quot;employer&quot;</span> : <span class="hljs-string">&quot;Pheast&quot;</span>,<br>                        <span class="hljs-string">&quot;email&quot;</span> : <span class="hljs-string">&quot;forbeswallace@pheast.com&quot;</span>,<br>                        <span class="hljs-string">&quot;city&quot;</span> : <span class="hljs-string">&quot;Lopezo&quot;</span>,<br>                        <span class="hljs-string">&quot;state&quot;</span> : <span class="hljs-string">&quot;AK&quot;</span><br>            &#125;<br>            &#125;*/<br><span class="hljs-regexp">//</span>            System.out.println(hit.toString());<br>            String str = hit.getSourceAsString();<br>            Account account = JSON.parseObject(str, Account.class);<br><span class="hljs-regexp">//</span>            System.out.println(<span class="hljs-string">&quot;account: &quot;</span>+account);<br>        &#125;<br>        <span class="hljs-regexp">//</span><span class="hljs-number">3</span>、<span class="hljs-number">2</span> 获取检索到的分析信息<br>        Aggregations aggregations = response.getAggregations();<br>        <span class="hljs-keyword">for</span>(Aggregation aggregation : aggregations.asList())&#123;<br><span class="hljs-regexp">//</span>            System.out.println(<span class="hljs-string">&quot;当前聚合&quot;</span>+aggregation.getName());<br>        &#125;<br><br>        Terms ageAgg1 = aggregations.get(<span class="hljs-string">&quot;ageAgg&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Terms.Bucket bucket : ageAgg1.getBuckets())&#123;<br>            String keyAsString = bucket.getKeyAsString();<br>            System.out.println(<span class="hljs-string">&quot;年龄&quot;</span>+keyAsString);<br>        &#125;<br>        Avg balanceAvg1 =  aggregations.get(<span class="hljs-string">&quot;balanceAvg&quot;</span>);<br>        Aggregation balanceAvg2 = aggregations.get(<span class="hljs-string">&quot;balanceAvg&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FjtSEQKwQGe6RJD8-B0tAi5hfbpB.png"></p>]]></content>
    
    
    <categories>
      
      <category>NoSQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java8新特性</title>
    <link href="/2022/08/13/yuque/Java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <url>/2022/08/13/yuque/Java8%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<p>Java 最新 LTS 已经到 17 了，面试的时候如果 JAVA8 都不会的话，感觉很难接受</p><span id="more"></span><h1 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda 表达式"></a>Lambda 表达式</h1><blockquote><p>一个匿名函数、可以理解为一段可以传递的代码。可以写出更简洁、更灵活的代码</p><p>本质：函数式接口的实例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//普通写法</span><br>        Comparator&lt;Integer&gt; com = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Integer&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Integer o1, Integer o2)</span> &#123;<br>                <span class="hljs-keyword">return</span> Integer.compare(o1, o2);<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">compare</span> <span class="hljs-operator">=</span> com.compare(<span class="hljs-number">11</span>,<span class="hljs-number">21</span>);<br>        System.out.println(compare);<br><br>        <span class="hljs-comment">//lambda写法</span><br>        Comparator&lt;Integer&gt; com2 = (o1,o2) -&gt; Integer.compare(o1, o2);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">compare2</span> <span class="hljs-operator">=</span> com2.compare(<span class="hljs-number">21</span>, <span class="hljs-number">25</span>);<br>        System.out.println(compare2);<br><br>        <span class="hljs-comment">//方法引用</span><br>        Comparator&lt;Integer&gt; com3 = Integer :: compare;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">compare3</span> <span class="hljs-operator">=</span> com3.compare(<span class="hljs-number">51</span>,<span class="hljs-number">32</span>);<br>        System.out.println(compare3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>语法规则</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 无参无返回值，参数为一个空的小括号<br><span class="hljs-bullet">-</span> 数据类型可以省略，由编译器推断，称为类型判断<br><span class="hljs-bullet">-</span> 若只需要一个参数，参数小括号可以省略<br><span class="hljs-bullet">-</span> 两个以上参数，多条语句，两个括号都不能省略<br><span class="hljs-bullet">-</span> 有且只有一条返回语句时，return 和打括号都可以一起省略<br></code></pre></td></tr></table></figure><h1 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h1><blockquote><p>有且仅有一个抽象方法的接口</p><p>加一个 <code>@FunctionalInterface</code>，JavaDoc 中会表明表示这是一个函数式接口，可以进行校验</p></blockquote><h2 id="四大内置函数式接口"><a href="#四大内置函数式接口" class="headerlink" title="四大内置函数式接口"></a>四大内置函数式接口</h2><table><thead><tr><th>接口</th><th>参数</th><th>返回类型</th><th>用途</th><th>方法</th></tr></thead><tbody><tr><td>Consumer</td><td>T</td><td>void</td><td>对类型 T 对应用操作</td><td>void accept()</td></tr><tr><td>Supplier</td><td>无</td><td>T</td><td>返回类型为 T 对对象</td><td>T get()</td></tr><tr><td>Function</td><td>T</td><td>R</td><td>对类型为 T 对应用操作，并返回结果</td><td>R apply(T t)</td></tr><tr><td>Predicate</td><td>T</td><td>boolean</td><td>确定 T 是否满足约束，并返回 boolean</td><td>boolean test(T t)</td></tr></tbody></table><ul><li>例子</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestLambda3</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">test2</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">String</span>&gt; list = <span class="hljs-title class_">Arrays</span>.<span class="hljs-title function_">asList</span>(<span class="hljs-string">&quot;北京&quot;</span>, <span class="hljs-string">&quot;南京&quot;</span>, <span class="hljs-string">&quot;西京&quot;</span>, <span class="hljs-string">&quot;北京&quot;</span>, <span class="hljs-string">&quot;普京&quot;</span>,<span class="hljs-string">&quot;武汉&quot;</span>,<span class="hljs-string">&quot;深圳&quot;</span>);<br><br>        <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">String</span>&gt; filterStrs = <span class="hljs-title function_">filterString</span>(list, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Predicate</span>&lt;<span class="hljs-title class_">String</span>&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> s</span>) &#123;<br>                <span class="hljs-keyword">return</span> s.<span class="hljs-title function_">contains</span>(<span class="hljs-string">&quot;京&quot;</span>);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">String</span>&gt; filterStrs2 = <span class="hljs-title function_">filterString</span>(list, s -&gt; s.<span class="hljs-title function_">contains</span>(<span class="hljs-string">&quot;京&quot;</span>));<br><br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(filterStrs);<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(filterStrs2);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">filterString</span>(<span class="hljs-params">List&lt;<span class="hljs-built_in">String</span>&gt; list, Predicate&lt;<span class="hljs-built_in">String</span>&gt; pre</span>)&#123;<br>        <span class="hljs-title class_">ArrayList</span>&lt;<span class="hljs-title class_">String</span>&gt; filter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-title class_">String</span> s : list) &#123;<br>            <span class="hljs-keyword">if</span>(pre.<span class="hljs-title function_">test</span>(s))&#123;<br>                filter.<span class="hljs-title function_">add</span>(s);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> filter;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><blockquote><p>当要传递给 Lambda 体的操作已经有实现的时候，可以使用方法引用</p><p>要求：实现接口的抽象方法和方法引用的方法有相同的参数列表和返回值类型</p><p>格式：类(或对象)::方法名</p></blockquote><ul><li>1、对象::实例方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMethodRef</span> &#123;<br><span class="hljs-comment">//对象::实例方法</span><br>    <span class="hljs-comment">//Consumer void accept(T t)</span><br>    <span class="hljs-comment">//PrintStream void println(T t)</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        Consumer&lt;String&gt; con1 = str -&gt; System.out.println(str+<span class="hljs-string">&quot;...&quot;</span>);<br>        con1.accept(<span class="hljs-string">&quot;北京&quot;</span>);<br><br>        <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> System.out;<br>        Consumer&lt;String&gt; con2 = ps::println;<br>        con2.accept(<span class="hljs-string">&quot;beijing&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//Supplier中的get()</span><br>    <span class="hljs-comment">//Employee的String getName()</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;tom&quot;</span>, <span class="hljs-number">24</span>, <span class="hljs-number">5600</span>);<br>        Supplier&lt;String&gt; sup1 = () -&gt; emp.getName();<br>        System.out.println(sup1.get());<br><br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">emp2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;tom&quot;</span>, <span class="hljs-number">24</span>, <span class="hljs-number">5600</span>);<br>        Supplier&lt;String&gt; sup2 = emp::getName;<br>        System.out.println(sup2.get());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>类::静态方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestStatic</span>&#123;<br>    <span class="hljs-comment">//类：静态方法</span><br>    <span class="hljs-comment">//Comparator    int compare(t1,t2)</span><br>    <span class="hljs-comment">//Integer       int compare(t1,t2)</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>        Comparator&lt;Integer&gt; com1 = (t1,t2) -&gt; Integer.compare(t1,t2);<br>        System.out.println(com1.compare(<span class="hljs-number">12</span>,<span class="hljs-number">21</span>));<br><br>        Comparator&lt;Integer&gt; com2 =Integer::compare;<br>        System.out.println(com2.compare(<span class="hljs-number">12</span>,<span class="hljs-number">32</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span>&#123;<br>        Function&lt;Double, Long&gt; function = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>&lt;Double, Long&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">apply</span><span class="hljs-params">(Double d)</span> &#123;<br>                <span class="hljs-keyword">return</span> Math.round(d);<br>            &#125;<br>        &#125;;<br>        Function&lt;Double, Long&gt; function1 = d -&gt;Math.round(d);<br>        Function&lt;Double, Long&gt; function2 = Math::round;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>类::实例方法</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-comment">//类::实例方法(有难度)</span><br>    <span class="hljs-comment">//Comparator    int compare(T t1, T t2)</span><br>    <span class="hljs-comment">//String        int t1 compareTo(t2)</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">test5</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title class_">Comparator</span>&lt;<span class="hljs-title class_">String</span>&gt; com1 = (s1,s2) -&gt; s1.<span class="hljs-title function_">compareTo</span>(s2);<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(com1.<span class="hljs-title function_">compare</span>(<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;abd&quot;</span>));<br><br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;***************&quot;</span>);<br><br>        <span class="hljs-title class_">Comparator</span>&lt;<span class="hljs-title class_">String</span>&gt; com2 = <span class="hljs-title class_">String</span> :: compareTo;<br>    &#125;<br><br><br>    <span class="hljs-comment">//BiPredicate   boolean test(T t1, T t2)</span><br>    <span class="hljs-comment">//String        boolean t1.equals(t2)</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">test6</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title class_">BiPredicate</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">String</span>&gt; pre1 = (s1,s2) -&gt; s1.<span class="hljs-title function_">equals</span>(s2);<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(pre1.<span class="hljs-title function_">test</span>(<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>));<br><br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;***************&quot;</span>);<br><br>        <span class="hljs-title class_">BiPredicate</span>&lt;<span class="hljs-title class_">String</span>,<span class="hljs-title class_">String</span>&gt; pre2 = <span class="hljs-title class_">String</span> :: equals;<br><br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(pre2.<span class="hljs-title function_">test</span>(<span class="hljs-string">&quot;ab&quot;</span>,<span class="hljs-string">&quot;ab&quot;</span>));<br>    &#125;<br>    <span class="hljs-comment">//Function  R apply(T t)</span><br>    <span class="hljs-comment">//Employee  String getName()</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">test7</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title class_">Employee</span> employee = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;lqs&quot;</span>, <span class="hljs-number">24</span>, <span class="hljs-number">9600</span>);<br>        <span class="hljs-title class_">Function</span>&lt;<span class="hljs-title class_">Employee</span>, <span class="hljs-title class_">String</span>&gt; <span class="hljs-keyword">function</span> = e -&gt; e.<span class="hljs-title function_">getName</span>();<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-keyword">function</span>.<span class="hljs-title function_">apply</span>(employee));<br><br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;***************&quot;</span>);<br><br>        <span class="hljs-title class_">Function</span>&lt;<span class="hljs-title class_">Employee</span>, <span class="hljs-title class_">String</span>&gt; function1 = <span class="hljs-title class_">Employee</span>::getName;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(function1.<span class="hljs-title function_">apply</span>(employee));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h2><blockquote><p>类似方法引用，函数式接口的抽象方法和构造器有相同的形参列表，就可以使用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestConstructorRef</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        Supplier&lt;Employee&gt; sup = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Supplier</span>&lt;Employee&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Employee <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>();<br>            &#125;<br>        &#125;;<br><br>        Supplier&lt;Employee&gt; sup1 = () -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>();<br>        <span class="hljs-comment">//构造器引用</span><br>        Supplier&lt;Employee&gt; sup2 = Employee::<span class="hljs-keyword">new</span>;<br><br>        System.out.println(sup2.get());<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>        Function&lt;String ,Employee&gt; func1 = name -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(name);<br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> func1.apply(<span class="hljs-string">&quot;lqs&quot;</span>);<br>        System.out.println(employee);<br><br><br>        Function&lt;String,Employee&gt; func2 = Employee :: <span class="hljs-keyword">new</span>;<br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">employee1</span> <span class="hljs-operator">=</span> func2.apply(<span class="hljs-string">&quot;lcy&quot;</span>);<br>        System.out.println(employee1);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-comment">//BiFunction R apply(T t, U u)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>        BiFunction&lt;String, Integer, Employee&gt; func1 = (name, age) -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(name,age);<br>        System.out.println(func1.apply(<span class="hljs-string">&quot;lqs&quot;</span>, <span class="hljs-number">21</span>));<br><br>        BiFunction&lt;String, Integer, Employee&gt; func2 = Employee :: <span class="hljs-keyword">new</span>;<br>        System.out.println(func2.apply(<span class="hljs-string">&quot;jj&quot;</span>, <span class="hljs-number">21</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数组引用"><a href="#数组引用" class="headerlink" title="数组引用"></a>数组引用</h2><blockquote><p>把数组看做特殊的类，可以使用引用</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestArrayRef</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title class_">Function</span>&lt;<span class="hljs-title class_">Integer</span>,<span class="hljs-title class_">String</span>[]&gt; func1 = length -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[length];<br>        <span class="hljs-title class_">String</span>[] arr1 = func1.<span class="hljs-title function_">apply</span>(<span class="hljs-number">5</span>);<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-title class_">Arrays</span>.<span class="hljs-title function_">toString</span>(arr1));<br><br>        <span class="hljs-title class_">Function</span>&lt;<span class="hljs-title class_">Integer</span>, <span class="hljs-title class_">String</span>[]&gt; func2 = <span class="hljs-title class_">String</span>[]::<span class="hljs-keyword">new</span>;<br>        <span class="hljs-title class_">String</span>[] arr2 = func2.<span class="hljs-title function_">apply</span>(<span class="hljs-number">10</span>);<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-title class_">Arrays</span>.<span class="hljs-title function_">toString</span>(arr2));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h1><blockquote><p>是数据渠道，用于操作数据源（集合、数组）所生成的元素序列</p><p>Stream 不会自己存储元素；不会改变源对象，而是返回一个持有结果的新 Stream；操作是延迟执行的，会等到需要新结果的时候才执行。</p></blockquote><p>Stream &amp;&amp; Collection：Collection 是一种静态的内存数据，Stream 有关计算，面向 CPU</p><p>三个步骤</p><h2 id="创建-Stream"><a href="#创建-Stream" class="headerlink" title="创建 Stream"></a>创建 Stream</h2><p>一个数据源（如数组，集合），获取一个流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestStreamCreate</span> &#123;<br>    <span class="hljs-comment">//通过集合创建</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        List&lt;Employee&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>            list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;name&quot;</span>+i, i+<span class="hljs-number">20</span>, i+<span class="hljs-number">2000</span>));<br>        &#125;<br>        <span class="hljs-comment">//获取流</span><br>        Stream&lt;Employee&gt; stream = list.stream();<br>        <span class="hljs-comment">//返回一个并行流</span><br>        Stream&lt;Employee&gt; parallelsStream = list.parallelStream();<br>    &#125;<br><br>    <span class="hljs-comment">//通过数组</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">76</span>&#125;;<br>        <span class="hljs-type">IntStream</span> <span class="hljs-variable">stream</span> <span class="hljs-operator">=</span> Arrays.stream(arr);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        Employee[] employees = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>[row];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; row; i++)&#123;<br>            employees[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;name&quot;</span>+i, i+<span class="hljs-number">20</span>, i+<span class="hljs-number">2000</span>);<br>        &#125;<br>        Stream&lt;Employee&gt; stream1 = Arrays.stream(employees);<br>    &#125;<br><br>    <span class="hljs-comment">//通过Stream对of()</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>        Stream&lt;Integer&gt; stream = Stream.of(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">90</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//创建无限流</span><br>    <span class="hljs-comment">//limit为了限制</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//迭代</span><br>        <span class="hljs-comment">//Stream&lt;T&gt; iterate(final T seed), final UnaryOperator&lt;T&gt; f)</span><br>        <span class="hljs-comment">//遍历前10个偶数</span><br>        Stream.iterate(<span class="hljs-number">0</span>, t -&gt; t+<span class="hljs-number">2</span>).limit(<span class="hljs-number">10</span>).forEach(System.out::println);<br>        <span class="hljs-comment">//生成</span><br>        <span class="hljs-comment">//Stream&lt;T&gt; generate(Supplier&lt;T&gt; s)</span><br>        <span class="hljs-comment">//前10个随机数</span><br>        Stream.generate(Math::random).limit(<span class="hljs-number">10</span>).forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h2><p>对数据源进行处理</p><ul><li><p>1、<strong>筛选与切片</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>filter(Predicate p)</td><td>接受 lambda，从流中排除某些元素</td></tr><tr><td>distinct()</td><td>筛选，通过流锁生成对 hashCode()和 equals()去除重复元素</td></tr><tr><td>limit(long maxSize)</td><td>截断流，使其元素不超过给定数量</td></tr><tr><td>skip(long n)</td><td>跳过元素，返回一个扔掉了前 n 个元素对流；不足 n 个是返回空流；与 limit 互补</td></tr><tr><td>方法</td><td>描述</td></tr><tr><td>-</td><td>-</td></tr><tr><td>filter(Predicate p)</td><td>接受 lambda，从流中排除某些元素</td></tr><tr><td>distinct()</td><td>筛选，通过流锁生成对 hashCode()和 equals()去除重复元素</td></tr><tr><td>limit(long maxSize)</td><td>截断流，使其元素不超过给定数量</td></tr><tr><td>skip(long n)</td><td>跳过元素，返回一个扔掉了前 n 个元素对流；不足 n 个是返回空流；与 limit 互补</td></tr></tbody></table></li><li><p>例子</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestStreamDeal</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        List&lt;Employee&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>            list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;name&quot;</span>+i, i+<span class="hljs-number">20</span>, i+<span class="hljs-number">2000</span>));<br>        &#125;<br><br>        <span class="hljs-comment">//filter:选择</span><br>        Stream&lt;Employee&gt; stream = list.stream();<br>        <span class="hljs-comment">//查询工资 &gt; 2005的员工</span><br>        stream.filter(employee -&gt; employee.getSalary() &gt; <span class="hljs-number">2005</span>).forEach(System.out::println);<br><br>        System.out.println(<span class="hljs-string">&quot;***************&quot;</span>);<br><br>        <span class="hljs-comment">//limit:截断</span><br>        Stream&lt;Employee&gt; stream2 = list.stream();<br>        stream2.limit(<span class="hljs-number">5</span>).forEach(System.out::println);<br><br>        System.out.println(<span class="hljs-string">&quot;***************&quot;</span>);<br><br>        <span class="hljs-comment">//distinct:去重</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">7</span>;<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;name&quot;</span>+k, <span class="hljs-number">20</span>+k, <span class="hljs-number">2000</span>+k));<br>        Stream&lt;Employee&gt; stream3 = list.stream();<br>        stream3.distinct().forEach(System.out::println);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>2、<strong>映射</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>map(Function f)</td><td>接受一个函数为参数，该函数作用到每个元素，并将其映射为一个新的元素</td></tr><tr><td>mapToDouble(ToDoubleFunction f)</td><td>接受一个函数为参数，该函数作用到每个元素，并产生一个新的 DoubleStream</td></tr><tr><td>mapToInt(ToIntFunction f)</td><td>接受一个函数为参数，该函数作用到每个元素，并产生一个新的 IntStream</td></tr><tr><td>mapToLong(ToLongFunction f)</td><td>接受一个函数为参数，该函数作用到每个元素，并产生一个新的 LongStream</td></tr><tr><td>flatMap(Function f)</td><td>接受一个函数为参数，将流中每个值转换成另一个流，然后所有流连接成一个流</td></tr></tbody></table></li><li><p>例子</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestStreamDeal</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        List&lt;Employee&gt; list = EmployeeData.getEmp();<br><br>        <span class="hljs-comment">//filter:选择</span><br>        Stream&lt;Employee&gt; stream = list.stream();<br>        <span class="hljs-comment">//查询工资 &gt; 24000的员工</span><br>        stream.filter(employee -&gt; employee.getSalary() &gt; <span class="hljs-number">2005</span>).forEach(System.out::println);<br><br>        System.out.println(<span class="hljs-string">&quot;***************&quot;</span>);<br><br>        <span class="hljs-comment">//limit:截断</span><br>        Stream&lt;Employee&gt; stream2 = list.stream();<br>        stream2.limit(<span class="hljs-number">5</span>).forEach(System.out::println);<br><br>        System.out.println(<span class="hljs-string">&quot;***************&quot;</span>);<br><br>        <span class="hljs-comment">//distinct:去重</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">7</span>;<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;name&quot;</span>+k, <span class="hljs-number">20</span>+k, <span class="hljs-number">2000</span>+k));<br>        Stream&lt;Employee&gt; stream3 = list.stream();<br>        stream3.distinct().forEach(System.out::println);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>        List&lt;String&gt; list = Arrays.asList(<span class="hljs-string">&quot;aa&quot;</span>,<span class="hljs-string">&quot;bb&quot;</span>,<span class="hljs-string">&quot;cc&quot;</span>,<span class="hljs-string">&quot;dd&quot;</span>);<br>        <span class="hljs-comment">//全部大写</span><br>        <span class="hljs-comment">//lambda写法</span><br>        list.stream().map(s -&gt; s.toUpperCase()).forEach(System.out::println);<br>        <span class="hljs-comment">//引用写法</span><br>        list.stream().map(String::toUpperCase).forEach(System.out::println);<br><br>        System.out.println(<span class="hljs-string">&quot;*********************&quot;</span>);<br><br>        <span class="hljs-comment">//练习:获取员工姓名长度大于3的员工的姓名</span><br>        List&lt;Employee&gt; emp = EmployeeData.getEmp();<br><span class="hljs-comment">//        emp.stream().map(employee -&gt; employee.getName()).filter(name -&gt; name.length() &gt; 3).forEach(System.out::println);</span><br>        emp.stream().map(Employee::getName).filter(name -&gt; name.length() &gt; <span class="hljs-number">3</span>).forEach(System.out::println);<br><br>        System.out.println(<span class="hljs-string">&quot;*********************&quot;</span>);<br>        <span class="hljs-comment">//stream中嵌套stream</span><br>        Stream&lt;Stream&lt;Character&gt;&gt; streamStream = list.stream().map(TestStreamDeal::stringToStream);<br>        Stream&lt;Character&gt; characterStream = list.stream().flatMap(TestStreamDeal::stringToStream);<br>        streamStream.forEach(s -&gt; &#123;<br>            s.forEach(System.out::println);<br>        &#125;);<br><br>        characterStream.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-comment">//将字符串的多个字符转换为Stream的实例</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Stream&lt;Character&gt; <span class="hljs-title function_">stringToStream</span><span class="hljs-params">(String str)</span>&#123;<br>        ArrayList&lt;Character&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(Character c : str.toCharArray())&#123;<br>            list.add(c);<br>        &#125;<br>        <span class="hljs-keyword">return</span> list.stream();<br>    &#125;<br><br>    <span class="hljs-comment">//排序</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span>&#123;<br>        List&lt;Integer&gt; list = Arrays.asList(<span class="hljs-number">12</span>,<span class="hljs-number">423</span>,<span class="hljs-number">14</span>,<span class="hljs-number">1</span>,<span class="hljs-number">32</span>,<span class="hljs-number">56</span>,<span class="hljs-number">98</span>,-<span class="hljs-number">1</span>);<br>        list.stream().sorted().forEach(System.out::println);<br><br>        List&lt;Employee&gt; employees = EmployeeData.getEmp();<br>        <span class="hljs-comment">//不能直接这么写，Employee没有实现Comparable接口,需要自己定制</span><br>        <span class="hljs-comment">//employees.stream().sorted().forEach(System.out::println);</span><br>        employees.stream().sorted((a,b) -&gt;&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">ageValue</span> <span class="hljs-operator">=</span> Integer.compare(a.getAge(),b.getAge());<br>            <span class="hljs-keyword">if</span>(ageValue != <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-comment">//从小到大</span><br>                <span class="hljs-keyword">return</span> ageValue;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//从大到小</span><br>                <span class="hljs-keyword">return</span> -Double.compare(a.getSalary(), b.getSalary());<br>            &#125;<br>        &#125;).forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>3、<strong>排序</strong><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>sorted()</td><td>产生一个新流，按自然顺序排序</td></tr><tr><td>sorted(Comparator com)</td><td>产生一个新流，按比较器顺序排序</td></tr></tbody></table></li></ul><h2 id="终止操作"><a href="#终止操作" class="headerlink" title="终止操作"></a>终止操作</h2><p>一旦执行终止操作，就执行中间操作链，并产生结果。之后不会再使用</p><ul><li>1、<strong>匹配查找</strong><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>allMatch(Predicate p)</td><td>检查是否匹配所有元素</td></tr><tr><td>anyMatch(Predicate p)</td><td>检查是否至少匹配一个元素</td></tr><tr><td>nonematch(Predicate p)</td><td>检查是否没有匹配所有元素</td></tr><tr><td>findFirst()</td><td>返回第一个元素</td></tr><tr><td>findAny()</td><td>返回当前流中任意元素</td></tr><tr><td>count()</td><td>返回流中元素总数</td></tr><tr><td>max(Comparator c)</td><td>返回流中最大值</td></tr><tr><td>min(Comparator c)</td><td>返回流中最小值</td></tr><tr><td>forEach(Comparator c)</td><td>内部迭代（使用 Collection 接口需要用户自己迭代，称为外部迭代）</td></tr></tbody></table></li></ul><p><strong>例子</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestStreamEnd</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test5</span><span class="hljs-params">()</span>&#123;<br>        List&lt;Employee&gt; list = EmployeeData.getEmp();<br><br>        <span class="hljs-comment">//是否所有员工年龄都大于24</span><br>        <span class="hljs-comment">//allMatch:检查是否所有匹配</span><br>        System.out.println(list.stream().allMatch(e -&gt; e.getAge() &gt; <span class="hljs-number">24</span>));<br><br>        <span class="hljs-comment">//是否存在员工都工资大于24000</span><br>        <span class="hljs-comment">//anyMatch:检查是否有匹配</span><br>        System.out.println(list.stream().anyMatch(employee -&gt; employee.getSalary() &gt; <span class="hljs-number">24000</span>));<br><br>        <span class="hljs-comment">//是否没有员工姓雷</span><br>        <span class="hljs-comment">//anyMatch:检查是否没有匹配的元素</span><br>        System.out.println(list.stream().noneMatch(e -&gt; e.getName().startsWith(<span class="hljs-string">&quot;雷&quot;</span>)));<br><br>        <span class="hljs-comment">//查找第一个员工</span><br>        <span class="hljs-comment">//findFirst:返回第一个元素</span><br>        System.out.println(list.stream().findFirst());<br>        <span class="hljs-comment">//findAny:返回任意一个</span><br>        System.out.println(list.stream().findAny());<br>        <span class="hljs-comment">//count:返回流中元素总个数</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> list.stream().filter(employee -&gt; employee.getSalary() &gt; <span class="hljs-number">24000</span>).count();<br>        System.out.println(count);<br>        <span class="hljs-comment">//max:流中最大值 | min:流中最小值</span><br>        Stream&lt;Double&gt; doubleStream = list.stream().map(Employee::getSalary);<br>        Optional&lt;Double&gt; max = doubleStream.max(Double::compare);<br>        System.out.println(max);<br>        Optional&lt;Employee&gt; employee = list.stream().min(Comparator.comparingDouble(Employee::getSalary));<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>2、<strong>规约</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>reduce(T iden,BinaryOperator b)</td><td>将流中所有元素反复结合起来，得到一个值返回，类型为 T</td></tr><tr><td>reduce(BinaryOperator b)</td><td>将流中所有元素反复结合起来，得到一个值返回，类型为 Optional</td></tr></tbody></table></li><li><p>备注：map 和 reduce 连接称为 map-reduce 模式，因 Google 用它进行网络搜索而出名</p></li></ul><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Test</span>&#123;</span><br><span class="hljs-class">    @<span class="hljs-type">Test</span></span><br><span class="hljs-class">    public void test2()&#123;</span><br><span class="hljs-class">        <span class="hljs-type">List</span>&lt;<span class="hljs-type">Integer</span>&gt; list = <span class="hljs-type">Arrays</span>.asList(1,2,3,5,7,9,6,7);</span><br><span class="hljs-class">        list.stream().reduce(0 ,<span class="hljs-type">Integer</span>::<span class="hljs-title">sum</span>);</span><br><span class="hljs-class">        <span class="hljs-type">List</span>&lt;<span class="hljs-type">Employee</span>&gt; employees = <span class="hljs-type">EmployeeData</span>.getEmp();</span><br><span class="hljs-class">        //计算工资总和</span><br><span class="hljs-class">        //流式写法</span><br><span class="hljs-class">        <span class="hljs-type">System</span>.out.println(<span class="hljs-title">employees</span>.<span class="hljs-title">stream</span>().map(<span class="hljs-type">Employee</span>::<span class="hljs-title">getSalary</span>).reduce(<span class="hljs-type">Double</span>::<span class="hljs-title">sum</span>));</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>3、<strong>收集</strong><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>collect(Collector c)</td><td>将流转换为其他方式，接受一个 Collector 的实现，用于给 Stream 中元素做汇总的方法</td></tr></tbody></table></li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">class</span> Test&#123;<br>    <span class="hljs-comment">//收集器</span><br>    @Test<br>    public void test4<span class="hljs-literal">()</span>&#123;<br>        List&lt;Employee&gt; employees = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">EmployeeData</span>.</span></span>get<span class="hljs-constructor">Emp()</span>;<br>        <span class="hljs-comment">//找出工资大于24000的返回为list</span><br>        List&lt;Employee&gt; employeeList = employees.stream<span class="hljs-literal">()</span>.filter(e -&gt; e.get<span class="hljs-constructor">Salary()</span> &gt; <span class="hljs-number">24000</span>).collect(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Collectors</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">List()</span>);<br>        Set&lt;Employee&gt; collect = employees.stream<span class="hljs-literal">()</span>.filter(e -&gt; e.get<span class="hljs-constructor">Salary()</span> &gt; <span class="hljs-number">24000</span>).collect(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Collectors</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">Set()</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Optional-类"><a href="#Optional-类" class="headerlink" title="Optional 类"></a>Optional 类</h1><blockquote><p>Optional 类是一个可以为 null 的容器对象。如果值存在则 isPresent()方法会返回 true，调用 get()方法会返回该对象。</p><p>Optional 是个容器：它可以保存类型 T 的值，或者仅仅保存 null。Optional 提供很多有用的方法，这样我们就不用显式进行空值检测。</p><p>Optional 类的引入很好的解决空指针异常。</p></blockquote><h2 id="类声明"><a href="#类声明" class="headerlink" title="类声明"></a>类声明</h2><p>以下是一个 <strong>java.util.Optional</strong> 类的声明：</p><p>public final class Optional<br>extends Object</p><h2 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h2><table><thead><tr><th>序号</th><th>方法 &amp; 描述</th></tr></thead><tbody><tr><td>1</td><td>**static Optional empty()**返回空的 Optional 实例。</td></tr><tr><td>2</td><td>**boolean equals(Object obj)**判断其他对象是否等于 Optional。</td></tr><tr><td>3</td><td>**Optional filter(Predicate predicate)**如果值存在，并且这个值匹配给定的 predicate，返回一个 Optional 用以描述这个值，否则返回一个空的 Optional。</td></tr><tr><td>4</td><td>** Optional flatMap(Function&gt; mapper)**如果值存在，返回基于 Optional 包含的映射方法的值，否则返回一个空的 Optional</td></tr><tr><td>5</td><td>**T get()**如果在这个 Optional 中包含这个值，返回值，否则抛出异常：NoSuchElementException</td></tr><tr><td>6</td><td>**int hashCode()**返回存在值的哈希码，如果值不存在 返回 0。</td></tr><tr><td>7</td><td>**void ifPresent(Consumer consumer)**如果值存在则使用该值调用 consumer , 否则不做任何事情。</td></tr><tr><td>8</td><td>**boolean isPresent()**如果值存在则方法会返回 true，否则返回 false。</td></tr><tr><td>9</td><td>**Optional map(Function mapper)**如果有值，则对其执行调用映射函数得到返回值。如果返回值不为 null，则创建包含映射返回值的 Optional 作为 map 方法返回值，否则返回空 Optional。</td></tr><tr><td>10</td><td>**static Optional of(T value)**返回一个指定非 null 值的 Optional。</td></tr><tr><td>11</td><td>**static Optional ofNullable(T value)**如果为非空，返回 Optional 描述的指定值，否则返回空的 Optional。</td></tr><tr><td>12</td><td>**T orElse(T other)**如果存在该值，返回值， 否则返回 other。</td></tr><tr><td>13</td><td>**T orElseGet(Supplier other)**如果存在该值，返回值， 否则触发 other，并返回 other 调用的结果。</td></tr><tr><td>14</td><td>** T orElseThrow(Supplier exceptionSupplier)**如果存在该值，返回包含的值，否则抛出由 Supplier 继承的异常</td></tr><tr><td>15</td><td>**String toString()**返回一个 Optional 的非空字符串，用来调试</td></tr></tbody></table><p><strong>注意：</strong> 这些方法是从 <strong>java.lang.Object</strong> 类继承来的。</p><hr><h2 id="Optional-实例"><a href="#Optional-实例" class="headerlink" title="Optional 实例"></a>Optional 实例</h2><p>我们可以通过以下实例来更好的了解 Optional 类的使用：</p><h2 id="Tester-java"><a href="#Tester-java" class="headerlink" title="Tester.java"></a>Tester.java</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Java8Tester &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String args[])&#123;<br><br>        Java8Tester java8Tester = <span class="hljs-built_in">new</span> Java8Tester();<br>        <span class="hljs-type">Integer</span> value1 = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-type">Integer</span> value2 = <span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span>(<span class="hljs-number">10</span>);<br><br>// Optional.ofNullable - 允许传递为 <span class="hljs-keyword">null</span> 参数<br>        Optional&lt;<span class="hljs-type">Integer</span>&gt; a = Optional.ofNullable(value1);<br><br>// Optional.<span class="hljs-keyword">of</span> - 如果传递的参数是 <span class="hljs-keyword">null</span>，抛出异常 NullPointerException<br>        Optional&lt;<span class="hljs-type">Integer</span>&gt; b = Optional.<span class="hljs-keyword">of</span>(value2);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(java8Tester.sum(a,b));<br>    &#125;<br><br>    <span class="hljs-built_in">public</span> <span class="hljs-type">Integer</span> sum(Optional&lt;<span class="hljs-type">Integer</span>&gt; a, Optional&lt;<span class="hljs-type">Integer</span>&gt; b)&#123;<br><br>// Optional.isPresent - 判断值是否存在<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;第一个参数值存在: &quot; + a.isPresent());<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;第二个参数值存在: &quot; + b.isPresent());<br><br>// Optional.orElse - 如果值存在，返回它，否则返回默认值<br>        <span class="hljs-type">Integer</span> value1 = a.orElse(<span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span>(<span class="hljs-number">0</span>));<br><br>//Optional.<span class="hljs-keyword">get</span> - 获取值，值需要存在<br>        <span class="hljs-type">Integer</span> value2 = b.<span class="hljs-keyword">get</span>();<br>        <span class="hljs-keyword">return</span> value1 + value2;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="接口默认方法和静态方法"><a href="#接口默认方法和静态方法" class="headerlink" title="接口默认方法和静态方法"></a>接口默认方法和静态方法</h1><h1 id="新日期-API"><a href="#新日期-API" class="headerlink" title="新日期 API"></a>新日期 API</h1><h1 id="其他新特性"><a href="#其他新特性" class="headerlink" title="其他新特性"></a>其他新特性</h1>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ES6</title>
    <link href="/2022/08/13/yuque/ES6/"/>
    <url>/2022/08/13/yuque/ES6/</url>
    
    <content type="html"><![CDATA[<p>ES6 基本知识，不用完全掌握，但要会用</p><span id="more"></span><h1 id="1、let-amp-amp-const"><a href="#1、let-amp-amp-const" class="headerlink" title="1、let &amp;&amp; const"></a>1、let &amp;&amp; const</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><ul><li>const 声明常量必须初始化，初始化之后不允许改变</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = <span class="hljs-number">1</span>;<br>a = <span class="hljs-number">3</span>; <span class="hljs-comment">//Uncaught TypeError: Assignment to constant variable.</span><br></code></pre></td></tr></table></figure><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><ul><li>var：声明的变量可以越狱</li><li>let：声明的变量有严格局部作用域</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">let</span> b = <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// 1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b); <span class="hljs-comment">// ReferenceError: b is not defined</span><br></code></pre></td></tr></table></figure><h2 id="声明次数"><a href="#声明次数" class="headerlink" title="声明次数"></a>声明次数</h2><ul><li>var：可以声明多次</li><li>let：只能声明一次</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> m = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> m = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">let</span> n = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">let</span> n = <span class="hljs-number">4</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(m); <span class="hljs-comment">// 2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(n); <span class="hljs-comment">// Identifier &#x27;n&#x27; has already been declared</span><br></code></pre></td></tr></table></figure><h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><ul><li>var：变量提升</li><li>let：不会变量提升</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x); <span class="hljs-comment">// undefined</span><br><span class="hljs-keyword">var</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(y); <span class="hljs-comment">//ReferenceError: y is not defined</span><br><span class="hljs-keyword">let</span> y = <span class="hljs-number">20</span>;<br></code></pre></td></tr></table></figure><h1 id="2、解构"><a href="#2、解构" class="headerlink" title="2、解构"></a>2、解构</h1><h2 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><br><span class="hljs-comment">//不使用数组解构</span><br><span class="hljs-keyword">let</span> a = arr[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">let</span> b = arr[<span class="hljs-number">1</span>];<br><span class="hljs-keyword">let</span> c = arr[<span class="hljs-number">2</span>];<br><br><span class="hljs-comment">//数组解构写法</span><br><span class="hljs-keyword">let</span> [a, b, c] = arr;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a, b, c);<br></code></pre></td></tr></table></figure><h2 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> person = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;jack&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>  <span class="hljs-attr">language</span>: [<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;js&quot;</span>, <span class="hljs-string">&quot;css&quot;</span>],<br>&#125;;<br><br><span class="hljs-comment">//普通写法</span><br><span class="hljs-keyword">const</span> name = person.<span class="hljs-property">name</span>;<br><span class="hljs-keyword">const</span> age = person.<span class="hljs-property">age</span>;<br><span class="hljs-keyword">const</span> language = person.<span class="hljs-property">language</span>;<br><br><span class="hljs-comment">//对象解构写法</span><br><span class="hljs-keyword">const</span> &#123; name, age, language &#125; = person;<br><br><span class="hljs-comment">//解构后修改变量名name为abc</span><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">name</span>: abc, age, language &#125; = person;<br></code></pre></td></tr></table></figure><h1 id="3、字符串"><a href="#3、字符串" class="headerlink" title="3、字符串"></a>3、字符串</h1><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let str = <span class="hljs-string">&quot;hello.vue&quot;</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str.startsWith(<span class="hljs-string">&quot;hello&quot;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str.endsWith(<span class="hljs-string">&quot;.vue&quot;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str.<span class="hljs-built_in">includes</span>(<span class="hljs-string">&quot;e&quot;</span>));<span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str.<span class="hljs-built_in">includes</span>(<span class="hljs-string">&quot;hello&quot;</span>));<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//1、字符串模板</span><br>let ss = `&lt;div&gt;<br>       &lt;span&gt;hello world&lt;span&gt;<br>                &lt;/div&gt;`;<br>console.log(ss);<br><br><span class="hljs-comment">//2、字符串插入变量和表达式。变量名写在 $&#123;&#125; 中，$&#123;&#125; 中可以放入 JavaScript 表达式。</span><br>function <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span> &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;这是一个函数&quot;</span><br>&#125;<br><br># 使用<br>let info = `我是$&#123;abc&#125;，今年$&#123;age + <span class="hljs-number">10</span>&#125;了, 我想说： $&#123;<span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span>&#125;`;<br>console.log(info);<br></code></pre></td></tr></table></figure><h1 id="4、箭头函数"><a href="#4、箭头函数" class="headerlink" title="4、箭头函数"></a>4、箭头函数</h1><h2 id="函数参数默认值"><a href="#函数参数默认值" class="headerlink" title="函数参数默认值"></a>函数参数默认值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//b的默认值为1</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add2</span>(<span class="hljs-params">a, b = <span class="hljs-number">1</span></span>) &#123;<br>  <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add2</span>(<span class="hljs-number">20</span>));<br></code></pre></td></tr></table></figure><h2 id="不定参数"><a href="#不定参数" class="headerlink" title="不定参数"></a>不定参数</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">function <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(...values)</span></span> &#123;<br>    console.log(values.length)<br>&#125;<br><span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)</span></span>      <span class="hljs-comment">//2</span><br><span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)</span></span>  <span class="hljs-comment">//4</span><br></code></pre></td></tr></table></figure><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><ul><li>以前声明函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">print = <span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj);<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>箭头函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//箭头函数写法</span><br>print = <span class="hljs-function">(<span class="hljs-params">obj</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj);<br></code></pre></td></tr></table></figure><ul><li>this 使用注意</li></ul><p><strong>此处另外单独整理</strong></p><ul><li>注意点</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//多个参数，用()把参数扩起来</span><br>sum = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> a + b;<br>&#125;;<br><br><span class="hljs-comment">//方法体只有一句，且需要返回</span><br>sum = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a + b;<br><br><span class="hljs-comment">//箭头函数和解构一起使用</span><br><span class="hljs-keyword">const</span> person = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;jack&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">14</span>,<br>  <span class="hljs-attr">language</span>: [<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;python&quot;</span>, <span class="hljs-string">&quot;c++&quot;</span>],<br>&#125;;<br><br>hello = <span class="hljs-function">(<span class="hljs-params">&#123; name, language: [a, b] &#125;</span>) =&gt;</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello, &quot;</span> + name + <span class="hljs-string">&quot;, lang: &quot;</span> + a + <span class="hljs-string">&quot;,&quot;</span> + b);<br><br><span class="hljs-title function_">hello</span>(person); <span class="hljs-comment">//hello, jack, lang: java,python</span><br></code></pre></td></tr></table></figure><h1 id="5、对象优化"><a href="#5、对象优化" class="headerlink" title="5、对象优化"></a>5、对象优化</h1><h2 id="新增-API"><a href="#新增-API" class="headerlink" title="新增 API"></a>新增 API</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">const person = &#123;<br>  <span class="hljs-type">name</span>: &quot;jack&quot;,<br>  age: <span class="hljs-number">21</span>,<br>  <span class="hljs-keyword">language</span>: [<span class="hljs-string">&#x27;java&#x27;</span>, <span class="hljs-string">&#x27;js&#x27;</span>, <span class="hljs-string">&#x27;css&#x27;</span>]<br>&#125;<br>//快速获取<br>console.log(<span class="hljs-keyword">Object</span>.keys(person));//[&quot;name&quot;, &quot;age&quot;, &quot;language&quot;]<br>console.log(<span class="hljs-keyword">Object</span>.<span class="hljs-keyword">values</span>(person));//[&quot;jack&quot;, <span class="hljs-number">21</span>, <span class="hljs-keyword">Array</span>(<span class="hljs-number">3</span>)]<br>console.log(<span class="hljs-keyword">Object</span>.entries(person));//[<span class="hljs-keyword">Array</span>(<span class="hljs-number">2</span>), <span class="hljs-keyword">Array</span>(<span class="hljs-number">2</span>), <span class="hljs-keyword">Array</span>(<span class="hljs-number">2</span>)]<br><br><br>const target = &#123; a: <span class="hljs-number">1</span> &#125;;<br>const source1 = &#123; b: <span class="hljs-number">2</span> &#125;;<br>const source2 = &#123; c: <span class="hljs-number">3</span> &#125;;<br>//合并后面的对象到第一个对象<br><span class="hljs-keyword">Object</span>.assign(target, source1, source2);<br>console.log(target);<br></code></pre></td></tr></table></figure><h2 id="声明对象简写"><a href="#声明对象简写" class="headerlink" title="声明对象简写"></a>声明对象简写</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> age = <span class="hljs-number">23</span><br><span class="hljs-keyword">const</span> name = <span class="hljs-string">&quot;张三&quot;</span><br><span class="hljs-comment">//普通写法</span><br><span class="hljs-keyword">const</span> person1 = &#123; <span class="hljs-attr">age</span>: age, <span class="hljs-attr">name</span>: name &#125;<br><br><span class="hljs-comment">//简写</span><br><span class="hljs-keyword">const</span> person2 = &#123; age, name &#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person2);<br><br><span class="hljs-comment">//对象的函数属性简写</span><br><span class="hljs-keyword">let</span> person3 = &#123;<br>   <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;jack&quot;</span>,<br>   <span class="hljs-comment">// 以前：</span><br>   <span class="hljs-attr">eat</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">food</span>) &#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;在吃&quot;</span> + food);<br>   &#125;,<br>   <span class="hljs-comment">//箭头函数this不能使用，对象.属性</span><br>   <span class="hljs-attr">eat2</span>: <span class="hljs-function"><span class="hljs-params">food</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person3.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;在吃&quot;</span> + food),<br>   <span class="hljs-title function_">eat3</span>(<span class="hljs-params">food</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;在吃&quot;</span> + food);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h2><ul><li>1、拷贝对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//取出参数对象所有可遍历属性拷贝进当前对象</span><br><span class="hljs-keyword">let</span> p1 = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Amy&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">15</span> &#125;;<br><span class="hljs-keyword">let</span> someone = &#123; ...p1 &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(someone); <span class="hljs-comment">//&#123;name: &quot;Amy&quot;, age: 15&#125;</span><br></code></pre></td></tr></table></figure><ul><li>2、合并对象</li></ul><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-comment">// 2、合并对象</span><br><span class="hljs-keyword">let</span> age1 = &#123; age: <span class="hljs-number">15</span> &#125;<br><span class="hljs-keyword">let</span> name1 = &#123; name: <span class="hljs-string">&quot;Amy&quot;</span> &#125;<br><span class="hljs-keyword">let</span> p2 = &#123;name:<span class="hljs-string">&quot;zhangsan&quot;</span>&#125;<br>p2 = &#123; <span class="hljs-params">...</span>age1, <span class="hljs-params">...</span>name1 &#125; <br>console.<span class="hljs-keyword">log</span>(p2)<br></code></pre></td></tr></table></figure><h1 id="map-amp-amp-reduce"><a href="#map-amp-amp-reduce" class="headerlink" title="map &amp;&amp; reduce"></a>map &amp;&amp; reduce</h1><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><blockquote><p>接收一个函数，将原数组中的所有元素用这个函数处理后放入新数组返回。</p></blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr = [<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;20&#x27;</span>, <span class="hljs-string">&#x27;-5&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>];<br>arr = arr.<span class="hljs-built_in">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> item*<span class="hljs-number">2</span><br>&#125;);<br>arr = arr.<span class="hljs-built_in">map</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span> item*<span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr); <span class="hljs-comment">//2 40 -10 6</span><br></code></pre></td></tr></table></figure><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><blockquote><p>方法对数组中的每个元素执行一个由我们提供的<strong>reducer</strong>函数(升序执行)，将其结果汇总为单个返回值</p></blockquote><ul><li>1、语法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">arr.<span class="hljs-title function_">reduce</span>(callback, [initialValue]);<br></code></pre></td></tr></table></figure><ul><li>callback 四个参数</li></ul><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs smali">1. previousValue （上一次调用回调返回的值，或者是提供的初始值（initialValue））<br>2. currentValue （数组中当前被处理的元素）<br>3. index （当前元素在数组中的索引）<br>4.<span class="hljs-built_in"> array </span>（调用 reduce 的数组）<br><br>initialValue （作为第一次调用 callback 的第一个参数。）<br></code></pre></td></tr></table></figure><ul><li>例子</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><span class="hljs-keyword">let</span> sum = arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">prev, cur, index, arr</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(prev, cur, index);<br>  <span class="hljs-keyword">return</span> prev + cur;<br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr, sum);<br></code></pre></td></tr></table></figure><ul><li>应用</li><li>记录某个元素在数组中出现了几次</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr5 = [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-string">&quot;long&quot;</span>, <span class="hljs-string">&quot;short&quot;</span>, <span class="hljs-string">&quot;long&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>];<br><br><span class="hljs-keyword">let</span> arrResult1 = arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">pre, cur</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(pre, cur);<br>  <span class="hljs-keyword">if</span> (cur <span class="hljs-keyword">in</span> pre) &#123;<br>    pre[cur]++;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    pre[cur] = <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> pre;<br>&#125;, &#123;&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arrResult1); <span class="hljs-comment">//结果：&#123;name: 3, age: 1, long: 2, short: 1&#125;</span><br></code></pre></td></tr></table></figure><ul><li>数组去重</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arrResult2 = arr5.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">pre, cur</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (!pre.<span class="hljs-title function_">includes</span>(cur)) &#123;<br>    pre.<span class="hljs-title function_">push</span>(cur);<br>  &#125;<br>  <span class="hljs-keyword">return</span> pre;<br>&#125;, []);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arrResult2); <span class="hljs-comment">//结果：[ &#x27;name&#x27;, &#x27;age&#x27;, &#x27;long&#x27;, &#x27;short&#x27; ]</span><br></code></pre></td></tr></table></figure><ul><li>将多维数组转化为一维</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr6 = [<br>  [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>],<br>  [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>  [<span class="hljs-number">4</span>, [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]],<br>];<br><span class="hljs-keyword">const</span> newArr = <span class="hljs-keyword">function</span> (<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">reduce</span>(<br>    <span class="hljs-function">(<span class="hljs-params">pre, cur</span>) =&gt;</span> pre.<span class="hljs-title function_">concat</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(cur) ? <span class="hljs-title function_">newArr</span>(cur) : cur),<br>    []<br>  );<br>&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">newArr</span>(arr)); <span class="hljs-comment">//[0, 1, 2, 3, 4, 5, 6, 7]</span><br></code></pre></td></tr></table></figure><ul><li>对象中的属性求和</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> result = [<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王二&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">10</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot; 李四&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">30</span>,<br>  &#125;,<br>];<br><br><span class="hljs-keyword">var</span> sum = result.<span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">prev, cur</span>) &#123;<br>  <span class="hljs-keyword">return</span> cur.<span class="hljs-property">age</span> + prev;<br>&#125;, <span class="hljs-number">0</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sum); <span class="hljs-comment">//60</span><br></code></pre></td></tr></table></figure><h1 id="6、Promise"><a href="#6、Promise" class="headerlink" title="6、Promise"></a>6、Promise</h1><blockquote><p>异步编程的一种解决方案，其实是一个构造函数，自己身上有 all、reject、resolve 这几个方法，原型上有 then、catch 等方法。</p></blockquote><p>详细见<a href="https://blog.csdn.net/qq_34645412/article/details/81170576">博客</a></p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FglTXbRapwkhHhFMRROwjiLoYg_G.png"></p><h1 id="7、模块化"><a href="#7、模块化" class="headerlink" title="7、模块化"></a>7、模块化</h1><ul><li>基本打包</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">0</span><br>  sum = <span class="hljs-function">(<span class="hljs-params">a,b</span>) =&gt;</span> a+b;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git教程</title>
    <link href="/2022/08/13/yuque/Git%E6%95%99%E7%A8%8B/"/>
    <url>/2022/08/13/yuque/Git%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>没有系统学过，现在系统学学。来自哔哩哔哩<a href="https://www.bilibili.com/video/BV1FE411P7B3?from=search&seid=10629844798370846384">遇见狂神说</a></p><span id="more"></span><p><a href="https://www.bilibili.com/video/BV1FE411P7B3?from=search&seid=10629844798370846384"></a></p><h1 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h1><blockquote><p>一种开发过程中对文件、目录或工程等内容等修改历史，方便查看历史记录，备份一边恢复以前等版本的软件工程技术</p></blockquote><ul><li>实现跨区域多人协同开发</li><li>追踪和记录一个或多个文件的历史记录</li><li>组织和保护源代码和文档</li><li>统计工作量</li><li>并行开发，提高开发效率</li><li>追踪记录整个软件的开发过程</li><li>减轻开发人员的负担，节省水间，降低人为失误</li></ul><h2 id="常见版本控制工具"><a href="#常见版本控制工具" class="headerlink" title="常见版本控制工具"></a>常见版本控制工具</h2><ul><li><strong>Git</strong></li><li><strong>SVN</strong></li><li><strong>CVS</strong></li><li><strong>VSS</strong></li><li><strong>TFS</strong></li><li>Visual Studio Online</li></ul><h2 id="版本控制分类"><a href="#版本控制分类" class="headerlink" title="版本控制分类"></a>版本控制分类</h2><p><strong>本地版本控制</strong></p><p>记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁，适合个人用</p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FoJvKXG6U-4kIDNSRCcud_HaHwqc.png"></p><p><strong>集中版本控制</strong></p><p>所有版本数据存在服务器上，协同开发者从服务器上同步更新或上传。</p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FrOYBRvouRwtBPJ-nT3jIxLuGDqP.png"></p><ul><li>所有版本都在服务器上，用户本地只用以前同步的版本。</li><li>不联网无法看到历史版本，无法切换版本验证问题，不能在不同分支工作。</li><li>所有数据保存在服务器上，有一定安全风险。</li><li>代表产品：SVN、CVS、VSS</li></ul><p><strong>分布式版本控制</strong></p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FjgsvereyNZI_L9htbeU_KYxmQeu.png"></p><ul><li>所有版本信息仓库同步到本地美观用户，可以在本地查看所有版本历史，可以离线在本地提交，只需要在联网是 push 到服务器或其他用户。</li><li>只用有一个用户的设备没有问题就可以恢复所有数据。不会因为服务器损坏或网络问题导致不能工作。</li><li>缺点：增加本地存储空间的占用。</li></ul><h1 id="Git-历史"><a href="#Git-历史" class="headerlink" title="Git 历史"></a>Git 历史</h1><p>同生活中的许多伟大事物一样，Git 诞生于一个极富纷争大举创新的年代。</p><p>Linux 内核开源项目有着为数众多的参与者。 绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上（1991－2002 年间）。 到 2002 年，整个项目组开始启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代码。</p><p>到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了 Linux 内核社区免费使用 BitKeeper 的权力。 这就迫使 Linux 开源社区（特别是 Linux 的缔造者 Linus Torvalds）基于使用 BitKeeper 时的经验教训，开发出自己的版本系统。 他们对新的系统制订了若干目标：</p><ul><li>速度</li><li>简单的设计</li><li>对非线性开发模式的强力支持（允许成千上万个并行开发的分支）</li><li>完全分布式</li><li>有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）</li></ul><p>自诞生于 2005 年以来，Git 日臻成熟完善，在高度易用的同时，仍然保留着初期设定的目标。 它的速度飞快，极其适合管理大项目，有着令人难以置信的非线性分支管理系统（参见 <a href="https://git-scm.com/book/zh/v2/ch00/ch03-git-branching">Git 分支</a>）。</p><h1 id="Git-环境配置"><a href="#Git-环境配置" class="headerlink" title="Git 环境配置"></a>Git 环境配置</h1><h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew install git<br></code></pre></td></tr></table></figure><h2 id="查看配置"><a href="#查看配置" class="headerlink" title="查看配置"></a>查看配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看全部配置</span><br>git config -l<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看系统配置</span><br>git config --system --list<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看当前用户配置</span><br>git config --global --list<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看当前仓库配置</span><br>git config --local --list<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">用户配置文件</span><br>/Users/lqs/.gitconfig<br></code></pre></td></tr></table></figure><h1 id="Git-基本理论"><a href="#Git-基本理论" class="headerlink" title="Git 基本理论"></a>Git 基本理论</h1><h2 id="工作区域"><a href="#工作区域" class="headerlink" title="工作区域"></a>工作区域</h2><blockquote><p>Git 有三个工作区域，<strong>工作目录</strong>(Workding Directory)、<strong>暂存区</strong>(Stage</p><p>)、<strong>资源库</strong>(Repository)，加上远程<strong>Git 仓库</strong>(Remote Directory)可分为四个工作区域</p></blockquote><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fr2JcazE85mOKK5RBrTLjLn9dfgk.png"></p><ul><li><strong>Directory</strong>：使用 Git 管理的一个目录，也就是一个仓库，包含工作空间和 git 管理空间</li><li><strong>WorkSpace</strong>：需要通过 git 进行版本控制的目录和文件，太慢组成了工作空间</li><li><strong>.git</strong>：存放 Git 管理信息的目录，初始化仓库的时候自动创建</li><li><strong>Index&#x2F;Stage</strong>：暂存区，待提交更新区，提交近 repo 之前存放在此处</li><li><strong>Local Repo</strong>：本地仓库，一个存放在本地的版本库，HEAD 会只是当前的开发分支（branch）</li><li><strong>Stash</strong>：隐藏，一个工作状态保存栈，用于保存&#x2F;恢复 WorkSpace 中的临时状态</li></ul><h1 id="Git-项目搭建"><a href="#Git-项目搭建" class="headerlink" title="Git 项目搭建"></a>Git 项目搭建</h1><blockquote><p>创建工作目录与常用指令</p></blockquote><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FnyC2-80KQ4WrWHMS4XIuZxVHtTA.png"></p><h2 id="本地仓库搭建"><a href="#本地仓库搭建" class="headerlink" title="本地仓库搭建"></a>本地仓库搭建</h2><ul><li>1、创建全新仓库，需要用 Git 管理的项目的根目录执行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">在当前目录新旧一个Git代码库</span><br>git init<br></code></pre></td></tr></table></figure><ul><li>本地会多一个.git 文件夹</li></ul><h2 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">克隆一个项目和他的整个代码历史（版本信息）</span><br>git clone [url]<br></code></pre></td></tr></table></figure><h1 id="Git-文件操作"><a href="#Git-文件操作" class="headerlink" title="Git 文件操作"></a>Git 文件操作</h1><h2 id="四种状态"><a href="#四种状态" class="headerlink" title="四种状态"></a>四种状态</h2><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FnSIWUF9Vk6pmd34mhbC-uM7fgtd.png"></p><ul><li><strong>Untracked</strong>:未跟踪，在文件夹种，但是没有加入到 git 库，不参与版本控制，通过<code>git add</code>变为<code>Staged</code></li><li><strong>Unmodify</strong>:文件已经入库，未修改，即版本库种的文件快照内容与文件夹种完全一致，可以被修改变成<code>Modified</code>,使用<code>git remove</code>可以成为<code>Untracked</code>文件</li><li><strong>Modified</strong>:文件已修改，没有进行其他操作。使用<code>git add</code>进入<code>Staged</code>,使用<code>git checkout</code>从库中取出文件，丢弃当前修改，返回<code>Unmodify</code></li><li><strong>Staged</strong>:暂存状态，执行<code>git commit</code> 将修改同步到库中，这时库中的文件和本地文件一致，文件为<code>unmodify</code>状态，执行<code>git reset HEAD filename</code>取消暂存，文件状态为<code>Modified</code></li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 查看文件状态</span><br><br><span class="hljs-comment"># 查看指定文件状态</span><br><span class="hljs-attribute">git</span> status<span class="hljs-meta"> [filename]</span><br><br><span class="hljs-comment"># 查看所有文件状态</span><br><span class="hljs-attribute">git</span> status<br><br><span class="hljs-comment"># 添加所有文件到暂存区</span><br><span class="hljs-attribute">git</span> add .<br><br><span class="hljs-comment"># 提交暂存区的内容到本地仓库</span><br><span class="hljs-attribute">git</span> commit -m<span class="hljs-meta"> [message]</span><br></code></pre></td></tr></table></figure><ul><li>例子</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs gradle">lqs@PolarisiMac  ~<span class="hljs-regexp">/Desktop/</span><span class="hljs-keyword">new</span>  ls<br>lqs@PolarisiMac  ~<span class="hljs-regexp">/Desktop/</span><span class="hljs-keyword">new</span>  touch hello.java<br># 查看所有文件状态<br>lqs@PolarisiMac  ~<span class="hljs-regexp">/Desktop/</span><span class="hljs-keyword">new</span>  git status<br>fatal: not a git repository (or <span class="hljs-keyword">any</span> of the parent directories): .git<br># 新建仓库<br>lqs@PolarisiMac  ~<span class="hljs-regexp">/Desktop/</span><span class="hljs-keyword">new</span>  git init<br>Initialized empty Git repository in <span class="hljs-regexp">/Users/</span>lqs<span class="hljs-regexp">/Desktop/</span><span class="hljs-keyword">new</span><span class="hljs-regexp">/.git/</span><br># 将所有文件添加到暂存区<br>lqs@PolarisiMac  ~<span class="hljs-regexp">/Desktop/</span><span class="hljs-keyword">new</span>  git add .<br>lqs@PolarisiMac  ~<span class="hljs-regexp">/Desktop/</span><span class="hljs-keyword">new</span>  git status<br>On branch master<br><br>No commits yet<br><br>Changes to be committed:<br>  (use <span class="hljs-string">&quot;git rm --cached &lt;file&gt;...&quot;</span> to unstage)<br><span class="hljs-keyword">new</span> <span class="hljs-keyword">file</span>:   hello.java<br><br># 提交<br>lqs@PolarisiMac  ~<span class="hljs-regexp">/Desktop/</span><span class="hljs-keyword">new</span>   git commit -m <span class="hljs-string">&quot;new file hello.java&quot;</span><br>[master (root-commit) d0201ce] <span class="hljs-keyword">new</span> <span class="hljs-keyword">file</span> hello.java<br> <span class="hljs-number">1</span> <span class="hljs-keyword">file</span> changed, <span class="hljs-number">0</span> insertions(+), <span class="hljs-number">0</span> deletions(-)<br> create mode <span class="hljs-number">100644</span> hello.java<br># 已经提交完，working tree已清空<br>lqs@PolarisiMac  ~<span class="hljs-regexp">/Desktop/</span><span class="hljs-keyword">new</span>  git status        ✔  <span class="hljs-number">13</span>:<span class="hljs-number">00</span>:<span class="hljs-number">40</span><br>On branch master<br>nothing to commit, working tree clean<br>lqs@PolarisiMac  ~<span class="hljs-regexp">/Desktop/</span><span class="hljs-keyword">new</span> <br></code></pre></td></tr></table></figure><h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><blockquote><p>主目录下新建.gitignore 文件，将一些文件排除在版本控制之外。包括数据库文件、临时文件、设置文件、node_modules 等</p></blockquote><ul><li>主要规则如下</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#  注释符</span><br>*  通配符，可以使用<br>?  代表一个字符<br>[] 代表可选字符范围<br>!  名称最前面有，表示例外规则，将不被忽略<br><span class="hljs-regexp">/  名称最前面为/</span>，表示要忽略的文件在此目录下，子目录中的文件不忽略<br>/  名称最后面是一个路径分隔符，要忽略的是此目录下的子目录，而非文件<br></code></pre></td></tr></table></figure><ul><li>例子：</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-emphasis">_.txt 忽略所有.txt 结尾的文件</span><br><span class="hljs-emphasis">!lib.txt 但 lib.txt 除外</span><br><span class="hljs-emphasis">/tmp 仅忽略项目根目录下的 TODO 文件，不包含其他沐浴露 tmp</span><br><span class="hljs-emphasis">build/ 忽略 build 目录下所有文件</span><br><span class="hljs-emphasis">doc/_</span>.txt 忽略 doc 下所有 txt 文件例如 doc/lqs.txt 但不包括其子目录下的 txt 如 doc/lqs/lqs.txt<br></code></pre></td></tr></table></figure><h1 id="使用码云"><a href="#使用码云" class="headerlink" title="使用码云"></a>使用码云</h1><ul><li>1、注册登陆码云，完善个人信息</li><li>2、设置本机绑定 SSH 公钥，实现免密登陆</li><li>3、将公钥添加到码云账户</li><li>4、使用码云创建自己的仓库</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fpohyh6TWo5MVL6zeUGIpRZKgV8Z.png"></p><h1 id="IDEA-中使用-Git"><a href="#IDEA-中使用-Git" class="headerlink" title="IDEA 中使用 Git"></a>IDEA 中使用 Git</h1><ul><li>1、新建项目，绑定 git</li></ul><p>将空仓库从远程 clone 下来，直接在项目文件夹中新建项目</p><ul><li>2、已设置打开项目自动 add，即执行<code>git add .</code>只需要选中文件执行<code>commit</code></li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FgmMgItQxz5JttYbZixt-Iq0Jybm.png"></p><ul><li>工作中：message 中一般写修改的文件有哪些</li><li>3、提交</li><li>使用右上角的 push 快捷键 or 项目根目录下执行<code>git push</code>均可</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FiIQ6nM95uNPVxtLu20ajrYila0P.png"></p><ul><li>在 Gitee 中可以看到新提交</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FqvpgZyx-7VznB0wUL2dIfT1NA-A.png"></p><ul><li>以上均为单独开发需要用的，多人协同开发时需要使用 Git 分支</li></ul><h1 id="Git-分支"><a href="#Git-分支" class="headerlink" title="Git 分支"></a>Git 分支</h1><p>几乎每一种版本控制系统都以某种形式支持分支。使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。</p><p>有人把 Git 的分支模型称为<strong>必杀技特性</strong>，而正是因为它，将 <strong>Git</strong> 从版本控制系统家族里区分出来。</p><p>创建分支命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">git <span class="hljs-title function_">branch</span> <span class="hljs-params">(branchname)</span><br></code></pre></td></tr></table></figure><p>切换分支命令:</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">git checkout <span class="hljs-comment">(branchname)</span><br></code></pre></td></tr></table></figure><p>当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。</p><p>合并分支命令:</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">git <span class="hljs-keyword">merge</span><br></code></pre></td></tr></table></figure><p>你可以多次合并到统一分支， 也可以选择在合并之后直接删除被并入的分支。</p><p>开始前我们先创建一个测试目录：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs maxima">$ <span class="hljs-built_in">mkdir</span> gitdemo<br>$ cd gitdemo/<br>$ git init<br>Initialized empty Git repository...<br>$ touch README<br>$ git add README<br>$ git commit -m &#x27;第一次版本提交&#x27;<br>[master (root-commit) <span class="hljs-number">3b58100</span>] 第一次版本提交<br> <span class="hljs-number">1</span> file changed, <span class="hljs-number">0</span> insertions(+), <span class="hljs-number">0</span> deletions(-)<br> create mode <span class="hljs-number">100644</span> README<br></code></pre></td></tr></table></figure><h2 id="列出分支"><a href="#列出分支" class="headerlink" title="列出分支"></a>列出分支</h2><p>列出分支基本命令：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch</span><br></code></pre></td></tr></table></figure><p>没有参数时，<strong>git branch</strong> 会列出你在本地的分支。</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span> git branch<br><span class="hljs-comment">* master</span><br></code></pre></td></tr></table></figure><p>此例的意思就是，我们有一个叫做 <strong>master</strong> 的分支，并且该分支是当前分支。</p><p>当你执行 <strong>git init</strong> 的时候，默认情况下 Git 就会为你创建 <strong>master</strong> 分支。</p><p>如果我们要手动创建一个分支。执行 git branch (branchname) 即可。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">$ git branch testing<br>$ git branch<br>* <span class="hljs-keyword">master</span><br>  <span class="hljs-title">testing</span><br></code></pre></td></tr></table></figure><p>现在我们可以看到，有了一个新分支 <strong>testing</strong>。</p><p>当你以此方式在上次提交更新之后创建了新分支，如果后来又有更新提交， 然后又切换到了 <strong>testing</strong> 分支，Git 将还原你的工作目录到你创建分支时候的样子。</p><p>接下来我们将演示如何切换分支，我们用 git checkout (branch) 切换到我们要修改的分支。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">ls</span><br>README<br><span class="hljs-variable">$</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;runoob.com&#x27;</span> &gt; test.txt<br><span class="hljs-variable">$</span> git add .<br><span class="hljs-variable">$</span> git commit <span class="hljs-literal">-m</span> <span class="hljs-string">&#x27;add test.txt&#x27;</span><br>[<span class="hljs-type">master</span> <span class="hljs-number">3</span><span class="hljs-type">e92c19</span>] add test.txt<br> <span class="hljs-number">1</span> file changed, <span class="hljs-number">1</span> insertion(+)<br> create mode <span class="hljs-number">100644</span> test.txt<br><span class="hljs-variable">$</span> <span class="hljs-built_in">ls</span><br>README        test.txt<br><span class="hljs-variable">$</span> git checkout testing<br>Switched to branch <span class="hljs-string">&#x27;testing&#x27;</span><br><span class="hljs-variable">$</span> <span class="hljs-built_in">ls</span><br>README<br></code></pre></td></tr></table></figure><p>当我们切换到 <strong>testing</strong> 分支的时候，我们添加的新文件 test.txt 被移除了。切换回 <strong>master</strong> 分支的时候，它们有重新出现了。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">$ git checkout <span class="hljs-keyword">master</span><br><span class="hljs-title">Switched</span> to branch &#x27;<span class="hljs-literal">master</span>&#x27;<br>$ ls<br>README        test.txt<br></code></pre></td></tr></table></figure><p>我们也可以使用 git checkout -b (branchname) 命令来创建新分支并立即切换到该分支下，从而在该分支中操作。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> git checkout <span class="hljs-literal">-b</span> newtest<br>Switched to a new branch <span class="hljs-string">&#x27;newtest&#x27;</span><br><span class="hljs-variable">$</span> git <span class="hljs-built_in">rm</span> test.txt<br><span class="hljs-built_in">rm</span> <span class="hljs-string">&#x27;test.txt&#x27;</span><br><span class="hljs-variable">$</span> <span class="hljs-built_in">ls</span><br>README<br><span class="hljs-variable">$</span> touch runoob.php<br><span class="hljs-variable">$</span> git add .<br><span class="hljs-variable">$</span> git commit <span class="hljs-literal">-am</span> <span class="hljs-string">&#x27;removed test.txt、add runoob.php&#x27;</span><br>[<span class="hljs-type">newtest</span> <span class="hljs-type">c1501a2</span>] removed test.txt、add runoob.php<br> <span class="hljs-number">2</span> files changed, <span class="hljs-number">1</span> deletion(-)<br> create mode <span class="hljs-number">100644</span> runoob.php<br> delete mode <span class="hljs-number">100644</span> test.txt<br><span class="hljs-variable">$</span> <span class="hljs-built_in">ls</span><br>README        runoob.php<br><span class="hljs-variable">$</span> git checkout master<br>Switched to branch <span class="hljs-string">&#x27;master&#x27;</span><br><span class="hljs-variable">$</span> <span class="hljs-built_in">ls</span><br>README        test.txt<br></code></pre></td></tr></table></figure><p>如你所见，我们创建了一个分支，在该分支的上移除了一些文件 test.txt，并添加了 runoob.php 文件，然后切换回我们的主分支，删除的 test.txt 文件又回来了，且新增加的 runoob.php 不存在主分支中。</p><p>使用分支将工作切分开来，从而让我们能够在不同开发环境中做事，并来回切换。</p><h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><p>删除分支命令：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">git branch -d (<span class="hljs-name">branchname</span>)<br></code></pre></td></tr></table></figure><p>例如我们要删除 testing 分支：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span> git branch<br><span class="hljs-comment">* master</span><br>  testing<br><span class="hljs-symbol">$</span> git branch -d testing<br>Deleted branch testing (was <span class="hljs-number">85</span>fc7e7).<br><span class="hljs-symbol">$</span> git branch<br><span class="hljs-comment">* master</span><br></code></pre></td></tr></table></figure><h2 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h2><p>一旦某分支有了独立内容，你终究会希望将它合并回到你的主分支。 你可以使用以下命令将任何分支合并到当前分支中去：</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">git <span class="hljs-keyword">merge</span><br></code></pre></td></tr></table></figure><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span> git branch<br><span class="hljs-comment">* master</span><br>  newtest<br><span class="hljs-symbol">$</span> ls<br>README        test.txt<br><span class="hljs-symbol">$</span> git merge newtest<br><span class="hljs-function"><span class="hljs-title">Updating</span></span> <span class="hljs-number">3e92</span>c19..c1501a2<br>Fast-forward<br> runoob.php | <span class="hljs-number">0</span><br> test.txt   | <span class="hljs-number">1</span> -<br> <span class="hljs-number">2</span> <span class="hljs-keyword">files</span> changed, <span class="hljs-number">1</span> deletion(-)<br> create mode <span class="hljs-number">100644</span> runoob.php<br> delete mode <span class="hljs-number">100644</span> test.txt<br><span class="hljs-symbol">$</span> ls<br>README        runoob.php<br></code></pre></td></tr></table></figure><p>以上实例中我们将 newtest 分支合并到主分支去，test.txt 文件被删除。</p><p>合并完后就可以删除分支:</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haxe">$ git branch -d <span class="hljs-keyword">new</span><span class="hljs-type">test</span><br>Deleted branch <span class="hljs-keyword">new</span><span class="hljs-type">test</span> (was c1501a2).<br></code></pre></td></tr></table></figure><p>删除后， 就只剩下 master 分支了：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span> git branch<br><span class="hljs-comment">* master</span><br></code></pre></td></tr></table></figure><h2 id="合并冲突"><a href="#合并冲突" class="headerlink" title="合并冲突"></a>合并冲突</h2><p>合并并不仅仅是简单的文件添加、移除的操作，Git 也会合并修改。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">$ git branch<br>* <span class="hljs-keyword">master</span><br><span class="hljs-title">$</span> cat runoob.php<br></code></pre></td></tr></table></figure><p>首先，我们创建一个叫做 change_site 的分支，切换过去，我们将 runoob.php 内容改为:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;runoob&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>创建 change_site 分支：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php">$ git checkout -b change_site<br>Switched to a <span class="hljs-keyword">new</span> branch <span class="hljs-string">&#x27;change_site&#x27;</span><br>$ vim runoob.php<br>$ head -<span class="hljs-number">3</span> runoob.php<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;runoob&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br>$ git commit -am <span class="hljs-string">&#x27;changed the runoob.php&#x27;</span><br>[change_site <span class="hljs-number">7774248</span>] changed the runoob.php<br> <span class="hljs-number">1</span> file changed, <span class="hljs-number">3</span> <span class="hljs-title function_ invoke__">insertions</span>(+)<br></code></pre></td></tr></table></figure><p>将修改的内容提交到 change_site 分支中。 现在，假如切换回 master 分支我们可以看内容恢复到我们修改前的(空文件，没有代码)，我们再次修改 runoob.php 文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php">$ git checkout master<br>Switched to branch <span class="hljs-string">&#x27;master&#x27;</span><br>$ cat runoob.php<br>$ vim runoob.php    <span class="hljs-comment"># 修改内容如下</span><br>$ cat runoob.php<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-number">1</span>;<br><span class="hljs-meta">?&gt;</span><br>$ git diff<br>diff --git a/runoob.php b/runoob.php<br>index e69de29..ac60739 <span class="hljs-number">100644</span><br>--- a/runoob.php<br>+++ b/runoob.php<br>@@ -<span class="hljs-number">0</span>,<span class="hljs-number">0</span> +<span class="hljs-number">1</span>,<span class="hljs-number">3</span> @@<br>+<span class="hljs-meta">&lt;?php</span><br>+<span class="hljs-keyword">echo</span> <span class="hljs-number">1</span>;<br>+<span class="hljs-meta">?&gt;</span><br>$ git commit -am <span class="hljs-string">&#x27;修改代码&#x27;</span><br>[master c68142b] 修改代码<br> <span class="hljs-number">1</span> file changed, <span class="hljs-number">3</span> <span class="hljs-title function_ invoke__">insertions</span>(+)<br></code></pre></td></tr></table></figure><p>现在这些改变已经记录到我的 “master” 分支了。接下来我们将 “change_site” 分支合并过来。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ git merge change_site<br>Auto-merging runoob.php<br><span class="hljs-keyword">CONFLICT</span> (content): Merge <span class="hljs-keyword">conflict</span> <span class="hljs-keyword">in</span> runoob.php<br>Automatic merge failed; fix conflicts <span class="hljs-keyword">and</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">commit</span> the result.<br><br>$ cat runoob.php     # 代开文件，看到冲突内容<br>&lt;?php<br>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD<br>echo <span class="hljs-number">1</span>;<br>=======<br>echo <span class="hljs-string">&#x27;runoob&#x27;</span>;<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; change_site<br>?&gt;<br></code></pre></td></tr></table></figure><p>我们将前一个分支合并到 master 分支，一个合并冲突就出现了，接下来我们需要手动去修改它。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php">$ vim runoob.php<br>$ cat runoob.php<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;runoob&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br>$ git diff<br>diff --cc runoob.php<br>index ac60739,b63d7d7.<span class="hljs-number">.0000000</span><br>--- a/runoob.php<br>+++ b/runoob.php<br>@@@ -<span class="hljs-number">1</span>,<span class="hljs-number">3</span> -<span class="hljs-number">1</span>,<span class="hljs-number">3</span> +<span class="hljs-number">1</span>,<span class="hljs-number">4</span> @@@<br>  <span class="hljs-meta">&lt;?php</span><br> +<span class="hljs-keyword">echo</span> <span class="hljs-number">1</span>;<br>+ <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;runoob&#x27;</span>;<br>  <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>在 Git 中，我们可以用 git add 要告诉 Git 文件冲突已经解决</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>git status -s<br><span class="hljs-title class_">UU</span> runoob.php<br><span class="hljs-variable">$ </span>git add runoob.php<br><span class="hljs-variable">$ </span>git status -s<br>M  runoob.php<br><span class="hljs-variable">$ </span>git commit<br>[master <span class="hljs-number">88</span>afe0e] <span class="hljs-title class_">Merge</span> branch <span class="hljs-string">&#x27;change_site&#x27;</span><br></code></pre></td></tr></table></figure><p>现在我们成功解决了合并中的冲突，并提交了结果。</p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>分布式系统唯一ID生成方案汇总</title>
    <link href="/2022/08/13/yuque/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%94%AF%E4%B8%80ID%E7%94%9F%E6%88%90%E6%96%B9%E6%A1%88%E6%B1%87%E6%80%BB/"/>
    <url>/2022/08/13/yuque/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%94%AF%E4%B8%80ID%E7%94%9F%E6%88%90%E6%96%B9%E6%A1%88%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<p>系统唯一 ID 是我们在设计一个系统的时候常常会遇见的问题，也常常为这个问题而纠结。生成 ID 的方法有很多，适应不同的场景、需求以及性能要求。所以有些比较复杂的系统会有多个 ID 生成的策略。下面就介绍一些常见的 ID 生成策略。转载自<a href="https://www.cnblogs.com/haoxinyue/p/5208136.html">nick’s blog</a></p><span id="more"></span><p><a href="https://www.cnblogs.com/haoxinyue/p/5208136.html"></a></p><h1 id="1-数据库自增长序列或字段"><a href="#1-数据库自增长序列或字段" class="headerlink" title="1. 数据库自增长序列或字段"></a>1. 数据库自增长序列或字段</h1><blockquote><p>最常见的方式。利用数据库，全数据库唯一。</p></blockquote><ol><li>优点：</li></ol><ul><li>简单，代码方便，性能可以接受。</li><li>数字 ID 天然排序，对分页或者需要排序的结果很有帮助。</li></ul><ol start="2"><li>缺点</li></ol><ul><li>不同数据库语法和实现不同，数据库迁移的时候或多数据库版本支持的时候需要处理。</li><li>在单个数据库或读写分离或一主多从的情况下，只有一个主库可以生成。有单点故障的风险。</li><li>在性能达不到要求的情况下，比较难于扩展。</li><li>如果遇见多个系统需要合并或者涉及到数据迁移会相当痛苦。</li><li>分表分库的时候会有麻烦。</li></ul><ol start="3"><li>优化方案：</li></ol><ul><li>针对主库单点，如果有多个 Master 库，则每个 Master 库设置的起始数字不一样，步长一样，可以是 Master 的个数。比如：Master1 生成的是 1，4，7，10，Master2 生成的是 2,5,8,11 Master3 生成的是 3,6,9,12。这样就可以有效生成集群中的唯一 ID，也可以大大降低 ID 生成数据库操作的负载。</li></ul><h1 id="2-UUID"><a href="#2-UUID" class="headerlink" title="2. UUID"></a>2. UUID</h1><blockquote><p>常见的方式。可以利用数据库也可以利用程序生成，一般来说全球唯一。</p></blockquote><ol><li>优点：</li></ol><ul><li>简单，代码方便。</li><li>生成 ID 性能非常好，基本不会有性能问题。</li><li>全球唯一，在遇见数据迁移，系统数据合并，或者数据库变更等情况下，可以从容应对。</li></ul><ol start="2"><li>缺点：</li></ol><ul><li>没有排序，无法保证趋势递增。</li><li>UUID 往往是使用字符串存储，查询的效率比较低。</li><li>存储空间比较大，如果是海量数据库，就需要考虑存储量的问题。</li><li>传输数据量大</li><li>不可读。</li></ul><h1 id="3-UUID-的变种"><a href="#3-UUID-的变种" class="headerlink" title="3. UUID 的变种"></a>3. UUID 的变种</h1><ol><li>为了解决 UUID 不可读，可以使用 UUID to Int64 的方法。及</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/// &lt;summary&gt;</span><br><span class="hljs-comment">/// 根据GUID获取唯一数字序列</span><br><span class="hljs-comment">/// &lt;/summary&gt;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">GuidToInt64</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">byte</span>[] bytes = Guid.NewGuid().ToByteArray();<br>    <span class="hljs-keyword">return</span> BitConverter.ToInt64(bytes, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>为了解决 UUID 无序的问题，NHibernate 在其主键生成方式中提供了 Comb 算法（combined guid&#x2F;timestamp）。保留 GUID 的 10 个字节，用另 6 个字节表示 GUID 生成的时间（DateTime）。</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">/// &lt;summary&gt;</span><br><span class="hljs-comment">/// Generate a new &lt;see cref=&quot;Guid&quot;/&gt; using the comb algorithm.</span><br><span class="hljs-comment">/// &lt;/summary&gt;</span><br>private <span class="hljs-built_in">Guid</span> GenerateComb()<br>&#123;<br>    byte[] guidArray = <span class="hljs-built_in">Guid</span>.NewGuid().ToByteArray();<br><br>    DateTime baseDate = <span class="hljs-keyword">new</span> DateTime(<span class="hljs-number">1900</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    DateTime <span class="hljs-built_in">now</span> = DateTime.<span class="hljs-built_in">Now</span>;<br><br>    <span class="hljs-comment">// Get the days and milliseconds which will be used to build</span><br>    <span class="hljs-comment">//the byte string</span><br>    TimeSpan days = <span class="hljs-keyword">new</span> TimeSpan(<span class="hljs-built_in">now</span>.Ticks - baseDate.Ticks);<br>    TimeSpan msecs = <span class="hljs-built_in">now</span>.TimeOfDay;<br><br>    <span class="hljs-comment">// Convert to a byte array</span><br>    <span class="hljs-comment">// Note that SQL Server is accurate to 1/300th of a</span><br>    <span class="hljs-comment">// millisecond so we divide by 3.333333</span><br>    byte[] daysArray = BitConverter.GetBytes(days.Days);<br>    byte[] msecsArray = BitConverter.GetBytes((long)<br>      (msecs.TotalMilliseconds / <span class="hljs-number">3.333333</span>));<br><br>    <span class="hljs-comment">// Reverse the bytes to match SQL Servers ordering</span><br>    <span class="hljs-built_in">Array</span>.<span class="hljs-built_in">Reverse</span>(daysArray);<br>    <span class="hljs-built_in">Array</span>.<span class="hljs-built_in">Reverse</span>(msecsArray);<br><br>    <span class="hljs-comment">// Copy the bytes into the guid</span><br>    <span class="hljs-built_in">Array</span>.Copy(daysArray, daysArray.<span class="hljs-built_in">Length</span> - <span class="hljs-number">2</span>, guidArray,<br>      guidArray.<span class="hljs-built_in">Length</span> - <span class="hljs-number">6</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">Array</span>.Copy(msecsArray, msecsArray.<span class="hljs-built_in">Length</span> - <span class="hljs-number">4</span>, guidArray,<br>      guidArray.<span class="hljs-built_in">Length</span> - <span class="hljs-number">4</span>, <span class="hljs-number">4</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Guid</span>(guidArray);<br>&#125;<br></code></pre></td></tr></table></figure><p>用上面的算法测试一下，得到如下的结果：作为比较，前面 3 个是使用 COMB 算法得出的结果，最后 12 个字符串是时间序（统一毫秒生成的 3 个 UUID），过段时间如果再次生成，则 12 个字符串会比图示的要大。后面 3 个是直接生成的 GUID。</p><p>如果想把时间序放在前面，可以生成后改变 12 个字符串的位置，也可以修改算法类的最后两个 Array.Copy。</p><p><strong>4. Redis 生成 ID</strong></p><p>当使用数据库来生成 ID 性能不够要求的时候，我们可以尝试使用 Redis 来生成 ID。这主要依赖于 Redis 是单线程的，所以也可以用生成全局唯一的 ID。可以用 Redis 的原子操作 INCR 和 INCRBY 来实现。</p><p>可以使用 Redis 集群来获取更高的吞吐量。假如一个集群中有 5 台 Redis。可以初始化每台 Redis 的值分别是 1,2,3,4,5，然后步长都是 5。各个 Redis 生成的 ID 为：</p><p>A：1,6,11,16,21</p><p>B：2,7,12,17,22</p><p>C：3,8,13,18,23</p><p>D：4,9,14,19,24</p><p>E：5,10,15,20,25</p><p>这个，随便负载到哪个机确定好，未来很难做修改。但是 3-5 台服务器基本能够满足器上，都可以获得不同的 ID。但是步长和初始值一定需要事先需要了。使用 Redis 集群也可以方式单点故障的问题。</p><p>另外，比较适合使用 Redis 来生成每天从 0 开始的流水号。比如订单号&#x3D;日期+当日自增长号。可以每天在 Redis 中生成一个 Key，使用 INCR 进行累加。</p><p>优点：</p><ol><li>不依赖于数据库，灵活方便，且性能优于数据库。</li><li>数字 ID 天然排序，对分页或者需要排序的结果很有帮助。</li></ol><p>缺点：</p><ol><li>如果系统中没有 Redis，还需要引入新的组件，增加系统复杂度。</li><li>需要编码和配置的工作量比较大。</li></ol><p><strong>5. Twitter 的 snowflake 算法</strong></p><p>snowflake 是 Twitter 开源的分布式 ID 生成算法，结果是一个 long 型的 ID。其核心思想是：使用 41bit 作为毫秒数，10bit 作为机器的 ID（5 个 bit 是数据中心，5 个 bit 的机器 ID），12bit 作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是 0。具体实现的代码可以参看<a href="https://github.com/twitter/snowflake">https://github.com/twitter/snowflake</a>。</p><p>C#代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/// &lt;summary&gt;</span><br>    <span class="hljs-comment">/// From: https://github.com/twitter/snowflake</span><br>    <span class="hljs-comment">/// An object that generates IDs.</span><br>    <span class="hljs-comment">/// This is broken into a separate class in case</span><br>    <span class="hljs-comment">/// we ever want to support multiple worker threads</span><br>    <span class="hljs-comment">/// per process</span><br>    <span class="hljs-comment">/// &lt;/summary&gt;</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IdWorker</span><br>    &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> workerId;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> datacenterId;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-variable">sequence</span> <span class="hljs-operator">=</span> <span class="hljs-number">0L</span>;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-variable">twepoch</span> <span class="hljs-operator">=</span> <span class="hljs-number">1288834974657L</span>;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-variable">workerIdBits</span> <span class="hljs-operator">=</span> <span class="hljs-number">5L</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-variable">datacenterIdBits</span> <span class="hljs-operator">=</span> <span class="hljs-number">5L</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-variable">maxWorkerId</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; (<span class="hljs-type">int</span>)workerIdBits);<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-variable">maxDatacenterId</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; (<span class="hljs-type">int</span>)datacenterIdBits);<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-variable">sequenceBits</span> <span class="hljs-operator">=</span> <span class="hljs-number">12L</span>;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-variable">workerIdShift</span> <span class="hljs-operator">=</span> sequenceBits;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-variable">datacenterIdShift</span> <span class="hljs-operator">=</span> sequenceBits + workerIdBits;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-variable">timestampLeftShift</span> <span class="hljs-operator">=</span> sequenceBits + workerIdBits + datacenterIdBits;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-variable">sequenceMask</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; (<span class="hljs-type">int</span>)sequenceBits);<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-variable">lastTimestamp</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1L</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">object</span> <span class="hljs-variable">syncRoot</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">object</span>();<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">IdWorker</span><span class="hljs-params">(<span class="hljs-type">long</span> workerId, <span class="hljs-type">long</span> datacenterId)</span><br>        &#123;<br><br>            <span class="hljs-comment">// sanity check for workerId</span><br>            <span class="hljs-keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArgumentException</span>(string.Format(<span class="hljs-string">&quot;worker Id can&#x27;t be greater than %d or less than 0&quot;</span>, maxWorkerId));<br>            &#125;<br>            <span class="hljs-keyword">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArgumentException</span>(string.Format(<span class="hljs-string">&quot;datacenter Id can&#x27;t be greater than %d or less than 0&quot;</span>, maxDatacenterId));<br>            &#125;<br>            <span class="hljs-built_in">this</span>.workerId = workerId;<br>            <span class="hljs-built_in">this</span>.datacenterId = datacenterId;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">nextId</span><span class="hljs-params">()</span><br>        &#123;<br>            lock (syncRoot)<br>            &#123;<br>                <span class="hljs-type">long</span> <span class="hljs-variable">timestamp</span> <span class="hljs-operator">=</span> timeGen();<br><br>                <span class="hljs-keyword">if</span> (timestamp &lt; lastTimestamp)<br>                &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationException</span>(string.Format(<span class="hljs-string">&quot;Clock moved backwards.  Refusing to generate id for %d milliseconds&quot;</span>, lastTimestamp - timestamp));<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (lastTimestamp == timestamp)<br>                &#123;<br>                    sequence = (sequence + <span class="hljs-number">1</span>) &amp; sequenceMask;<br>                    <span class="hljs-keyword">if</span> (sequence == <span class="hljs-number">0</span>)<br>                    &#123;<br>                        timestamp = tilNextMillis(lastTimestamp);<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    sequence = <span class="hljs-number">0L</span>;<br>                &#125;<br><br>                lastTimestamp = timestamp;<br><br>                <span class="hljs-keyword">return</span> ((timestamp - twepoch) &lt;&lt; (<span class="hljs-type">int</span>)timestampLeftShift) | (datacenterId &lt;&lt; (<span class="hljs-type">int</span>)datacenterIdShift) | (workerId &lt;&lt; (<span class="hljs-type">int</span>)workerIdShift) | sequence;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">protected</span> <span class="hljs-type">long</span> <span class="hljs-title function_">tilNextMillis</span><span class="hljs-params">(<span class="hljs-type">long</span> lastTimestamp)</span><br>        &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">timestamp</span> <span class="hljs-operator">=</span> timeGen();<br>            <span class="hljs-keyword">while</span> (timestamp &lt;= lastTimestamp)<br>            &#123;<br>                timestamp = timeGen();<br>            &#125;<br>            <span class="hljs-keyword">return</span> timestamp;<br>        &#125;<br><br>        <span class="hljs-keyword">protected</span> <span class="hljs-type">long</span> <span class="hljs-title function_">timeGen</span><span class="hljs-params">()</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-type">long</span>)(DateTime.UtcNow - <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>(<span class="hljs-number">1970</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, DateTimeKind.Utc)).TotalMilliseconds;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>测试代码如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">private</span> static void <span class="hljs-constructor">TestIdWorker()</span><br>        &#123;<br>            HashSet&lt;long&gt; set = <span class="hljs-keyword">new</span> HashSet&lt;long&gt;<span class="hljs-literal">()</span>;<br>            IdWorker idWorker1 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">IdWorker(0, 0)</span>;<br>            IdWorker idWorker2 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">IdWorker(1, 0)</span>;<br>            Thread t1 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(()</span> =&gt; <span class="hljs-constructor">DoTestIdWoker(<span class="hljs-params">idWorker1</span>, <span class="hljs-params">set</span>)</span>);<br>            Thread t2 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(()</span> =&gt; <span class="hljs-constructor">DoTestIdWoker(<span class="hljs-params">idWorker2</span>, <span class="hljs-params">set</span>)</span>);<br>            t1.IsBackground = <span class="hljs-literal">true</span>;<br>            t2.IsBackground = <span class="hljs-literal">true</span>;<br><br>            t1.<span class="hljs-constructor">Start()</span>;<br>            t2.<span class="hljs-constructor">Start()</span>;<br>            <span class="hljs-keyword">try</span><br>            &#123;<br>                Thread.<span class="hljs-constructor">Sleep(30000)</span>;<br>                t1.<span class="hljs-constructor">Abort()</span>;<br>                t2.<span class="hljs-constructor">Abort()</span>;<br>            &#125;<br>            catch (Exception e)<br>            &#123;<br>            &#125;<br><br>            Console.<span class="hljs-constructor">WriteLine(<span class="hljs-string">&quot;done&quot;</span>)</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">private</span> static void <span class="hljs-constructor">DoTestIdWoker(IdWorker <span class="hljs-params">idWorker</span>, HashSet&lt;<span class="hljs-params">long</span>&gt; <span class="hljs-params">set</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>            &#123;<br>                long id = idWorker.next<span class="hljs-constructor">Id()</span>;<br>                <span class="hljs-keyword">if</span> (!set.<span class="hljs-constructor">Add(<span class="hljs-params">id</span>)</span>)<br>                &#123;<br>                    Console.<span class="hljs-constructor">WriteLine(<span class="hljs-string">&quot;duplicate:&quot;</span> + <span class="hljs-params">id</span>)</span>;<br>                &#125;<br><br>                Thread.<span class="hljs-constructor">Sleep(1)</span>;<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p>snowflake 算法可以根据自身项目的需要进行一定的修改。比如估算未来的数据中心个数，每个数据中心的机器数以及统一毫秒可以能的并发数来调整在算法中所需要的 bit 数。</p><p>优点：</p><ol><li>不依赖于数据库，灵活方便，且性能优于数据库。</li><li>ID 按照时间在单机上是递增的。</li></ol><p>缺点：</p><ol><li>在单机上是递增的，但是由于涉及到分布式环境，每台机器上的时钟不可能完全同步，也许有时候也会出现不是全局递增的情况。</li></ol><p><strong>6. 利用 zookeeper 生成唯一 ID</strong></p><p>其格式如下：</p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FiVwqDYWoHqA2ptzXEjx8iS12I47.PNG"></p><p>前 4 个字节是从标准纪元开始的时间戳，单位为秒。时间戳，与随后的 5 个字节组合起来，提供了秒级别的唯一性。由于时间戳在前，这意味着 ObjectId 大致会按照插入的顺序排列。这对于某些方面很有用，如将其作为索引提高效率。这 4 个字节也隐含了文档创建的时间。绝大多数客户端类库都会公开一个方法从 ObjectId 获取这个信息。<br>接下来的 3 字节是所在主机的唯一标识符。通常是机器主机名的散列值。这样就可以确保不同主机生成不同的 ObjectId，不产生冲突。<br>为了确保在同一台机器上并发的多个进程产生的 ObjectId 是唯一的，接下来的两字节来自产生 ObjectId 的进程标识符（PID）。<br>前 9 字节保证了同一秒钟不同机器不同进程产生的 ObjectId 是唯一的。后 3 字节就是一个自动增加的计数器，确保相同进程同一秒产生的 ObjectId 也是不一样的。同一秒钟最多允许每个进程拥有 2563（16 777 216）个不同的 ObjectId。</p><p>实现的源码可以到 MongoDB 官方网站下载。</p>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker搭建Nacos集群</title>
    <link href="/2022/08/13/yuque/Docker%E6%90%AD%E5%BB%BANacos%E9%9B%86%E7%BE%A4/"/>
    <url>/2022/08/13/yuque/Docker%E6%90%AD%E5%BB%BANacos%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<p>挺实用，可惜一般用不上</p><span id="more"></span><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs markdown">docker run -d<br>-e PREFER<span class="hljs-emphasis">_HOST_</span>MODE=hostname<br>-e MODE=cluster<br>-e NACOS<span class="hljs-emphasis">_APPLICATION_</span>PORT=8846<br>-e NACOS<span class="hljs-emphasis">_SERVERS=&quot;100.84.78.75:8846 100.84.78.75:8847 100.84.78.75:8848&quot;</span><br><span class="hljs-emphasis">-e SPRING_</span>DATASOURCE<span class="hljs-emphasis">_PLATFORM=mysql</span><br><span class="hljs-emphasis">-e MYSQL_</span>SERVICE<span class="hljs-emphasis">_HOST=100.84.78.75</span><br><span class="hljs-emphasis">-e MYSQL_</span>SERVICE<span class="hljs-emphasis">_PORT=3306</span><br><span class="hljs-emphasis">-e MYSQL_</span>SERVICE<span class="hljs-emphasis">_USER=root</span><br><span class="hljs-emphasis">-e MYSQL_</span>SERVICE<span class="hljs-emphasis">_PASSWORD=lqsxzq123</span><br><span class="hljs-emphasis">-e MYSQL_</span>SERVICE<span class="hljs-emphasis">_DB_</span>NAME=nacos<span class="hljs-emphasis">_config</span><br><span class="hljs-emphasis">-e NACOS_</span>SERVER<span class="hljs-emphasis">_IP=100.84.78.75</span><br><span class="hljs-emphasis">-p 8846:8846</span><br><span class="hljs-emphasis">--name my-nacos1</span><br><span class="hljs-emphasis">nacos/nacos-server</span><br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_44305577/article/details/107334976">详细可见</a></p>]]></content>
    
    
    <categories>
      
      <category>容器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nacos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker部署MySQL</title>
    <link href="/2022/08/13/yuque/Docker%E9%83%A8%E7%BD%B2MySQL/"/>
    <url>/2022/08/13/yuque/Docker%E9%83%A8%E7%BD%B2MySQL/</url>
    
    <content type="html"><![CDATA[<p>使用 docker 部署很方便,但需要注意中文编码格式</p><span id="more"></span><p><strong>文件夹和配置文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>LOCATION=/root/docker_work/mysql<br>NAME=xxx_mysql<br>PASSWORD=654321<br>VERSION=5.7<br>PORT=3307<br><br>mkdir -p $&#123;LOCATION&#125;/conf $&#123;LOCATION&#125;/log $&#123;LOCATION&#125;/data<br><br>echo &quot;<br>[client]<br>default-character-set=utf8<br>[mysqld]<br>datadir=/var/lib/mysql<br>socket=/var/lib/mysql/mysql.sock<br>init_connect=&#x27;SET collation_connection = utf8_unicode_ci&#x27;<br>init_connect=&#x27;SET NAMES utf8&#x27;<br>character-set-server=utf8<br>collation-server=utf8_unicode_ci<br>skip-character-set-client-handshake<br>symbolic-links=0<br>[mysql]<br>default-character-set = utf8<br>[mysqld_safe]<br>log-error=/var/log/mariadb/mariadb.log<br>pid-file=/var/run/mariadb/mariadb.pid<br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># include all files from the config directory</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-string">&quot; &gt;&gt; <span class="hljs-variable">$&#123;LOCATION&#125;</span>/conf/my.cnf</span></span><br><br>docker rm -f $&#123;NAME&#125;<br>docker run -p $&#123;PORT&#125;:3306 --name $&#123;NAME&#125; \<br>-v $&#123;LOCATION&#125;/log:/var/log/mysql \<br>-v $&#123;LOCATION&#125;/data:/var/lib/mysql \<br>-v $&#123;LOCATION&#125;/conf:/etc/mysql/mysql.conf.d \<br>-e MYSQL_ROOT_PASSWORD=$&#123;PASSWORD&#125; \<br>-d mysql:$&#123;VERSION&#125; --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>容器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring5</title>
    <link href="/2022/08/13/yuque/Spring5/"/>
    <url>/2022/08/13/yuque/Spring5/</url>
    
    <content type="html"><![CDATA[<p>学习 spring 有一段时间了，期间没有时间练习，现在学一下 spring5，再开始做项目</p><span id="more"></span><h1 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h1><h2 id="1、EJB-存在的问题"><a href="#1、EJB-存在的问题" class="headerlink" title="1、EJB 存在的问题"></a>1、EJB 存在的问题</h2><ul><li>是一个重量级框架</li><li>运行环境苛刻</li><li>代码移植性差</li></ul><h2 id="2、什么是-Spring"><a href="#2、什么是-Spring" class="headerlink" title="2、什么是 Spring"></a>2、什么是 Spring</h2><blockquote><p>是一个轻量级的 JavaEE 解决方案，整合众多优秀的设计模式</p></blockquote><ul><li>轻量级</li></ul><blockquote><p>对运行环境没有额外要求</p><p>代码移植性高，不需要实现额外的借口</p></blockquote><ul><li>JavaEE 解决方案</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FqmpecrjSjjYjE7jtH9scQYxSSuI.png"></p><h2 id="3、设计模式"><a href="#3、设计模式" class="headerlink" title="3、设计模式"></a>3、设计模式</h2><blockquote><p>广义：面向对象设计中，解决特定问题的经典代码</p><p>狭义：GOF4 人帮定义的 23 种设计模式：工厂、适配器、门面、代理、模板</p></blockquote><h3 id="1、工厂模式"><a href="#1、工厂模式" class="headerlink" title="1、工厂模式"></a>1、工厂模式</h3><h4 id="什么是工厂模式"><a href="#什么是工厂模式" class="headerlink" title="什么是工厂模式"></a>什么是工厂模式</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 概念；通过工厂类创建对象<br>   User user = new user();<br><span class="hljs-bullet">2.</span> 好处：解耦合<br></code></pre></td></tr></table></figure><h4 id="简单工厂的实现"><a href="#简单工厂的实现" class="headerlink" title="简单工厂的实现"></a>简单工厂的实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanFactory</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Properties</span> <span class="hljs-variable">env</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    <span class="hljs-comment">//资源加载用static</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">//获取io输入流</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> BeanFactory.class.getResourceAsStream(<span class="hljs-string">&quot;.properties&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//文件内容</span><br>            env.load(inputStream);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(inputStream != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    inputStream.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 对象创建：</span><br><span class="hljs-comment">     * 1、直接调用构造方法new</span><br><span class="hljs-comment">     * 2、反射创建：获取类字节码对象，字节码对象反射创建</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> UserService <span class="hljs-title function_">getUserService</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(env.getProperty(<span class="hljs-string">&quot;userService&quot;</span>));<br>            userService = (UserService) clazz.newInstance();<br>        &#125;<span class="hljs-keyword">catch</span> (ClassNotFoundException e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">catch</span> (InstantiationException e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">catch</span> (IllegalAccessException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> userService;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="通用工厂的设计"><a href="#通用工厂的设计" class="headerlink" title="通用工厂的设计"></a>通用工厂的设计</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//代码冗余，写一个工厂类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(String key)</span>&#123;<br>  <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(env.getProperty(key));<br>    obj = clazz.newInstance();<br>  &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>    e.printStackTrace();<br>  &#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>    e.printStackTrace();<br>  &#125;<br>  <span class="hljs-keyword">return</span> obj;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="通用工厂的使用方式"><a href="#通用工厂的使用方式" class="headerlink" title="通用工厂的使用方式"></a>通用工厂的使用方式</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 定义类型（类）<br><span class="hljs-bullet">2.</span> 通过配置文件的配置告知工厂（applicationContext.properties）<br><span class="hljs-bullet">3.</span> 通过工厂获得类的对象<br>   Object obj = BeanFactory.getBean(&quot;key&quot;)<br></code></pre></td></tr></table></figure><h1 id="二、第一个-Spring-程序"><a href="#二、第一个-Spring-程序" class="headerlink" title="二、第一个 Spring 程序"></a>二、第一个 Spring 程序</h1><h2 id="1、软件版本"><a href="#1、软件版本" class="headerlink" title="1、软件版本"></a>1、软件版本</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1.JDK1.8+<br>2.maven3.5+<br>3.IDEA2018+<br>4.SpringFramework5<br></code></pre></td></tr></table></figure><h2 id="2、环境搭建"><a href="#2、环境搭建" class="headerlink" title="2、环境搭建"></a>2、环境搭建</h2><ul><li>Spring 的 jar 包</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>Spring 配置文件</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 配置文件放置没有特殊要求<br><span class="hljs-bullet">2.</span> 命名：建议 applicationContext.xml<br><span class="hljs-bullet">3.</span> 以后应用 spring 框架，需要进行配置文件路径的设置<br></code></pre></td></tr></table></figure><h2 id="3、Spring-核心-API"><a href="#3、Spring-核心-API" class="headerlink" title="3、Spring 核心 API"></a>3、Spring 核心 API</h2><ul><li>ApplicationContext</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">作用：Spring 提供的 applicationcontext 这个工厂，用于对象的创建<br>好处：解耦合<br></code></pre></td></tr></table></figure><ul><li>ApplcationContext 接口类型</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">接口：屏蔽实现的差异<br>非 web 环境：ClassPathXmlApplicationContext<br>web 环境：XmlWebApplicationContext<br></code></pre></td></tr></table></figure><ul><li>重量级资源</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">ApplicationContext 工厂的实现类会占用大量内存<br>不会频繁创建对象，一个应用之创建一个工厂对象<br>ApplicationContext 工厂；一定是线程安全的（多线程并发访问）<br></code></pre></td></tr></table></figure><h2 id="4、程序开发"><a href="#4、程序开发" class="headerlink" title="4、程序开发"></a>4、程序开发</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 创建类型<br><span class="hljs-bullet">2.</span> 配置文件配置<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;person&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lqs.basic.Person&quot;</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><br><span class="hljs-bullet">3.</span> 通过工厂获得对象<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>  <span class="hljs-comment">//获得工厂</span><br>  <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;/applicationContext.xml&quot;</span>);<br>  <span class="hljs-comment">//通过工厂类获得对象:传入字节码之后不需要强转</span><br>  <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> ac.getBean(<span class="hljs-string">&quot;person&quot;</span>,Person.class);<br>  System.out.println(person);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5、细节"><a href="#5、细节" class="headerlink" title="5、细节"></a>5、细节</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1、 2. 只配置 class 属性，不配置 id 值<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lqs.basic.Person&quot;</span>/&gt;</span></span><br>应用场景：只需要使用一次，可以省略 id 值 3. name 属性，bean 对象的别名<br>作用：用于在 Spirng 的配置文件，为 bean 对象定义别名<br>相同：<br>1、ctx.getBean(id | name) -- &gt; object<br>2、<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span></span><br>等效<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span></span><br>区别：<br>1、别名可以定义多个，id 只能定义一个<br>2、xml 的 id 属性命名要求：以字母开头，数字字母下划线连字符<br>name 属性命名没有要求<br>name 属性特殊应用：/person（spring+struct1）<br>3、代码<br>//判断是否存在指定 id 值的 bean，不能判断 name 值<br>ac.containsBeanDefinition(&quot;person&quot;)<br>//判断是否存在指定 id 值的 bean，也可以判断 name 值<br>ac.containsBean(&quot;person&quot;)<br></code></pre></td></tr></table></figure><h2 id="6、Spring-工厂的底层实现原理（简易版）"><a href="#6、Spring-工厂的底层实现原理（简易版）" class="headerlink" title="6、Spring 工厂的底层实现原理（简易版）"></a>6、Spring 工厂的底层实现原理（简易版）</h2><h2 id="7、思考"><a href="#7、思考" class="headerlink" title="7、思考"></a>7、思考</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 是不是所有对象都会交给 spring 创建呢<br>   答：理论上是的，单有特例，实体对象除开（由吃韭菜框架进行创建）<br></code></pre></td></tr></table></figure><h1 id="三、Spring5-x-与日志框架整合"><a href="#三、Spring5-x-与日志框架整合" class="headerlink" title="三、Spring5.x 与日志框架整合"></a>三、Spring5.x 与日志框架整合</h1><blockquote><p>spring 与日志框架进行整合，日志框架就可以在控制台中，输出 spring 框架运行时的重要消息</p></blockquote><ul><li>spring 如何整合日志框架</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">spring5.默认整合 logback、log4j2<br></code></pre></td></tr></table></figure><ul><li>pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-log4j12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.25<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>Log4j.properties</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 配置根</span><br><span class="hljs-attr">log4j.rootLogger</span> = <span class="hljs-string">debug.console</span><br><span class="hljs-comment"># 日志输出到控制台显示</span><br><span class="hljs-attr">log4j.appender.console</span>=<span class="hljs-string">org.apache.log4j.ConsoleAppender</span><br><span class="hljs-attr">log4j.appender.console.Target</span>=<span class="hljs-string">System.out</span><br><span class="hljs-attr">log4j.appender.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-attr">log4j.appender.ConversionPattern</span>=<span class="hljs-string">%d&#123;yyyy-MM-dd HH:mm:ss&#125; %-5p %c&#123;1&#125;:%L - %m%n</span><br></code></pre></td></tr></table></figure><h1 id="四、注入（Injection）"><a href="#四、注入（Injection）" class="headerlink" title="四、注入（Injection）"></a>四、注入（Injection）</h1><h2 id="1、什么是注入"><a href="#1、什么是注入" class="headerlink" title="1、什么是注入"></a>1、什么是注入</h2><h3 id="1、为什么需要注入"><a href="#1、为什么需要注入" class="headerlink" title="1、为什么需要注入"></a>1、为什么需要注入</h3><blockquote><p>通过编码的方式会存在耦合</p><p>person.setName(“lqs”);</p></blockquote><h3 id="2、如何注入"><a href="#2、如何注入" class="headerlink" title="2、如何注入"></a>2、如何注入</h3><ul><li>类成员变量提供 set 方法</li><li>spring 配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lqs.basic.Person&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3、好处"><a href="#3、好处" class="headerlink" title="3、好处"></a>3、好处</h3><ul><li>解耦合</li></ul><h2 id="2、Spring-注入的原理分析"><a href="#2、Spring-注入的原理分析" class="headerlink" title="2、Spring 注入的原理分析"></a>2、Spring 注入的原理分析</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-number">1</span>. &lt;bean class<span class="hljs-operator">=</span><span class="hljs-string">&quot;com.lqs.basic.Person&quot;</span>&gt; <span class="hljs-operator">=</span><span class="hljs-operator">=</span> Person p <span class="hljs-operator">=</span> new Person()<span class="hljs-comment">;</span><br><span class="hljs-number">2</span>. &lt;property name<span class="hljs-operator">=</span><span class="hljs-string">&quot;id&quot;</span> value<span class="hljs-operator">=</span><span class="hljs-string">&quot;lqs&quot;</span>&gt; <span class="hljs-operator">=</span><span class="hljs-operator">=</span> p.setName(<span class="hljs-string">&quot;lqs&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="3、Set-注入"><a href="#3、Set-注入" class="headerlink" title="3、Set 注入"></a>3、Set 注入</h2><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FoLceTlvgauXtEIjvX6zVBS9qlw2.png"></p><h3 id="1、JDK-内置类型"><a href="#1、JDK-内置类型" class="headerlink" title="1、JDK 内置类型"></a>1、JDK 内置类型</h3><h4 id="String-8-种基本类型"><a href="#String-8-种基本类型" class="headerlink" title="String+8 种基本类型"></a>String+8 种基本类型</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>suns<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>aa<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>bbb<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>ccc<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>aa<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>bbb<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>ccc<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>aa<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>bbb<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>ccc<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- key和value都可为自定义类型，使用ref--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;testA&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>lqs<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;testB&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>bbb<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>lqs<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;testC&quot;</span>&gt;</span>ccc<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;testD&quot;</span>&gt;</span>ddd<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">prop</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、自定义类型"><a href="#2、自定义类型" class="headerlink" title="2、自定义类型"></a>2、自定义类型</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--方式一：代码冗余，会创建多余bean，浪费内存资源--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lqs.UserServiceImpl&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lqs.UserDaoImpl&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--方式二：直接ref，不会创建多余对象，建议使用--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lqs.UserDaoImpl&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>lqs<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lqs.UserService&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;userDao&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3、Set-注入的简化写法"><a href="#3、Set-注入的简化写法" class="headerlink" title="3、Set 注入的简化写法"></a>3、Set 注入的简化写法</h3><h4 id="基于属性简化"><a href="#基于属性简化" class="headerlink" title="基于属性简化"></a>基于属性简化</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml">JDK类型注入<br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lqs.UserDaoImpl&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;lqs&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>  替换下面的写法，只能简化8种基本类型和String<br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>lqs<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>用户自定义类型<br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lqs.UserDaoImpl&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>/&gt;</span><br>  替换下面的写法<br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;userDao&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="基于命名空间-p-简化"><a href="#基于命名空间-p-简化" class="headerlink" title="基于命名空间 p 简化"></a>基于命名空间 p 简化</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">用p标签代替property<br>用于8种基本类型和String<br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;person&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lqs.Person&quot;</span> <span class="hljs-attr">p:name</span>=<span class="hljs-string">&quot;lqs&quot;</span><span class="hljs-attr">p:id</span>=<span class="hljs-string">&quot;100&quot;</span>/&gt;</span><br>用于自定义类型<br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lqs.UserService&quot;</span> <span class="hljs-attr">p-userDao-ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4、构造注入"><a href="#4、构造注入" class="headerlink" title="4、构造注入"></a>4、构造注入</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">构造注入：Spring调用构造方法，通过配置文件为成员变量复制<br></code></pre></td></tr></table></figure><h3 id="1、使用方法"><a href="#1、使用方法" class="headerlink" title="1、使用方法"></a>1、使用方法</h3><ul><li>提供有参构造方法</li><li>配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;person&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lqs.Person&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-org</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>18<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-org</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">constructor-org</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>lqs<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-org</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、构造方法重载"><a href="#2、构造方法重载" class="headerlink" title="2、构造方法重载"></a>2、构造方法重载</h3><h4 id="1、参数个数不同时"><a href="#1、参数个数不同时" class="headerlink" title="1、参数个数不同时"></a>1、参数个数不同时</h4><ul><li>通过的数量来区分</li></ul><h4 id="2、参数个数相同时"><a href="#2、参数个数相同时" class="headerlink" title="2、参数个数相同时"></a>2、参数个数相同时</h4><ul><li>在标签引入 type 属性对区分</li></ul><h2 id="5、注入的总结"><a href="#5、注入的总结" class="headerlink" title="5、注入的总结"></a>5、注入的总结</h2><blockquote><p>实战中使用 set 注入还是 get 注入？</p><p>答：set 注入更多</p><p>1、构造注入更麻烦</p><p>2、Spring 使用 set 注入更多</p></blockquote><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FtA4mf6Uv-cvPytH0vdLheH2uhai.png"></p><h1 id="五、控制反转与依赖注入"><a href="#五、控制反转与依赖注入" class="headerlink" title="五、控制反转与依赖注入"></a>五、控制反转与依赖注入</h1><h2 id="1、控制反转（Inverse-of-Control）"><a href="#1、控制反转（Inverse-of-Control）" class="headerlink" title="1、控制反转（Inverse of Control）"></a>1、控制反转（Inverse of Control）</h2><blockquote><p>对成员变量赋值的控制权发生变化：</p><p>从代码 —&gt; spring 工厂和配置文件</p><p>解耦合</p></blockquote><h2 id="2、依赖注入"><a href="#2、依赖注入" class="headerlink" title="2、依赖注入"></a>2、依赖注入</h2><blockquote><p>注入：通过 spring 工厂及配置文件，为对象成员变量赋值</p><p>依赖注入：当一个类需要另一个类时，就发生依赖，一旦出现以来，就把另一个类作为本类的成员变量，通过 Spring 注入</p></blockquote><h1 id="六、Spring-工厂创建复杂对象"><a href="#六、Spring-工厂创建复杂对象" class="headerlink" title="六、Spring 工厂创建复杂对象"></a>六、Spring 工厂创建复杂对象</h1><blockquote><p>简单对象：可以直接 new 创建的对象</p><p>复杂对象：不能通过 new 创建的，如 Connection、SqlSessionFactory</p></blockquote><h2 id="1、创建复杂对象的-3-种方式"><a href="#1、创建复杂对象的-3-种方式" class="headerlink" title="1、创建复杂对象的 3 种方式"></a>1、创建复杂对象的 3 种方式</h2><h3 id="1、Factory-接口"><a href="#1、Factory-接口" class="headerlink" title="1、Factory 接口"></a>1、Factory 接口</h3><ul><li>实现 Factory 接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//泛型：在此处为Connection</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConnectionFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;Connection&gt; &#123;<br>  <span class="hljs-keyword">public</span> Connection <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url,username,password);<br>    <span class="hljs-keyword">return</span> con;<br>  &#125;<br>  <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123;<br>    <span class="hljs-keyword">return</span> Connection.class;<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSingleton</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Spring 配置文件的配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"># 当Class指定的是FactoryBean接口的实现类，那么通过id值获得的是这个类创建的是复杂对象con<br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;con&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lqs.ConnectionFactorybean&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>细节<ul><li>如果想得到 BeanFactory 的实现类</li></ul></li></ul><p>&#x2F;&#x2F;加一个&amp;获得<br>ac.getBean(“&amp;con”)</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>- isSingleton方法<br><br>```xml<br>根据对象特点决定是否为单例，连接对象每次都应该创建新的<br></code></pre></td></tr></table></figure><ul><li>FactoryBean 实现原理</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown">接口回调<br><br><span class="hljs-bullet">1.</span> 为什么 Spring 规定 FactoryBean 接口并实现 getObject()<br><span class="hljs-bullet">2.</span> ac.getBean(&quot;con&quot;)获得的是复杂对象 Connection 而不是 ConnectionFactoryBean(&amp;)<br><br>Spring 内部运行流程<br><br><span class="hljs-bullet">1.</span> 通过 con 获得 ConnectionFactoryBean 类的对象，今儿通过 instance 判断出是 FactoryBean 的实现类<br><span class="hljs-bullet">2.</span> 按照规定 getobject() --&gt; Connection<br><span class="hljs-bullet">3.</span> 返回 Object<br></code></pre></td></tr></table></figure><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FshzSTgpyt4tQOJY3Cs6n27szRKO.png"></p><ul><li>FactoryBean 总结</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Spring 用于创建复杂对象的一种方式，也是 Spring 原生提供的，后续讲解 Spring 整合其他框架会大量应用 FactoryBean<br></code></pre></td></tr></table></figure><h3 id="2、实例工厂"><a href="#2、实例工厂" class="headerlink" title="2、实例工厂"></a>2、实例工厂</h3><blockquote><p>避免 Spring 框架的侵入</p><p>整合遗留系统</p></blockquote><ul><li>编写 Java 类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConnectionFactory</span>&#123;<br>  <span class="hljs-keyword">public</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>      con = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/spring5&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;lxl20000413&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>      e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>      e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> con;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>编写配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;connectionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lqs.basic.ConnectionFactory&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;con&quot;</span> <span class="hljs-attr">factory-bean</span>=<span class="hljs-string">&quot;connectionFactory&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;getConnection&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3、静态工厂"><a href="#3、静态工厂" class="headerlink" title="3、静态工厂"></a>3、静态工厂</h3><ul><li>编写 Java 类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticConnectionFactory</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>      con = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/spring5&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;lxl20000413&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>      e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>      e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> con;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;con&quot;</span><span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lqs.basic.StaticConnectionFactory&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;getConnection&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2、Spring-工厂模式总结"><a href="#2、Spring-工厂模式总结" class="headerlink" title="2、Spring 工厂模式总结"></a>2、Spring 工厂模式总结</h2><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FnVg0Jm2n8OHTOs6YAyie8W3Y2XJ.png"></p><h1 id="七、控制-Spring-工厂创建对象的次数"><a href="#七、控制-Spring-工厂创建对象的次数" class="headerlink" title="七、控制 Spring 工厂创建对象的次数"></a>七、控制 Spring 工厂创建对象的次数</h1><h2 id="1、简单对象的创建次数"><a href="#1、简单对象的创建次数" class="headerlink" title="1、简单对象的创建次数"></a>1、简单对象的创建次数</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;person&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lqs.Person&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;singleton&quot;</span>/&gt;</span><br>singleton:默认值，单例模式<br>prototype:多例模式<br>request:在一次http请求中，每个bean对应一个实例，基于web<br>session:在一个http session中，每个bean对应一个实例，基于web<br>global session:在一个全局http session中，每个bean对应一个实例，在Portlet上下文有意义<br></code></pre></td></tr></table></figure><h2 id="2、复杂对象创建次数"><a href="#2、复杂对象创建次数" class="headerlink" title="2、复杂对象创建次数"></a>2、复杂对象创建次数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">FactoryBean&#123;<br>  isSingleton()&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>/<span class="hljs-literal">true</span>;多例/单例<br>  &#125;<br>&#125;<br><span class="hljs-comment">//没有isSingleton时，通过scope属性进行控制</span><br></code></pre></td></tr></table></figure><h2 id="3、为什么控制对象创建次数"><a href="#3、为什么控制对象创建次数" class="headerlink" title="3、为什么控制对象创建次数"></a>3、为什么控制对象创建次数</h2><blockquote><p>节省不必要的内存浪费</p></blockquote><ul><li>什么样的对象单例<ul><li>SqlSessionFactory</li><li>Dao</li><li>Service</li></ul></li><li>什么样的对象多例<ul><li>Connection</li><li>SqlSession</li></ul></li></ul><h1 id="八、生命周期"><a href="#八、生命周期" class="headerlink" title="八、生命周期"></a>八、生命周期</h1><blockquote><p>对象创建、存活、消亡的完整过程</p></blockquote><h2 id="1、创建阶段"><a href="#1、创建阶段" class="headerlink" title="1、创建阶段"></a>1、创建阶段</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">singleton<br>Spring 工厂创建时创建<br>如需要懒加载，bean 添加标签 lazy-init=&quot;true&quot;<br>prototype<br>按需加载，当 ac.getBean()调用时<br></code></pre></td></tr></table></figure><h2 id="2、初始化阶段"><a href="#2、初始化阶段" class="headerlink" title="2、初始化阶段"></a>2、初始化阶段</h2><blockquote><p>spring 工厂创建完对象后，调用对象的初始化方法，完成对应的初始化操作</p><p>初始化方法：</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">程序员根据需求提供<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">Spring工厂进行调用<br></code></pre></td></tr></table></figure><ul><li>initializingBean 接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span><br></code></pre></td></tr></table></figure><ul><li>对象中提供一个普通的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">myInit</span><span class="hljs-params">()</span>;<br>&lt;bean id=<span class="hljs-string">&quot;product&quot;</span> class=<span class="hljs-string">&quot;xxx.product&quot;</span> init-method=<span class="hljs-string">&quot;myInit&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><ul><li>细节<ul><li>1、如果两种初始化方法同时出现，先 initializingBean 再普通方法</li><li>2、 注入发生在初始化操作之前</li><li>3、初始化：数据库、IO、网络</li></ul></li></ul><h2 id="3、销毁阶段"><a href="#3、销毁阶段" class="headerlink" title="3、销毁阶段"></a>3、销毁阶段</h2><blockquote><p>销毁对象前，会调用销毁方法，完成销毁操作</p><p>Spring 什么时候销毁所创建的对象？</p><p>销毁方法：</p></blockquote><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">ac</span>.<span class="hljs-keyword">close</span>()<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">程序员根据需求tig<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">Spring工厂完成调用<br></code></pre></td></tr></table></figure><ul><li>DisposableBean 接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destory</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><ul><li>自定义销毁方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">myDestory</span><span class="hljs-params">()</span>;<br>&lt;bean id=<span class="hljs-string">&quot;product&quot;</span> class=<span class="hljs-string">&quot;xxx.product&quot;</span> destory-method=<span class="hljs-string">&quot;myDestory&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><ul><li>细节<ul><li>1、销毁方法只适用于 singleton</li><li>2、销毁：主要是资源的释放</li></ul></li></ul><h2 id="4、生命周期总结"><a href="#4、生命周期总结" class="headerlink" title="4、生命周期总结"></a>4、生命周期总结</h2><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FjlS8FpuTMrN2-qjfk2cJ7I5nhta.png"></p><h1 id="九、自定义类型转换器"><a href="#九、自定义类型转换器" class="headerlink" title="九、自定义类型转换器"></a>九、自定义类型转换器</h1><h2 id="1、类型转换器"><a href="#1、类型转换器" class="headerlink" title="1、类型转换器"></a>1、类型转换器</h2><blockquote><p>作用：Spring 使用类型转换器将配置文件中字符串数据转换为成员变量中对应类型的数据</p></blockquote><h2 id="2、自定义类型转换器"><a href="#2、自定义类型转换器" class="headerlink" title="2、自定义类型转换器"></a>2、自定义类型转换器</h2><blockquote><p>Spring 没有提供特类型转换时，需要自己自定义</p></blockquote><h3 id="1、实现-converter-接口、再自定义"><a href="#1、实现-converter-接口、再自定义" class="headerlink" title="1、实现 converter 接口、再自定义"></a>1、实现 converter 接口、再自定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDateConverter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Converter</span>&lt;String, Date&gt; &#123;<br>  <span class="hljs-comment">/*** 将字符串类型转换为Date类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> s 代表配置文件中日期字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> date 当转换好当date作为converter方法返回值时，Spring自动为birthday进行注入 */</span><br>  <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">convert</span><span class="hljs-params">(String s)</span> &#123;<br>    <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br>      date = sdf.parse(s);<br>    &#125;<span class="hljs-keyword">catch</span> (ParseException e)&#123;<br>      e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> date;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、在-spring-配置文件进行配置"><a href="#2、在-spring-配置文件进行配置" class="headerlink" title="2、在 spring 配置文件进行配置"></a>2、在 spring 配置文件进行配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--自定义的MyDateConverter--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mydateConverter&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;xxx.MydateConverter&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--将自定义转换器注册进spring--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;conversionService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;converters&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;myDateConverter&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3、细节"><a href="#3、细节" class="headerlink" title="3、细节"></a>3、细节</h3><ul><li>解耦合</li></ul><blockquote><p>转换器依赖于”yyyy-MM-dd”，可以将其单独配置。</p><p>做少量变动即可，其他不变，减少耦合</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDateConverter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Converter</span>&lt;String, Date&gt; &#123;<br>  <span class="hljs-keyword">private</span> String pattern;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPattern</span><span class="hljs-params">(String pattern)</span> &#123;<br>    <span class="hljs-built_in">this</span>.pattern = pattern;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">convert</span><span class="hljs-params">(String s)</span> &#123;<br>    <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(pattern);<br>      date = sdf.parse(s);<br>    &#125;<span class="hljs-keyword">catch</span> (ParseException e)&#123;<br>      e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> date;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myDateConverter&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lqs.converter.MyDateConverter&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pattern&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>注册类型转换器时 id 属性不能变，必须是 conversionService</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;conversionService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>spring 有内置日期转换器，其格式为</li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex">2020/11/05<br></code></pre></td></tr></table></figure><h1 id="十、后置处理-Bean"><a href="#十、后置处理-Bean" class="headerlink" title="十、后置处理 Bean"></a>十、后置处理 Bean</h1><blockquote><p>BeanpostProcessor 作用：对 Spring 工厂创建的对象再加工</p></blockquote><h2 id="1、实现-BeanPostProcessor-接口并配置进容器"><a href="#1、实现-BeanPostProcessor-接口并配置进容器" class="headerlink" title="1、实现 BeanPostProcessor 接口并配置进容器"></a>1、实现 BeanPostProcessor 接口并配置进容器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//实战中：一般只用实现一个after即可，要实现before必须返回bean对象</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBeanPostProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanPostProcessor</span> &#123;<br>  <span class="hljs-comment">//spring创建完对象，并进行注入后，允许before方法进行加工</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>    <span class="hljs-keyword">return</span> bean;<br>  &#125;<br><span class="hljs-comment">//spring执行完对象的初始化操作后，允许after进行加工</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessAfterInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>    <span class="hljs-keyword">if</span>(bean <span class="hljs-keyword">instanceof</span> Category) &#123;<br>      <span class="hljs-type">Category</span> <span class="hljs-variable">category</span> <span class="hljs-operator">=</span> (Category) bean;<br>      category.setName(<span class="hljs-string">&quot;sk&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> bean;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、细节"><a href="#2、细节" class="headerlink" title="2、细节"></a>2、细节</h2><ul><li>BeanPostProcessor 会对工厂创建的所有的对象进行加工 ，所有针对特定嘞需要做特殊处理</li></ul><h1 id="十一、AOP"><a href="#十一、AOP" class="headerlink" title="十一、AOP"></a>十一、AOP</h1><h2 id="1、静态代理设计模式"><a href="#1、静态代理设计模式" class="headerlink" title="1、静态代理设计模式"></a>1、静态代理设计模式</h2><ul><li>dao service controller 三层架构中，service 层最重要</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fko2wICL4WvPaWAqVUxuzw8Aq2DG.png"></p><ul><li>为什么要使用代理</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FkX4aKBMtLPctFt7zPneTwH73F7q.png"></p><h3 id="1、代理设计模式"><a href="#1、代理设计模式" class="headerlink" title="1、代理设计模式"></a>1、代理设计模式</h3><blockquote><p>定义：通过代理类为原始类增加额外功能，有利于原始类的维护</p></blockquote><ul><li>静态代理的问题：静态嘞文件数量过多，不利于项目管理</li></ul><h2 id="2、Spring-动态代理"><a href="#2、Spring-动态代理" class="headerlink" title="2、Spring 动态代理"></a>2、Spring 动态代理</h2><blockquote><p>通过代理类为被代理类实现功能增强，利于维护</p></blockquote><h3 id="1、创建被代理类"><a href="#1、创建被代理类" class="headerlink" title="1、创建被代理类"></a>1、创建被代理类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IUserService</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(User user)</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">login</span><span class="hljs-params">(String name,String password)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserService</span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserService</span>();<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(User user)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;---log---&quot;</span>);<br>    userService.register(user);<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">login</span><span class="hljs-params">(String name, String password)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;---log---&quot;</span>);<br>    <span class="hljs-keyword">return</span> userService.login(name, password);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、创建类实现-MethodBeforeAdvice"><a href="#2、创建类实现-MethodBeforeAdvice" class="headerlink" title="2、创建类实现 MethodBeforeAdvice"></a>2、创建类实现 MethodBeforeAdvice</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Before</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MethodBeforeAdvice</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">(Method method, Object[] objects, Object o)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>    System.out.println(<span class="hljs-string">&quot;----method before advice log---&quot;</span>);<br>  &#125;<br>&#125;<br><br>&lt;bean id=<span class="hljs-string">&quot;before&quot;</span> class=<span class="hljs-string">&quot;xx.Before&quot;</span>/<br></code></pre></td></tr></table></figure><h3 id="3、定义切入点"><a href="#3、定义切入点" class="headerlink" title="3、定义切入点"></a>3、定义切入点</h3><blockquote><p>额外功能加入的位置</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--所有方法都作为切入点--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pc&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* *(..))&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4、组装"><a href="#4、组装" class="headerlink" title="4、组装"></a>4、组装</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--所有方法都作为切入点--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pc&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* *(..))&quot;</span>/&gt;</span><br>  <span class="hljs-comment">&lt;!--所有方法都加入before的额外功能--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;before&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pc&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5、调用"><a href="#5、调用" class="headerlink" title="5、调用"></a>5、调用</h3><blockquote><p>注意：</p><p>spring 工厂通过原始对象 id 获取到的是代理对象</p><p>获得代理对象之后，可以通过声明接口类型进行对象的存储</p></blockquote><h2 id="3、动态代理细节分析"><a href="#3、动态代理细节分析" class="headerlink" title="3、动态代理细节分析"></a>3、动态代理细节分析</h2><ul><li>Spring 框架运行时，通过动态字节码技术，在 JVM 创建 Spring 动态代理类，运行在 JVM 内部</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Foip_3dWONBhMS5w_VJQ633_LqCs.png"></p><ul><li>动态代理编程简化代理的开发</li></ul><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex">在额外功能不改变的前提下，创建其他目标类的代理对象时，只需要指定原始对象即可<br></code></pre></td></tr></table></figure><ul><li>动态代理额外功能的 维护性增强</li></ul><h2 id="4、Spring-动态代理详解"><a href="#4、Spring-动态代理详解" class="headerlink" title="4、Spring 动态代理详解"></a>4、Spring 动态代理详解</h2><h3 id="1、额外功能详解"><a href="#1、额外功能详解" class="headerlink" title="1、额外功能详解"></a>1、额外功能详解</h3><ul><li>MethodBeforeAdvice 分析</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">MethodBeforeAdvice:在原始方法执行之前的增强需要实现此接口<br></code></pre></td></tr></table></figure><ul><li>MethodInterceptor 分析</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">MethodInterceptor:对原始方法进行环绕增强<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Around</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MethodInterceptor</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 额外操作都写在invoke里</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> methodInvocation</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 原始方法返回值作为invoke方法返回值,MethodInterceptor不会影响原始方法的返回值,若需要改变，也很简单，不直接返回invoke的返回值即可</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Throwable</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(MethodInvocation methodInvocation)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      System.out.println(<span class="hljs-string">&quot;前置通知&quot;</span>);<br>      <span class="hljs-keyword">try</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;前通知&quot;</span>);<br>        <span class="hljs-comment">//即原始类中的方法运行</span><br>        ret = methodInvocation.proceed();<br>        System.out.println(<span class="hljs-string">&quot;后置通知&quot;</span>);<br>      &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>        System.out.println(<span class="hljs-string">&quot;异常通知&quot;</span>);<br>      &#125;<span class="hljs-keyword">finally</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;最终通知&quot;</span>);<br>        <span class="hljs-keyword">return</span> ret;<br>      &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="2、切入点表达式"><a href="#2、切入点表达式" class="headerlink" title="2、切入点表达式"></a>2、切入点表达式</h3><ul><li><p>定义一个方法</p><table><thead><tr><th>访问修饰符</th><th>返回值</th><th>方法名</th><th>参数列表</th></tr></thead><tbody><tr><td>public</td><td>void</td><td>service</td><td>String,Integer</td></tr></tbody></table></li><li><p>定义切入点表达式不需要管返回值</p></li></ul><p><strong>非 java.lang 包中的类需要写全限定类名</strong></p><h4 id="方法切入点表达式"><a href="#方法切入点表达式" class="headerlink" title="方法切入点表达式"></a>方法切入点表达式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方法名为login两个参数均为string才可以</span><br>* com.lqs.service.userService.login(String,String)<br></code></pre></td></tr></table></figure><h4 id="类切入点表达式"><a href="#类切入点表达式" class="headerlink" title="类切入点表达式"></a>类切入点表达式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//写法一：类中所有方法加入额外功能</span><br>* com.lqs.service.userService.*(..)<br><span class="hljs-comment">//忽略包</span><br><span class="hljs-comment">//类只存在一级包</span><br>* userService.*(..)<br><span class="hljs-comment">//类存在多级包</span><br>* *..userService.*(..)<br></code></pre></td></tr></table></figure><h4 id="包切入点表达式（最常用）"><a href="#包切入点表达式（最常用）" class="headerlink" title="包切入点表达式（最常用）"></a>包切入点表达式（最常用）</h4><ul><li>指定包作为额外功能加入的位置，自然保重所有类及方法都会加入额外的功能</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//语法1:切入点包中所有类，必须在proxy中，不能在proxy的子包中</span><br>* com.lqs.proxy.*.*(..)<br><span class="hljs-comment">//语法2：切入点当前包及子包都生效</span><br>* com.lqs.proxy..*.*(..)<br></code></pre></td></tr></table></figure><h4 id="切入点函数"><a href="#切入点函数" class="headerlink" title="切入点函数"></a>切入点函数</h4><ul><li>execution<ul><li>最重要的切入点函数</li><li>切入点：可执行上述三种切入点表达式</li><li>缺点：书写麻烦</li></ul></li><li>args<ul><li>用于函数参数的匹配</li><li>切入点：方法参数必须时 2 个字符串类型的参数</li><li>eg：execution(_ _(String,String)) &#x3D;&#x3D; args(String,String)</li></ul></li><li>within<ul><li>用于进行类，包切入点表达式的匹配</li><li>切入点：类</li><li>eg：execution(_ <em>..userService.</em>(..)). &#x3D;&#x3D; within（_..userService)</li></ul></li><li><a href="/annotation">@annotation </a><ul><li>为具有特殊注解的方法加入额外功能</li><li>eg：<a href="/com.lqs.Log">@annotation(com.lqs.Log) </a></li></ul></li><li>切入点函数的逻辑运算<ul><li>整合多个切入点函数配合工作，进而完成复杂的需求</li><li>and 与操作<ul><li>注意：不能用于同类型的切入点函数</li><li>eg：execution(_ login(_ <em>)) and args(String,String) &#x3D;&#x3D; execution(</em> login(String,String))</li></ul></li><li>or 或操作<ul><li>eg：execution(_ login(..)) or execution(_ register(..))</li></ul></li></ul></li></ul><h2 id="5、AOP-编程"><a href="#5、AOP-编程" class="headerlink" title="5、AOP 编程"></a>5、AOP 编程</h2><ul><li>AOP 开发步骤<ul><li>原始对象</li><li>额外功能</li><li>切入点</li><li>组装切面</li></ul></li><li>AOP 创建代理对象原理</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FrDOzKGEe2dgAaErVK7q_ctbkYWu.png"></p><h2 id="1、基于-Cglib"><a href="#1、基于-Cglib" class="headerlink" title="1、基于 Cglib"></a>1、基于 Cglib</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String[] args)</span> &#123;<br>  <span class="hljs-type">UserService</span> <span class="hljs-variable">cglibService</span> <span class="hljs-operator">=</span> (UserService) Enhancer.create(userService.getClass(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodInterceptor</span>() &#123;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">intercept</span><span class="hljs-params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>      System.out.println(<span class="hljs-string">&quot;---cglib---proxy&quot;</span>);<br>      <span class="hljs-keyword">return</span> method.invoke(userService, objects);&#125;&#125;);<br>  cglibService.register(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>());<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、基于-JDK"><a href="#2、基于-JDK" class="headerlink" title="2、基于 JDK"></a>2、基于 JDK</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>  <span class="hljs-comment">//1、原始对象</span><br>  <span class="hljs-comment">//jdk8.0之前需要将其声明为final</span><br>  <span class="hljs-type">IUserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserService</span>();<br>  <span class="hljs-comment">//2、JDK动态代理</span><br>  <span class="hljs-type">IUserService</span> <span class="hljs-variable">proxyService</span> <span class="hljs-operator">=</span> (IUserService) Proxy.newProxyInstance(userService.getClass().getClassLoader(), userService.getClass().getInterfaces(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>      System.out.println(<span class="hljs-string">&quot;----before&quot;</span>);<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> method.invoke(userService, args);<br>      System.out.println(<span class="hljs-string">&quot;----after&quot;</span>);<br>      <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>  &#125;);<br>  <span class="hljs-comment">//3使用</span><br>  proxyService.login(<span class="hljs-string">&quot;lqs&quot;</span>,<span class="hljs-string">&quot;qejaldms&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FupFx2VJM5_rDWQMpHHItZHWxh2w.png"></p><h1 id="十二、基于注解的-AOP"><a href="#十二、基于注解的-AOP" class="headerlink" title="十二、基于注解的 AOP"></a>十二、基于注解的 AOP</h1><h2 id="1、简单使用"><a href="#1、简单使用" class="headerlink" title="1、简单使用"></a>1、简单使用</h2><ul><li>定义被代理类和切面类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(User user)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;---log---&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">login</span><span class="hljs-params">(String name, String password)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;---log---&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;<br>&#125;<br><span class="hljs-meta">@Aspect</span><span class="hljs-comment">//这是一个切面类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect</span> &#123;<br>  <span class="hljs-meta">@Around(&quot;execution(* login(..))&quot;)</span><span class="hljs-comment">//定义切入点</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>    System.out.println(<span class="hljs-string">&quot;aspect---before&quot;</span>);<span class="hljs-comment">//自定义方法增强</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> joinPoint.proceed();<span class="hljs-comment">//代表被代理类方法</span><br>    System.out.println(<span class="hljs-string">&quot;aspect---after&quot;</span>);<br>    <span class="hljs-keyword">return</span> ret;<span class="hljs-comment">//返回</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--告知spring进行基于注解的aop编程--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>/&gt;</span><br><span class="hljs-comment">&lt;!--配置被代理类--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lqs.aspect.UserService&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--配置切面类--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myAspect&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lqs.aspect.MyAspect&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2、细节-1"><a href="#2、细节-1" class="headerlink" title="2、细节"></a>2、细节</h2><ul><li>切入点复用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><span class="hljs-comment">//这是一个切面类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect</span> &#123;<br><span class="hljs-comment">//定义可复用切入点</span><br>  <span class="hljs-meta">@Pointcut(&quot;execution(* register(..))&quot;)</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">myPointCut</span><span class="hljs-params">()</span>&#123;&#125;<br><br>  <span class="hljs-meta">@Around(value = &quot;myPointCut()&quot;)</span><span class="hljs-comment">//使用自定义切入点</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around2</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>    System.out.println(<span class="hljs-string">&quot;aspect---before tx&quot;</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> joinPoint.proceed();<br>    System.out.println(<span class="hljs-string">&quot;aspect---after tx&quot;</span>);<br>    <span class="hljs-keyword">return</span> ret;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>spring 对 jdkproxy 和 cglib 的切换</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">//false:默认值，即使用jdkproxy<br>//true:使用cglib<br><span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span> <span class="hljs-attr">proxy-target-class</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span>//基于注解的<br><span class="hljs-tag">&lt;<span class="hljs-name">aop:aconfig</span> <span class="hljs-attr">proxy-target-class</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>//基于配置的<br></code></pre></td></tr></table></figure><h2 id="3、开发常见的坑"><a href="#3、开发常见的坑" class="headerlink" title="3、开发常见的坑"></a>3、开发常见的坑</h2><ul><li>在同一个业务类中进行方法间的相互调用，只有最外层方法才进行方法增强（内部方法通过普通调用的都是未增强的方法）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(User user)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;---register---&quot;</span>);<br>    <span class="hljs-comment">//当出现此种调用时，this指的被代理对象，方法没有被增强</span><br>    <span class="hljs-built_in">this</span>.login(<span class="hljs-string">&quot;suns&quot;</span>, <span class="hljs-string">&quot;qkdokd&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">login</span><span class="hljs-params">(String name, String password)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;---login---&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>解决方法:通过实现 ApplicationContextAware 获得 applicationContext，再创建</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserService</span>, ApplicationContextAware &#123;<br><br>  <span class="hljs-keyword">private</span> ApplicationContext ctx;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setApplicationContext</span><span class="hljs-params">(ApplicationContext applicationContext)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>    <span class="hljs-built_in">this</span>.ctx = applicationContext;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(User user)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;---register---&quot;</span>);<br>    <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> (UserService)ctx.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br>    userService.login(<span class="hljs-string">&quot;suns&quot;</span>, <span class="hljs-string">&quot;qkdokd&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">login</span><span class="hljs-params">(String name, String password)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;---login---&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">aspect---before--register</span><br><span class="hljs-comment">---register---</span><br><span class="hljs-comment">aspect---before--login</span><br><span class="hljs-comment">---login---</span><br><span class="hljs-comment">aspect---after--login</span><br><span class="hljs-comment">aspect---after--register</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="4、AOP-总结"><a href="#4、AOP-总结" class="headerlink" title="4、AOP 总结"></a>4、AOP 总结</h2><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Ftk5_KYKKIRQSRQqUJxM8lSooX3I.png"></p><h1 id="十三、Spring-整合-Mybatis"><a href="#十三、Spring-整合-Mybatis" class="headerlink" title="十三、Spring 整合 Mybatis"></a>十三、Spring 整合 Mybatis</h1><h2 id="1、Spring-整合-Mybatis"><a href="#1、Spring-整合-Mybatis" class="headerlink" title="1、Spring 整合 Mybatis"></a>1、Spring 整合 Mybatis</h2><ul><li>配置文件：spring-mybatis.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--连接池--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;mysql.driver&#125;&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;mysql.url&#125;&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;mysql.user&#125;&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;mysql.password&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--sqlSessionFactory--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--数据源--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>  <span class="hljs-comment">&lt;!--绑定mybatis全局配置文件--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span><br>  <span class="hljs-comment">&lt;!--绑定mapper路径--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mapper/*.xml&quot;</span>/&gt;</span><br>  <span class="hljs-comment">&lt;!--扫描entity包，使用别名--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;typeAliasesPackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.blog.pojo&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--配置dao扫描包，实现dao接口动态注入到容器中--&gt;</span><br><span class="hljs-comment">&lt;!--maperScannerConfigure创建的dao对象id值为mapper接口首字母小写--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--注入sqlSessionFactory--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br>  <span class="hljs-comment">&lt;!--要扫描的包--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.blog.mapper&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>Java 编码</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 实体<br>   2、表<br><span class="hljs-bullet">2.</span> DAO 接口<br><span class="hljs-bullet">3.</span> Mapper 配置文件<br></code></pre></td></tr></table></figure><h2 id="2、整合细节"><a href="#2、整合细节" class="headerlink" title="2、整合细节"></a>2、整合细节</h2><ul><li>为什么 dao 不提交事务，但是数据可以插入进数据库 ？</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">spring 整合 mybatis 时，引入了外部连接池对象，保持自动的事务提交机制，不需要手工进行事务的操作，也能进行事务提交<br></code></pre></td></tr></table></figure><h1 id="十四、Spring-事务处理"><a href="#十四、Spring-事务处理" class="headerlink" title="十四、Spring 事务处理"></a>十四、Spring 事务处理</h1><h2 id="1、Spring-事务处理"><a href="#1、Spring-事务处理" class="headerlink" title="1、Spring 事务处理"></a>1、Spring 事务处理</h2><blockquote><p>保证业务操作完整性的一种数据库机制</p><p>事务 4 特点：A 原子性、C 一致性、I 隔离性、D 持久性</p></blockquote><ul><li>使用 AOP 进行事务开发</li></ul><h2 id="2、事务属性"><a href="#2、事务属性" class="headerlink" title="2、事务属性"></a>2、事务属性</h2><h3 id="1、隔离属性"><a href="#1、隔离属性" class="headerlink" title="1、隔离属性"></a>1、隔离属性</h3><ul><li><p>并发：多个事务在统一时间，访问并操作了相同的数据</p></li><li><p>并发产生的问题</p><ul><li>脏读：一个事务读取另一个事务没有提交的数据，会在本事务产生数据不一致的问题</li><li>幻读：</li><li>不可重复读</li></ul></li><li><p>如何解决：通过隔离属性解决，隔离属性设置不同的值</p><ul><li>脏读：<a href="/Transactional(isolation">@Transactional(isolation </a> &#x3D; Isolation.READ_COMMITTED)<table><thead><tr><th></th><th>脏读</th><th>不可重复读</th><th>幻读</th><th>ORACLE 支持</th><th>MYSQL 支持</th></tr></thead><tbody><tr><td></td><td>一个事务读取另一个事务没有提交的数据，会在本事务产生数据不一致的问题</td><td>同一个事务中，多次读取到的数据不一致</td><td>一个事务读取数据时，另外一个事务进行更新，导致第一个事务读取到了没有更新的数据</td><td></td><td></td></tr><tr><td>READ_UNCOMMITTED</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>READ_COMMITTED</td><td>N</td><td>Y</td><td>Y</td><td>Y(Default)</td><td>Y</td></tr><tr><td>REPEATABLE_READ：一把行锁</td><td>N</td><td>N</td><td>Y</td><td>N</td><td>Y(Default)</td></tr><tr><td>SERIALIZABLE：表锁</td><td>N</td><td>N</td><td>N</td><td>Y</td><td>Y</td></tr></tbody></table></li></ul></li><li><p>并发安全：从上到下递增（除开 READ_UNCOMMITTED）</p></li><li><p>运行效率：从上到下递减（除开 READ_UNCOMMITTED）</p></li><li><p>ORACLE 使用多版本比对的方式，解决不可重复读的问题</p></li><li><p>ISOLATION_DEFAULT：调用不同数据库设置的默认隔离属性</p><ul><li>Mysql 查看默认隔离级别</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> @<span class="hljs-variable">@transaction</span>_isolation;<br></code></pre></td></tr></table></figure><ul><li>Oracle</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s.sid, s.serial#,<br><br>　　<span class="hljs-keyword">CASE</span> BITAND(t.flag, <span class="hljs-built_in">POWER</span>(<span class="hljs-number">2</span>, <span class="hljs-number">28</span>))<br>　　　　<span class="hljs-keyword">WHEN</span> <span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;READ COMMITTED&#x27;</span><br>　　　　<span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;SERIALIZABLE&#x27;</span><br>　　<span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> isolation_level<br><span class="hljs-keyword">FROM</span> v$transaction t<br><span class="hljs-keyword">JOIN</span> v$session s <span class="hljs-keyword">ON</span> t.addr <span class="hljs-operator">=</span> s.taddr <span class="hljs-keyword">AND</span> s.sid <span class="hljs-operator">=</span> sys_context(<span class="hljs-string">&#x27;USERENV&#x27;</span>, <span class="hljs-string">&#x27;SID&#x27;</span>);<br></code></pre></td></tr></table></figure><ul><li>隔离属性实战建议<ul><li>推荐使用指定默认值</li><li>实战中并发比较少，真正遇到并发问题，可以使用乐观锁</li></ul></li></ul><h3 id="2、传播属性"><a href="#2、传播属性" class="headerlink" title="2、传播属性"></a>2、传播属性</h3><blockquote><p>事务解决嵌套问题的特征</p><p>问题：大事务中有很多小事务，彼此影响，最终导致外部大事务丧失事务原子性</p></blockquote><table><thead><tr><th>传播属性的值</th><th>外部不存在事务</th><th>外部存在事务</th><th>备注</th></tr></thead><tbody><tr><td>REQUIRED(default)</td><td>开启新的事务</td><td>融合到外部事务中</td><td>增删改方法</td></tr><tr><td>SUPPORTS</td><td>不开启新的事务</td><td>融合到外部事务中</td><td>查询</td></tr><tr><td>REQUIRES_NEW</td><td>开启新的事务</td><td>挂起外部事务，创建新事务，执行完之后再执行外部事务</td><td>日志记录方法</td></tr><tr><td>NOT_SUPPORTED</td><td>不开启新的事务</td><td>挂起外部事务</td><td>不常用</td></tr><tr><td>NEVER</td><td>不开启新的事务</td><td>抛出异常</td><td>不常用</td></tr><tr><td>MANDATORY</td><td>抛出异常</td><td>融合到外部事务中</td><td>不常用</td></tr></tbody></table><ul><li>使用方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional</span>=Propagation.REQUIRED<br></code></pre></td></tr></table></figure><ul><li>注意<ul><li>增删改不用写传播属性，用默认值即可</li></ul></li></ul><h3 id="3、只读属性"><a href="#3、只读属性" class="headerlink" title="3、只读属性"></a>3、只读属性</h3><blockquote><p>针对只进行查询操作的业务方法，可以加入只读属性，提高运行效率</p><p>默认值为 false</p></blockquote><ul><li>使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">readonly=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="4、超时属性"><a href="#4、超时属性" class="headerlink" title="4、超时属性"></a>4、超时属性</h3><blockquote><p>指定事务等待的最长时间</p><p>为什么事务进行等待？</p><p>答：事务访问数据时，如果有其他事务正在操作事务，此时需要等待</p></blockquote><ul><li>等待时间，单位为秒</li><li>使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional</span>=(timeout=<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><ul><li>default &#x3D; -1</li><li>最终数据由数据库指定</li></ul><h3 id="5、异常属性"><a href="#5、异常属性" class="headerlink" title="5、异常属性"></a>5、异常属性</h3><blockquote><p>Spring 事务处理过程中，默认异常处理</p><p>RuntimeException: 回滚</p><p>Exception 及其子类：提交</p></blockquote><ul><li>处理方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(rollbackFor = &#123;java.lang.Exception, xxx, xxx&#125;)</span><br>noRollbackFor = &#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="3、事务属性总结"><a href="#3、事务属性总结" class="headerlink" title="3、事务属性总结"></a>3、事务属性总结</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 隔离属性 默认值<br><span class="hljs-bullet">2.</span> 传播属性 Required(默认值) 增删改 Supports 查询操作<br><span class="hljs-bullet">3.</span> 只读属性 false(默认值) 增删改 true 查询操作<br><span class="hljs-bullet">4.</span> 超时属性 -1<br><span class="hljs-bullet">5.</span> 异常属性 默认值<br><br>增删改操作：@Transactional<br>查询操作 @Transactional(propagation=Propagation.SUPPORTS, readonly=true)<br></code></pre></td></tr></table></figure><h2 id="4、基于标签的事务配置方式"><a href="#4、基于标签的事务配置方式" class="headerlink" title="4、基于标签的事务配置方式"></a>4、基于标签的事务配置方式</h2><ul><li>比较麻烦</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--事务属性--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;texAdvice&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;dataSourceTransactionManager&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--等效于@Transactional public void register()--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;register&quot;</span> <span class="hljs-attr">isolation</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;login&quot;</span> <span class="hljs-attr">isolation</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--所有以modify属性开头的方法都这么配置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;modify*&quot;</span> <span class="hljs-attr">isolation</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:method</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--service包下所有方法--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pc&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.lqs.service..*.*(..))&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pc&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="十五、Spring-整合-mvc"><a href="#十五、Spring-整合-mvc" class="headerlink" title="十五、Spring 整合 mvc"></a>十五、Spring 整合 mvc</h1><h2 id="1、Spring-整合-MVC-核心思路"><a href="#1、Spring-整合-MVC-核心思路" class="headerlink" title="1、Spring 整合 MVC 核心思路"></a>1、Spring 整合 MVC 核心思路</h2><h3 id="1、准备工厂"><a href="#1、准备工厂" class="headerlink" title="1、准备工厂"></a>1、准备工厂</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> web 开发如何创建工厂<br>   ApplicationContext ctx = new ClassPathXmlApplicationContext(&quot;/applicationContext.xml&quot;)<br>   //改成 WebXmlApplicationContext<br><span class="hljs-bullet">2.</span> 如何保证工厂唯一同时被使用<br>   被共用：Web request | session | ServletContext | application<br>   工厂存储在 ServletContext 作用域中<br>   ServletContext.setAttribute(&quot;xxxx&quot;,ctx);<br>   唯一性：借用 ServletContextListener 创建工厂在此执行<br><span class="hljs-bullet">3.</span> 总结<br>   ServletContextListener 中执行：<br>   ApplicationContext ctx = new WebXmlApplicationContext(&quot;/applicationContext.xml&quot;)<br>   ServletContext.setAttribute(&quot;xxxx&quot;,ctx);<br><span class="hljs-bullet">4.</span> spring 整合一个 contextLoaderListener<br>   1、创建工厂<br>   2、把工厂存在 ServletContext 中<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-comment">// Store context in local instance variable, to guarantee that</span><br>  <span class="hljs-comment">// it is available on ServletContext shutdown.</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.context == <span class="hljs-literal">null</span>) &#123;<br><br>    <span class="hljs-built_in">this</span>.context = createWebApplicationContext(servletContext);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.context <span class="hljs-keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;<br>    <span class="hljs-type">ConfigurableWebApplicationContext</span> <span class="hljs-variable">cwac</span> <span class="hljs-operator">=</span> (ConfigurableWebApplicationContext) <span class="hljs-built_in">this</span>.context;<br>    <span class="hljs-keyword">if</span> (!cwac.isActive()) &#123;<br>      <span class="hljs-comment">// The context has not yet been refreshed -&gt; provide services such as</span><br>      <span class="hljs-comment">// setting the parent context, setting the application context id, etc</span><br>      <span class="hljs-keyword">if</span> (cwac.getParent() == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// The context instance was injected without an explicit parent -&gt;</span><br>        <span class="hljs-comment">// determine parent for root web application context, if any.</span><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> loadParentContext(servletContext);<br>        cwac.setParent(parent);<br>      &#125;<br>      configureAndRefreshWebApplicationContext(cwac, servletContext);<br>    &#125;<br>  &#125;<br><br>servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, <span class="hljs-built_in">this</span>.context);<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--contextLoaderListener使用方式--&gt;</span><br>在web.xml<br><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--指定配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="十六、注解开发"><a href="#十六、注解开发" class="headerlink" title="十六、注解开发"></a>十六、注解开发</h1><blockquote><p>注解的作用</p><p>替换 xml 配置，简化配置</p><p>替换接口，实现调用双方的契约性质</p><p>对已添加的注解不满意，可以通过配置文件进行覆盖</p></blockquote><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FuxWMZyls54ONJUfhliX4zN3f17p.png"></p><h2 id="1、对象创建注解"><a href="#1、对象创建注解" class="headerlink" title="1、对象创建注解"></a>1、对象创建注解</h2><ul><li>搭建开发环境</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.lqs&quot;</span>/&gt;</span><br>作用：让spring框架扫描设置包内的注解，使其生效<br></code></pre></td></tr></table></figure><ul><li><a href="/Component">@Component </a></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown">作用：替换原有 spring 配置文件的<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span>&gt;</span></span>标签<br>具体：id 默认值为类首字母小写<br>class 属性为类全限定类名<br>注意：若配置文件需要覆盖注解的值，id 值必须相同<br>衍生注解：<br>@Repository：用在持久层<br>@Service：用在业务层<br>@Controller：用在控制器层<br></code></pre></td></tr></table></figure><ul><li><a href="/Scope">@Scope </a><br>确定粒度</li><li>@PostConstruct：初始化<br>@PreDestroy：销毁<br>JSR520 提供</li><li><a href="/Lazy">@Lazy </a><br>延迟创建单实例对象</li></ul><h2 id="2、注入相关注解"><a href="#2、注入相关注解" class="headerlink" title="2、注入相关注解"></a>2、注入相关注解</h2><h3 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired "></a><a href="/Autowired">@Autowired </a></h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 基于类型注入：注入对象类型必须与目标成员变量相同或者其子类<br><span class="hljs-bullet">-</span> 配合@Qualifier(&quot;id&quot;)<br>  注入对象的 id 值必须与 Qualifier 注解中设置的名字相同<br><span class="hljs-bullet">-</span> 放置位置<br>  a、放在 set 方法上<br>  b、直接放在成员变量上，spring 通过反射直接对成员变量进行注入<br></code></pre></td></tr></table></figure><h3 id="Resource"><a href="#Resource" class="headerlink" title="@Resource "></a><a href="/Resource">@Resource </a></h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> JSR250 提供的<br><span class="hljs-bullet">-</span> 基于名字进行注入<br><span class="hljs-bullet">-</span> 如果名字没有配对成功，会继续按照类型进行注入<br></code></pre></td></tr></table></figure><h3 id="Inject-了解即可"><a href="#Inject-了解即可" class="headerlink" title="@Inject(了解即可)"></a>@Inject(了解即可)</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 与@Autowired 完全一致，需要引入 jar 才可以使用<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span></span>javax.inject<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span></span>javax.inject<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span></span>1<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="Value"><a href="#Value" class="headerlink" title="@Value "></a><a href="/Value">@Value </a></h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 作用：注入 jdk 基本类型<br><span class="hljs-bullet">-</span> 1、设置 xxx.properties<br>  id = 10<br>  name = lqs<br><span class="hljs-bullet">-</span> 2、spring 引入配置文件<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;xxx.properties&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">-</span> <span class="hljs-attr">3</span>、<span class="hljs-attr">使用</span></span></span><br><span class="hljs-tag"><span class="language-xml">  @<span class="hljs-attr">Value</span>(&quot;<span class="hljs-attr">id</span>&quot;)</span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">private</span> <span class="hljs-attr">int</span> <span class="hljs-attr">id</span>;</span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">-</span> <span class="hljs-attr">注意</span>：</span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">-</span> <span class="hljs-attr">不能用在静态变量上</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">-</span> <span class="hljs-attr">不能给集合类型注入</span>（<span class="hljs-attr">只能用</span> <span class="hljs-attr">XML</span> <span class="hljs-attr">配置</span>，<span class="hljs-attr">新格式</span> <span class="hljs-attr">YML</span> <span class="hljs-attr">可以注入</span>）</span></span><br></code></pre></td></tr></table></figure><h3 id="PropertySource"><a href="#PropertySource" class="headerlink" title="@PropertySource "></a><a href="/PropertySource">@PropertySource </a></h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 替换下面<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;xxx.properties&quot;</span></span></span><br></code></pre></td></tr></table></figure><h2 id="3、注解扫描详解"><a href="#3、注解扫描详解" class="headerlink" title="3、注解扫描详解"></a>3、注解扫描详解</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">&lt;context:component-scan: base-package=&quot;&quot;/&gt;<br>当前包及其子包，但有时候需要排除<br></code></pre></td></tr></table></figure><h3 id="1、排除方式"><a href="#1、排除方式" class="headerlink" title="1、排除方式"></a>1、排除方式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--type类型：</span><br><span class="hljs-comment">assignable：排除特定类型，不进行扫描</span><br><span class="hljs-comment">annotation：排除特定注解</span><br><span class="hljs-comment">aspectj：切入点表达式实现</span><br><span class="hljs-comment">regex：正则表达式实现（了解即可）</span><br><span class="hljs-comment">custom：自定义，框架底层开发（了解即可）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">可以使用叠加策略</span><br><span class="hljs-comment">--&gt;</span><br>&lt;context:component-scan: base-package=&quot;&quot;<br>       use-default-filters=&quot;false&quot;&gt; //是否使用默认过滤器<br>  <span class="hljs-tag">&lt;<span class="hljs-name">context:exclude-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br>&lt;/context:component-scan:&gt;<br></code></pre></td></tr></table></figure><h3 id="2、包含方式"><a href="#2、包含方式" class="headerlink" title="2、包含方式"></a>2、包含方式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--type类型：</span><br><span class="hljs-comment">assignable：排除特定类型，进行扫描</span><br><span class="hljs-comment">annotation：排除特定注解</span><br><span class="hljs-comment">aspectj：切入点表达式实现</span><br><span class="hljs-comment">regex：正则表达式实现（了解即可）</span><br><span class="hljs-comment">custom：自定义，框架底层开发（了解即可）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">可以使用叠加策略</span><br><span class="hljs-comment">--&gt;</span><br>&lt;context:component-scan: base-package=&quot;&quot;&gt;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">context:include-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br>&lt;/context:component-scan:&gt;<br></code></pre></td></tr></table></figure><h2 id="4、注解开发思考"><a href="#4、注解开发思考" class="headerlink" title="4、注解开发思考"></a>4、注解开发思考</h2><ul><li>配置互通</li></ul><h2 id="5、高级注解"><a href="#5、高级注解" class="headerlink" title="5、高级注解"></a>5、高级注解</h2><h3 id="Bean"><a href="#Bean" class="headerlink" title="@Bean "></a><a href="/Bean">@Bean </a></h3><blockquote><p>替代 xml 配置中标签</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span> 创建复杂对象时<br>先自定义ConnectionFactorybean实现FactoryBean接口，在配置类中直接调用方法即可<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConnectionFactoryBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;Connection&gt;&#123;<br>  <span class="hljs-keyword">public</span> Connection <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, user, password);<br>    <span class="hljs-keyword">return</span> con;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType()&#123;<br>    <span class="hljs-keyword">return</span> Connection.class;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSingleton</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>  &#125;<br>&#125;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppConfig</span>&#123;<br>  <span class="hljs-meta">@Bean(&quot;connection&quot;)</span><span class="hljs-comment">//自定义id</span><br>  <span class="hljs-meta">@Scope(&quot;singleton | prototype&quot;)</span><span class="hljs-comment">//指定创建次数</span><br>  <span class="hljs-keyword">public</span> Connection <span class="hljs-title function_">conn</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-type">ConnectionFactoryBean</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactoryBean</span>();<br>      conn = factory.getObject();<br>    &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>      e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> conn;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-number">2.</span> 自定义类型注入<br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> UserDao <span class="hljs-title function_">userDao</span><span class="hljs-params">()</span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>();<br>&#125;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> UserService <span class="hljs-title function_">userService</span><span class="hljs-params">(UserDao userDao)</span>&#123;<br>  <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>();<br>  userService,setUserDao(userDao);<br>  <span class="hljs-keyword">return</span> userService;<br>&#125;<br><br><span class="hljs-comment">//另一种写法</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> UserDao <span class="hljs-title function_">userDao</span><span class="hljs-params">()</span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>();<br>&#125;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> UserService <span class="hljs-title function_">userService</span><span class="hljs-params">(UserDao userDao)</span>&#123;<br>  <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>();<br>  userService,setUserDao(userDao());<span class="hljs-comment">//直接调用方法</span><br>  <span class="hljs-keyword">return</span> userService;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>底层原理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">底层通过cglib进行功能增强：如单例/多例模式<br></code></pre></td></tr></table></figure><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration "></a><a href="/Configuration">@Configuration </a></h3><blockquote><p>代替 xml 配置形式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AppConfig</span>&#123;&#125;<br><span class="hljs-comment">//此时不再需要xml配置文件，获取ApplicationContext换一种方式</span><br><br><span class="hljs-comment">//指定bean所在路径</span><br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(AppConfig.class)<br><span class="hljs-comment">//指定bean所在路径</span><br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(<span class="hljs-string">&quot;com.lqs.config&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>注意细节</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">基于注解开发，不能集成 Log4j，使用 logback<br><br>resources 目录下，新建 logback.xml<br></code></pre></td></tr></table></figure><ul><li>@Configuration 本质</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">本质：@Component 注解的衍生注解<br></code></pre></td></tr></table></figure><h3 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan "></a><a href="/ComponentScan">@ComponentScan </a></h3><blockquote><p>代替&lt;context:component-scan base-package&#x3D;””&#x2F;&gt;<br>用在@Configuration 注解上面</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(basePackages = &quot;com.lqs&quot;</span><br><span class="hljs-meta">     useDefaultFilters = false//默认为true，可扫描@Component、@Repository、@Service 和 @Controller 标注的类</span><br><span class="hljs-meta">     excludefilters = &#123;</span><br><span class="hljs-meta">  //排除类型,可叠加使用，一共5种，参考标签形式</span><br><span class="hljs-meta">  //不扫描Service注解</span><br><span class="hljs-meta">  @ComponentScan.Filter(type = Filter.ANNOTATION, value = &#123;Service.class&#125;)</span><br><span class="hljs-meta">  @ComponentScan.Filter(type = Filter.ASPECTJ, pattern = &#123;&quot;com.lqs..*&quot;&#125;)</span><br><span class="hljs-meta">  @ComponentScan.Filter(type = Filter.ASSIGNABLE_TYPE, value = &#123;&#125;)</span><br><span class="hljs-meta">  @ComponentScan.Filter(type = Filter.REGEX, pattern = &#123;&#125;)</span><br><span class="hljs-meta">  @ComponentScan.Filter(type = Filter.CUSTOM, value = &#123;&#125;)</span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">&#125;)</span><br></code></pre></td></tr></table></figure><h2 id="6、多配置方式"><a href="#6、多配置方式" class="headerlink" title="6、多配置方式"></a>6、多配置方式</h2><ul><li>配置优先级</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">bean 标签 &gt; @Bean &gt; @Component 及衍生注解，可以进行覆盖<br></code></pre></td></tr></table></figure><h2 id="7、整合多个配置信息"><a href="#7、整合多个配置信息" class="headerlink" title="7、整合多个配置信息"></a>7、整合多个配置信息</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">模块化开发，便于维护<br></code></pre></td></tr></table></figure><ul><li>方式一</li></ul><p>![](&#x2F;Users&#x2F;lqs&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20201119172948238.png)</p><ul><li>方式二</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FhcOAlRUuENCFZmQHSRX0kwh7TKY.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">等价于<span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><ul><li>方式三</li></ul><p>在工厂创建时，指定多个配置 Bean 的 class 对象（了解即可）</p><ul><li>跨配置注入</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Import(AppConfig2.class)</span><br><span class="hljs-meta">@ImportResouce(&quot;application.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppConfig1</span> &#123;<br><br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> UserDao userDao;<br><br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-keyword">public</span> userService <span class="hljs-title function_">userService</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserService</span>();<br>    userService.setUserDao(userDao);<br>    <span class="hljs-keyword">return</span> userService;<br>  &#125;<br>&#125;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppConfig2</span> &#123;<br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-keyword">public</span> userService <span class="hljs-title function_">userService</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDao</span>();<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//application.xml内容</span><br>&lt;bean id=<span class="hljs-string">&quot;user2&quot;</span> class=<span class="hljs-string">&quot;com.lqs.User2&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><h2 id="8、四维一体开发思想"><a href="#8、四维一体开发思想" class="headerlink" title="8、四维一体开发思想"></a>8、四维一体开发思想</h2><blockquote><p>基于 schema</p><p>基于特定功能注解</p><p>基于原始</p><p>基于@Bean 注解</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">例子：<br><br><span class="hljs-bullet">1.</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span>/&gt;</span></span><br><span class="hljs-bullet">2.</span> @PropertySource<br><span class="hljs-bullet">3.</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span></span><br><span class="hljs-bullet">4.</span> @Bean<br></code></pre></td></tr></table></figure><h2 id="9、纯注解-AOP"><a href="#9、纯注解-AOP" class="headerlink" title="9、纯注解 AOP"></a>9、纯注解 AOP</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect</span>&#123;<br> <span class="hljs-meta">@Around(&quot;execution(* login(..))&quot;)</span><br> <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint jointpoint)</span> <span class="hljs-keyword">throws</span> Throwable&#123;<br>   sout(<span class="hljs-string">&quot;---around-log&quot;</span>);<br>   <span class="hljs-type">Object</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> jointPoint.proceed();<br>   <span class="hljs-keyword">return</span> ret;<br> &#125;<br>&#125;<br><br>- 配置文件中<br>&lt;aop:aspectj-autoproxy/&gt;<br><span class="hljs-meta">@EnableAspectjAutoProxy</span><br></code></pre></td></tr></table></figure><ul><li>细节分析</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span> 代理创建方式的切换：JDK Cglib<br>  &lt;aop:aspectj-autoproxy proxy-target-class=<span class="hljs-literal">true</span> | <span class="hljs-literal">false</span>/&gt;<br><span class="hljs-meta">@EnableAspectjAutoProxy(proxyTargetClass)</span><br><span class="hljs-number">2.</span> SpringBoot AOP开发方式<br><span class="hljs-meta">@EnableAspectjAutoProxy</span>已经配置好了<br><br>  <span class="hljs-number">1</span>、原始对象<br>  <span class="hljs-meta">@Service</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserService</span>()&#123;<br><br>  &#125;<br>  <span class="hljs-number">2</span>、创建切面类<br>    <span class="hljs-meta">@Aspect</span><br>    <span class="hljs-meta">@Component</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect</span> &#123;<br>     <span class="hljs-meta">@Around(&quot;execution(* login(..))&quot;)</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint jointpoint)</span> <span class="hljs-keyword">throws</span> Throwable&#123;<br>    sout(<span class="hljs-string">&quot;---around-log&quot;</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> jointPoint.proceed();<br>    <span class="hljs-keyword">return</span> ret;<br>  &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="10、Mybatis-纯注解"><a href="#10、Mybatis-纯注解" class="headerlink" title="10、Mybatis 纯注解"></a>10、Mybatis 纯注解</h2><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fs103ej6gqUO0shgb9RilP7DwVfw.png"></p><ul><li>MapperLocations 编码通配写法</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fqu_roer0mdAfsKbdrfTiHabwsE6.png"></p><h2 id="11、纯注解事务编程"><a href="#11、纯注解事务编程" class="headerlink" title="11、纯注解事务编程"></a>11、纯注解事务编程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span> 原始对象 XXXService<br>  &lt;bean id=<span class="hljs-string">&quot;userService&quot;</span> class=<span class="hljs-string">&quot;com.lqs.service.UserService&quot;</span>&gt;<br>    &lt;property name=<span class="hljs-string">&quot;userDao&quot;</span> ref=<span class="hljs-string">&quot;userDao&quot;</span>/&gt;<br>  &lt;/bean&gt;<br><span class="hljs-number">2.</span> 额外功能<br>    &lt;bean class=<span class="hljs-string">&quot;org.springframe.jdbc.dataSource.DataSourceTransactionManager&quot;</span><br>      id=<span class="hljs-string">&quot;dataSourceTransactional&quot;</span>&gt;<br>      &lt;property name=<span class="hljs-string">&quot;dataSource&quot;</span> ref=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;<br>    &lt;/bean&gt;<br><span class="hljs-number">3.</span> 事务属性<br>  <span class="hljs-meta">@Transactional</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserService</span> &#123;<br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>  &#125;<br><span class="hljs-number">4.</span> 基于schema的事务配置<br>  &lt;tx:annotation-driven transaction-manager=<span class="hljs-string">&quot;dataSourceTransactionManager&quot;</span><br></code></pre></td></tr></table></figure><h1 id="十七、Spring-使用-YML"><a href="#十七、Spring-使用-YML" class="headerlink" title="十七、Spring 使用 YML"></a>十七、Spring 使用 YML</h1><blockquote><p>YML(YAML)是一种新形式的配置文件，比 XML 简单，比 properties 更强大</p><p>properties 缺点：</p><p>过于繁琐，无法表达内在联系</p><p>无法表达对象、集合类型</p></blockquote><h2 id="1、语法简介"><a href="#1、语法简介" class="headerlink" title="1、语法简介"></a>1、语法简介</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 1、基本语法</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">lqs</span><br><span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br><span class="hljs-comment"># 2、对象语法</span><br><span class="hljs-attr">user:</span><br><span class="hljs-attr">id:</span> <span class="hljs-number">1</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">lqs</span><br><span class="hljs-attr">address:</span> <span class="hljs-string">wuhan</span><br><span class="hljs-comment"># 3、定义集合</span><br><span class="hljs-attr">service:</span><br><span class="hljs-bullet">-</span> <span class="hljs-number">111</span><br><span class="hljs-bullet">-</span> <span class="hljs-number">222</span><br></code></pre></td></tr></table></figure><h2 id="2、Spring-整合-YML"><a href="#2、Spring-整合-YML" class="headerlink" title="2、Spring 整合 YML"></a>2、Spring 整合 YML</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 准备配置文件 xxx.yml<br>   init: begin<br>   name: lqs<br><span class="hljs-bullet">2.</span> 读取 yml 转换成 properties<br>   YamlPropertiesFactoryBean.setResources(yml 路径)<br>   new ClassPathResource();<br>   YamlPropertiesFactoryBean.getObject() ----&gt; properties<br><span class="hljs-bullet">3.</span> 应用 propertySourcePlaceholderConfigurer<br>   PropertySourcePlaceholderConfigurer.setProperties();<br></code></pre></td></tr></table></figure><h2 id="3、Spring-与-YML-集成编码"><a href="#3、Spring-与-YML-集成编码" class="headerlink" title="3、Spring 与 YML 集成编码"></a>3、Spring 与 YML 集成编码</h2><ul><li>环境搭建</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.yml<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>snakeyaml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.23<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-comment">&lt;!--最低1.18--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>编码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">2.</span> 配置bean完成yml读取与PropertySourcePlacrholderConfigurer的创建<br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(basePackages = &quot;com.lqs.yml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">YmlAutoConfiguration</span>&#123;<br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-keyword">public</span> PropertySourcePlacrholderConfigurer <span class="hljs-title function_">configure</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">YamlPropertySourceFactoryBean</span> <span class="hljs-variable">ymlbean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">YamlPropertySourceFactoryBean</span>();<br>    ymlBean.setResources(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(<span class="hljs-string">&quot;xxx.yml&quot;</span>))<br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> yamlPropertiesFactoryBean.getObject();<br>    <span class="hljs-type">PropertySourcePlacrholderConfigurer</span> <span class="hljs-variable">configurer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertySourcePlacrholderConfigurer</span>();<br>    configurer.setProperties(properties);<br>    <span class="hljs-keyword">return</span> configurer;<br>  &#125;<br>&#125;<br><br><span class="hljs-number">3.</span> 类加入<span class="hljs-meta">@Value</span>注解<br><span class="hljs-meta">@Value(&quot;$&#123;account.name&#125;&quot;)</span><br><span class="hljs-keyword">private</span> String name;<br></code></pre></td></tr></table></figure><h2 id="4、注意的问题"><a href="#4、注意的问题" class="headerlink" title="4、注意的问题"></a>4、注意的问题</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 1、集合处理的问题</span><br><span class="hljs-comment"># SpringEL表达式解决</span><br><span class="hljs-attr">list:</span><br><span class="hljs-number">111</span><span class="hljs-string">,2222</span><br><span class="hljs-string">@Value(&quot;#&#123;&#x27;$&#123;list&#125;&#x27;.split(&#x27;,&#x27;)&#125;&quot;)</span><br><br><span class="hljs-comment"># 2、对象类型配置太繁琐</span><br><span class="hljs-attr">account:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">lqs</span><br><span class="hljs-attr">age:</span> <span class="hljs-number">18</span><br><span class="hljs-string">@Value(&quot;$&#123;account.name&#125;&quot;)</span><br><span class="hljs-string">private</span> <span class="hljs-string">String</span> <span class="hljs-string">name;</span><br><br><span class="hljs-string">@Value(&quot;$&#123;account.age&#125;&quot;);</span><br><span class="hljs-string">private</span> <span class="hljs-string">int</span> <span class="hljs-string">age;</span><br><br><span class="hljs-comment"># SpringBoot定义@ConfigurationProperties注解解决该问题</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>RabbitMQ教程</title>
    <link href="/2022/08/13/yuque/RabbitMQ%E6%95%99%E7%A8%8B/"/>
    <url>/2022/08/13/yuque/RabbitMQ%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>RabbitMQ 是目前非常热门的一款消息中间件，不管是互联网大厂还是中小企业都在大量使用。作为一名合格的开发者，有必要对 RabbitMQ 有所了解，本文是 RabbitMQ 快速入门文章，主要内容包括 RabbitMQ 是什么、RabbitMQ 核心概念、常用交换器类型、用 Docker 安装 RabbitMQ 等</p><span id="more"></span><h2 id="一、MQ-引言"><a href="#一、MQ-引言" class="headerlink" title="一、MQ 引言"></a>一、MQ 引言</h2><h3 id="1、什么是-MQ"><a href="#1、什么是-MQ" class="headerlink" title="1、什么是 MQ"></a>1、什么是 MQ</h3><p><code>MQ</code>(Message Quene) :   翻译为 <code>消息队列</code>,通过典型的 <code>生产者</code>和 <code>消费者</code>模型,生产者不断向消息队列中生产消息，消费者不断的从队列中获取消息。因为消息的生产和消费都是异步的，而且只关心消息的发送和接收，没有业务逻辑的侵入,轻松的实现系统间解耦。别名为 <code>消息中间件</code> 通过利用高效可靠的消息传递机制进行平台无关的数据交流，并基于数据通信来进行分布式系统的集成。</p><h3 id="2、MQ-有哪些"><a href="#2、MQ-有哪些" class="headerlink" title="2、MQ 有哪些"></a>2、MQ 有哪些</h3><p>当今市面上有很多主流的消息中间件，如老牌的 <code>ActiveMQ</code>、<code>RabbitMQ</code>，炙手可热的 <code>Kafka</code>，阿里巴巴自主开发 <code>RocketMQ</code>等。</p><h3 id="3、不同-MQ-特点"><a href="#3、不同-MQ-特点" class="headerlink" title="3、不同 MQ 特点"></a>3、不同 MQ 特点</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1.ActiveMQ</span><br><br><span class="hljs-code">    ActiveMQ 是Apache出品，最流行的，能力强劲的开源消息总线。它是一个完全支持JMS规范的的消息中间件。丰富的API,多种集群架构模式让ActiveMQ在业界成为老牌的消息中间件,在中小型企业颇受欢迎!</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 2.Kafka</span><br><br><span class="hljs-code">    Kafka是LinkedIn开源的分布式发布-订阅消息系统，目前归属于Apache顶级项目。Kafka主要特点是基于Pull的模式来处理消息消费，</span><br><span class="hljs-code">    追求高吞吐量，一开始的目的就是用于日志收集和传输。0.8版本开始支持复制，不支持事务，对消息的重复、丢失、错误没有严格要求，</span><br><span class="hljs-code">    适合产生大量数据的互联网服务的数据收集业务。</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 3.RocketMQ</span><br><br><span class="hljs-code">    RocketMQ是阿里开源的消息中间件，它是纯Java开发，具有高吞吐量、高可用性、适合大规模分布式系统应用的特点。RocketMQ思路起</span><br><span class="hljs-code">    源于Kafka，但并不是Kafka的一个Copy，它对消息的可靠传输及事务性做了优化，目前在阿里集团被广泛应用于交易、充值、流计算、消</span><br><span class="hljs-code">    息推送、日志流式处理、binglog分发等场景。</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 4.RabbitMQ</span><br><br><span class="hljs-code">    RabbitMQ是使用Erlang语言开发的开源消息队列系统，基于AMQP协议来实现。AMQP的主要特征是面向消息、队列、路由（包括点对点和</span><br><span class="hljs-code">    发布/订阅）、可靠性、安全。AMQP协议更多用在企业系统内对数据一致性、稳定性和可靠性要求很高的场景，对性能和吞吐量的要求还在</span><br><span class="hljs-code">    其次。</span><br></code></pre></td></tr></table></figure><blockquote><p>RabbitMQ 比 Kafka 可靠，Kafka 更适合 IO 高吞吐的处理，一般应用在大数据日志处理或对实时性（少量延迟），可靠性（少量丢数据）要求稍低的场景使用，比如 ELK 日志收集。</p></blockquote><hr><h2 id="2、RabbitMQ-的引言"><a href="#2、RabbitMQ-的引言" class="headerlink" title="2、RabbitMQ 的引言"></a>2、RabbitMQ 的引言</h2><h3 id="1、RabbitMQ"><a href="#1、RabbitMQ" class="headerlink" title="1、RabbitMQ"></a>1、RabbitMQ</h3><blockquote><p>基于 <code>AMQP</code>协议，erlang 语言开发，是部署最广泛的开源消息中间件,是最受欢迎的开源消息中间件之一。</p></blockquote><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FqgarlwIeL_7yc5GYwLdysfH81x9.png"></p><p><code>官网</code>: <a href="https://www.rabbitmq.com/">https://www.rabbitmq.com/</a></p><p><code>官方教程</code>: <a href="https://www.rabbitmq.com/#getstarted">https://www.rabbitmq.com/#getstarted</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># AMQP 协议</span><br><br>AMQP（advanced message queuing protocol）`在 2003 年时被提出，最早用于解决金融领不同平台之间的消息传递交互问题。顾名思义，AMQP 是一种协议，更准确的说是一种 binary wire-level protocol（链接协议）。这是其和 JMS 的本质差别，AMQP 不从 API 层进行限定，而是直接定义网络交换的数据格式。这使得实现了 AMQP 的 provider 天然性就是跨平台的。以下是 AMQP 协议模型:<br></code></pre></td></tr></table></figure><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FkgkP5RtgTlhgnHekFBScXAQPgkN.png"></p><h3 id="2、RabbitMQ-的安装"><a href="#2、RabbitMQ-的安装" class="headerlink" title="2、RabbitMQ 的安装"></a>2、RabbitMQ 的安装</h3><h4 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h4><p><code>官网下载地址</code>: <a href="https://www.rabbitmq.com/download.html">https://www.rabbitmq.com/download.html</a><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fj3bvEP-HSwIpUHuPTMXWza3TR1-.png"></p><blockquote><p><code>最新版本</code>: 3.7.18</p></blockquote><h4 id="2、下载的安装包"><a href="#2、下载的安装包" class="headerlink" title="2、下载的安装包"></a>2、下载的安装包<img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fp7lMTaNkDvHeBE__gQKIubDlG9A.png"></h4><blockquote><p><code>注意</code>:这里的安装包是 centos7 安装的包</p></blockquote><h4 id="3、安装步骤"><a href="#3、安装步骤" class="headerlink" title="3、安装步骤"></a>3、安装步骤</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1.将 rabbitmq 安装包上传到 linux 系统中</span><br><br><span class="hljs-code">    erlang-22.0.7-1.el7.x86_64.rpm</span><br><span class="hljs-code">    rabbitmq-server-3.7.18-1.el7.noarch.rpm</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 2.安装 Erlang 依赖包</span><br><br><span class="hljs-code">    rpm -ivh erlang-22.0.7-1.el7.x86_64.rpm</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 3.安装 RabbitMQ 安装包(需要联网)</span><br><br><span class="hljs-code">    yum install -y rabbitmq-server-3.7.18-1.el7.noarch.rpm</span><br><span class="hljs-code">    注意:默认安装完成后配置文件模板在:/usr/share/doc/rabbitmq-server-3.7.18/rabbitmq.config.example目录中,需要</span><br><span class="hljs-code">    将配置文件复制到/etc/rabbitmq/目录中,并修改名称为rabbitmq.config</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 4.复制配置文件</span><br><br><span class="hljs-code">    cp /usr/share/doc/rabbitmq-server-3.7.18/rabbitmq.config.example /etc/rabbitmq/rabbitmq.config</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 5.查看配置文件位置</span><br><br><span class="hljs-code">    ls /etc/rabbitmq/rabbitmq.config</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 6.修改配置文件(参见下图:)</span><br><br><span class="hljs-code">    vim /etc/rabbitmq/rabbitmq.config</span><br></code></pre></td></tr></table></figure><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FqAIjaE8mZbbt0LJhm4aYZ2NgFAp.png"></p><p>将上图中配置文件中红色部分去掉 <code>%%</code>,以及最后的 <code>,</code>逗号 修改为下图:</p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fs3_li5zRr_sUJNntVgaYgsFkd30.png"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 7.执行如下命令,启动 rabbitmq 中的插件管理</span><br><br><span class="hljs-code">    rabbitmq-plugins enable rabbitmq_management</span><br><span class="hljs-code"></span><br><span class="hljs-code">    出现如下说明:</span><br><span class="hljs-code">    Enabling plugins on node rabbit@localhost:</span><br><span class="hljs-code">    rabbitmq_management</span><br><span class="hljs-code">    The following plugins have been configured:</span><br><span class="hljs-code">      rabbitmq_management</span><br><span class="hljs-code">      rabbitmq_management_agent</span><br><span class="hljs-code">      rabbitmq_web_dispatch</span><br><span class="hljs-code">    Applying plugin configuration to rabbit@localhost...</span><br><span class="hljs-code">    The following plugins have been enabled:</span><br><span class="hljs-code">      rabbitmq_management</span><br><span class="hljs-code">      rabbitmq_management_agent</span><br><span class="hljs-code">      rabbitmq_web_dispatch</span><br><span class="hljs-code"></span><br><span class="hljs-code">    set 3 plugins.</span><br><span class="hljs-code">    Offline change; changes will take effect at broker restart.</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 8.启动 RabbitMQ 的服务</span><br><br><span class="hljs-code">    systemctl start rabbitmq-server</span><br><span class="hljs-code">    systemctl restart rabbitmq-server</span><br><span class="hljs-code">    systemctl stop rabbitmq-server</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 9.查看服务状态(见下图:)</span><br><br><span class="hljs-code">    systemctl status rabbitmq-server</span><br><span class="hljs-code"></span><br>● rabbitmq-server.service - RabbitMQ broker<br>Loaded: loaded (/usr/lib/systemd/system/rabbitmq-server.service; disabled; vendor preset: disabled)<br>Active: active (running) since 三 2019-09-25 22:26:35 CST; 7s ago<br>Main PID: 2904 (beam.smp)<br>Status: &quot;Initialized&quot;<br>CGroup: /system.slice/rabbitmq-server.service<br>├─2904 /usr/lib64/erlang/erts-10.4.4/bin/beam.smp -W w -A 64 -MBas ageffcbf -MHas ageffcbf -<br>MBlmbcs...<br>├─3220 erl<span class="hljs-emphasis">_child_</span>setup 32768<br>├─3243 inet<span class="hljs-emphasis">_gethost 4</span><br><span class="hljs-emphasis">└─3244 inet_</span>gethost 4<br>.........<br></code></pre></td></tr></table></figure><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FgSzNU08RRTBpW1jhsnYEaMI0KSo.png"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 10.关闭防火墙服务</span><br><br><span class="hljs-code">    systemctl disable firewalld</span><br><span class="hljs-code">    Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.</span><br><span class="hljs-code">    Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.</span><br><span class="hljs-code">    systemctl stop firewalld</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 11.访问 web 管理界面</span><br><br><span class="hljs-code">    http://10.15.0.8:15672/</span><br></code></pre></td></tr></table></figure><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FlLSMsBK7NMEaKoLhFcwoktaLT8b.png"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 12.登录管理界面</span><br><br><span class="hljs-code">    username:  guest</span><br><span class="hljs-code">    password:  guest</span><br></code></pre></td></tr></table></figure><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FijT-0KmNR_dNBBWGjVjdQdAzY33.png"></p><hr><h2 id="3-、RabiitMQ-配置"><a href="#3-、RabiitMQ-配置" class="headerlink" title="3.、RabiitMQ 配置"></a>3.、RabiitMQ 配置</h2><h3 id="1、RabbitMQ-管理命令行"><a href="#1、RabbitMQ-管理命令行" class="headerlink" title="1、RabbitMQ 管理命令行"></a>1、RabbitMQ 管理命令行</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1.服务启动相关</span><br><br><span class="hljs-code">    systemctl start|restart|stop|status rabbitmq-server</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 2.管理命令行 用来在不使用 web 管理界面情况下命令操作 RabbitMQ</span><br><br><span class="hljs-code">    rabbitmqctl  help  可以查看更多命令</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 3.插件管理命令行</span><br><br><span class="hljs-code">    rabbitmq-plugins enable|list|disable</span><br></code></pre></td></tr></table></figure><h3 id="2、web-管理界面介绍"><a href="#2、web-管理界面介绍" class="headerlink" title="2、web 管理界面介绍"></a>2、web 管理界面介绍</h3><h4 id="1、overview-概览"><a href="#1、overview-概览" class="headerlink" title="1、overview 概览"></a>1、overview 概览</h4><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FhyHUdvJ82qUjvuqqhZXBUsB1qUF.png"></p><ul><li><code>connections：无论生产者还是消费者，都需要与RabbitMQ建立连接后才可以完成消息的生产和消费，在这里可以查看连接情况</code></li><li><code>channels：通道，建立连接后，会形成通道，消息的投递获取依赖通道。</code></li><li><code>Exchanges：交换机，用来实现消息的路由</code></li><li><code>Queues：队列，即消息队列，消息存放在队列中，等待消费，消费后被移除队列。</code></li></ul><h4 id="2、Admin-用户和虚拟主机管理"><a href="#2、Admin-用户和虚拟主机管理" class="headerlink" title="2、Admin 用户和虚拟主机管理"></a>2、Admin 用户和虚拟主机管理</h4><h5 id="1、-添加用户"><a href="#1、-添加用户" class="headerlink" title="1、 添加用户"></a>1、 添加用户</h5><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fi3VJt7te-qXU7Wexm9BrrqiNs0Z.png"></p><p>上面的 Tags 选项，其实是指定用户的角色，可选的有以下几个：</p><ul><li><code>超级管理员(administrator)</code><br>可登陆管理控制台，可查看所有的信息，并且可以对用户，策略(policy)进行操作。</li><li><code>监控者(monitoring)</code><br>可登陆管理控制台，同时可以查看 rabbitmq 节点的相关信息(进程数，内存使用情况，磁盘使用情况等)</li><li><code>策略制定者(policymaker)</code><br>可登陆管理控制台, 同时可以对 policy 进行管理。但无法查看节点的相关信息(上图红框标识的部分)。</li><li><code>普通管理者(management)</code><br>仅可登陆管理控制台，无法看到节点信息，也无法对策略进行管理。</li><li><code>其他</code><br>无法登陆管理控制台，通常就是普通的生产者和消费者。</li></ul><h5 id="2-、创建虚拟主机"><a href="#2-、创建虚拟主机" class="headerlink" title="2.、创建虚拟主机"></a>2.、创建虚拟主机</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 虚拟主机</span><br><br><span class="hljs-code">    为了让各个用户可以互不干扰的工作，RabbitMQ添加了虚拟主机（Virtual Hosts）的概念。其实就是一个独立的访问路径，不同用户使用不同路径，各自有自己的队列、交换机，互相不会影响。</span><br></code></pre></td></tr></table></figure><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fosc37dtOWroneu14I1LN56cIt6i.png"></p><h5 id="3、绑定虚拟主机和用户"><a href="#3、绑定虚拟主机和用户" class="headerlink" title="3、绑定虚拟主机和用户"></a>3、绑定虚拟主机和用户</h5><p>创建好虚拟主机，我们还要给用户添加访问权限：</p><p>点击添加好的虚拟主机：</p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fr6PvVkh_Ue_Pqu1XmZ3OUeLgvn4.png"></p><p>进入虚拟机设置界面:</p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FjqgXAeLqnzxxYjSnPvh05D-hZ80.png"></p><hr><h2 id="4、RabbitMQ-的第一个程序"><a href="#4、RabbitMQ-的第一个程序" class="headerlink" title="4、RabbitMQ 的第一个程序"></a>4、RabbitMQ 的第一个程序</h2><h3 id="1、AMQP-协议的回顾"><a href="#1、AMQP-协议的回顾" class="headerlink" title="1、AMQP 协议的回顾"></a>1、AMQP 协议的回顾</h3><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FsgT0ZXvTnsnvbcy9yklLnk1z0XB.png"></p><h3 id="2、RabbitMQ-支持的消息模型"><a href="#2、RabbitMQ-支持的消息模型" class="headerlink" title="2、RabbitMQ 支持的消息模型"></a>2、RabbitMQ 支持的消息模型</h3><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FuoG5zcKUGaIfxs3dGPtbe9XPdZ6.png"></p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fn8lqE_lTt8nIZOQTDjS83b0jszE.png"></p><h3 id="3、引入依赖"><a href="#3、引入依赖" class="headerlink" title="3、引入依赖"></a>3、引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.rabbitmq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>amqp-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.7.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4、第一种模型-直连"><a href="#4、第一种模型-直连" class="headerlink" title="4、第一种模型(直连)"></a>4、第一种模型(直连)</h3><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fn8Abbh9IA5Ihry7khnJzapYrCqS.png"></p><p>在上图的模型中，有以下概念：</p><ul><li>P：生产者，也就是要发送消息的程序</li><li>C：消费者：消息的接受者，会一直等待消息到来。</li><li>queue：消息队列，图中红色部分。类似一个邮箱，可以缓存消息；生产者向其中投递消息，消费者从其中取出消息。</li></ul><h5 id="1、开发生产者"><a href="#1、开发生产者" class="headerlink" title="1、开发生产者"></a>1、开发生产者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建连接工厂</span><br><span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">connectionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>connectionFactory.setHost(<span class="hljs-string">&quot;10.15.0.9&quot;</span>);<br>connectionFactory.setPort(<span class="hljs-number">5672</span>);<br>connectionFactory.setUsername(<span class="hljs-string">&quot;ems&quot;</span>);<br>connectionFactory.setPassword(<span class="hljs-string">&quot;123&quot;</span>);<br>connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/ems&quot;</span>);<br><span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> connectionFactory.newConnection();<br><span class="hljs-comment">//创建通道</span><br><span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br><span class="hljs-comment">//参数1: 是否持久化  参数2:是否独占队列 参数3:是否自动删除  参数4:其他属性</span><br>channel.queueDeclare(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>);<br>channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-literal">null</span>,<span class="hljs-string">&quot;hello rabbitmq&quot;</span>.getBytes());<br>channel.close();<br>connection.close();<br></code></pre></td></tr></table></figure><h5 id="2、开发消费者"><a href="#2、开发消费者" class="headerlink" title="2、开发消费者"></a>2、开发消费者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建连接工厂</span><br><span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">connectionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>connectionFactory.setHost(<span class="hljs-string">&quot;10.15.0.9&quot;</span>);<br>connectionFactory.setPort(<span class="hljs-number">5672</span>);<br>connectionFactory.setUsername(<span class="hljs-string">&quot;ems&quot;</span>);<br>connectionFactory.setPassword(<span class="hljs-string">&quot;123&quot;</span>);<br>connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/ems&quot;</span>);<br><span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> connectionFactory.newConnection();<br><span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>channel.queueDeclare(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>channel.basicConsume(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-literal">true</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConsumer</span>(channel)&#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-type">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(body));<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="3、参数的说明"><a href="#3、参数的说明" class="headerlink" title="3、参数的说明"></a>3、参数的说明</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"> channel.queueDeclare(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>);<br><span class="hljs-string">&#x27;参数1&#x27;</span>:用来声明通道对应的队列<br> <span class="hljs-string">&#x27;参数2&#x27;</span>:用来指定是否持久化队列<br> <span class="hljs-string">&#x27;参数3&#x27;</span>:用来指定是否独占队列<br> <span class="hljs-string">&#x27;参数4&#x27;</span>:用来指定是否自动删除队列<br> <span class="hljs-string">&#x27;参数5&#x27;</span>:对队列的额外配置<br></code></pre></td></tr></table></figure><hr><h3 id="5、第二种模型-work-quene"><a href="#5、第二种模型-work-quene" class="headerlink" title="5、第二种模型(work quene)"></a>5、第二种模型(work quene)</h3><p><code>Work queues</code>，也被称为（<code>Task queues</code>），任务模型。当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理。此时就可以使用 work 模型：<strong>让多个消费者绑定到一个队列，共同消费队列中的消息</strong>。队列中的消息一旦消费，就会消失，因此任务是不会被重复执行的。</p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FsS8_w7pNto8kxwZZYkXgpf7cTw4.png"></p><p>角色：</p><ul><li>P：生产者：任务的发布者</li><li>C1：消费者-1，领取任务并且完成任务，假设完成速度较慢</li><li>C2：消费者-2：领取任务并完成任务，假设完成速度快</li></ul><h5 id="1、开发生产者-1"><a href="#1、开发生产者-1" class="headerlink" title="1、开发生产者"></a>1、开发生产者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">channel.queueDeclare(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>  channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-literal">null</span>, (i+<span class="hljs-string">&quot;====&gt;:我是消息&quot;</span>).getBytes());<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2、开发消费者-1"><a href="#2、开发消费者-1" class="headerlink" title="2、开发消费者-1"></a>2、开发消费者-1</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">channel.queueDeclare(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>);<br>channel.basicConsume(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-literal">true</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConsumer</span>(channel)&#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-type">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者1: &quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(body));<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="3、开发消费者-2"><a href="#3、开发消费者-2" class="headerlink" title="3、开发消费者-2"></a>3、开发消费者-2</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">channel.queueDeclare(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>);<br>channel.basicConsume(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-literal">true</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConsumer</span>(channel)&#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-type">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      Thread.sleep(<span class="hljs-number">1000</span>);   <span class="hljs-comment">//处理消息比较慢 一秒处理一个消息</span><br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>      e.printStackTrace();<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;消费者2: &quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(body));<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="4、测试结果"><a href="#4、测试结果" class="headerlink" title="4、测试结果"></a>4、测试结果</h5><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FqN5lf2I50y_5hXzxJkfn6JKRqm1.png"></p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fs9ry6nXe6g0SBRnNnN1NywOWFAu.png"></p><blockquote><p><code>总结:默认情况下，RabbitMQ将按顺序将每个消息发送给下一个使用者。平均而言，每个消费者都会收到相同数量的消息。这种分发消息的方式称为循环。</code></p></blockquote><h5 id="5、消息自动确认机制"><a href="#5、消息自动确认机制" class="headerlink" title="5、消息自动确认机制"></a>5、消息自动确认机制</h5><blockquote><p>Doing a task can take a few seconds. You may wonder what happens if one of the consumers starts a long task and dies with it only partly done. With our current code, once RabbitMQ delivers a message to the consumer it immediately marks it for deletion. In this case, if you kill a worker we will lose the message it was just processing. We’ll also lose all the messages that were dispatched to this particular worker but were not yet handled.</p><p>But we don’t want to lose any tasks. If a worker dies, we’d like the task to be delivered to another worker.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">channel.basicQos(<span class="hljs-number">1</span>);<span class="hljs-comment">//一次只接受一条未确认的消息</span><br><span class="hljs-comment">//参数2:关闭自动确认消息</span><br>channel.basicConsume(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-literal">false</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConsumer</span>(channel)&#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-type">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者1: &quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(body));<br>    channel.basicAck(envelope.getDeliveryTag(),<span class="hljs-literal">false</span>);<span class="hljs-comment">//手动确认消息</span><br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>设置通道一次只能消费一个消息</li><li>关闭消息的自动确认,开启手动确认消息<br><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FoKzbxAjmbkYBt_dxZA5j7NNb4QM.png"><br><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FtS1_UYNskNd1JxfzOBld9FlAm8b.png"></li></ul><hr><h3 id="6、第三种模型-fanout"><a href="#6、第三种模型-fanout" class="headerlink" title="6、第三种模型(fanout)"></a>6、第三种模型(fanout)</h3><p><code>fanout 扇出 也称为广播</code></p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fk5V82JehB8TKG_McMpOke95k_fz.png"></p><p>在广播模式下，消息发送流程是这样的：</p><ul><li>可以有多个消费者</li><li>每个<strong>消费者有自己的 queue</strong>（队列）</li><li>每个<strong>队列都要绑定到 Exchange</strong>（交换机）</li><li><strong>生产者发送的消息，只能发送到交换机</strong>，交换机来决定要发给哪个队列，生产者无法决定。</li><li>交换机把消息发送给绑定过的所有队列</li><li>队列的消费者都能拿到消息。实现一条消息被多个消费者消费</li></ul><h5 id="1、开发生产者-2"><a href="#1、开发生产者-2" class="headerlink" title="1、开发生产者"></a>1、开发生产者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//声明交换机</span><br>channel.exchangeDeclare(<span class="hljs-string">&quot;logs&quot;</span>,<span class="hljs-string">&quot;fanout&quot;</span>);<span class="hljs-comment">//广播 一条消息多个消费者同时消费</span><br><span class="hljs-comment">//发布消息</span><br>channel.basicPublish(<span class="hljs-string">&quot;logs&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;hello&quot;</span>.getBytes());<br></code></pre></td></tr></table></figure><h5 id="2、开发消费者-1-1"><a href="#2、开发消费者-1-1" class="headerlink" title="2、开发消费者-1"></a>2、开发消费者-1</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//绑定交换机</span><br>channel.exchangeDeclare(<span class="hljs-string">&quot;logs&quot;</span>,<span class="hljs-string">&quot;fanout&quot;</span>);<br><span class="hljs-comment">//创建临时队列</span><br><span class="hljs-type">String</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> channel.queueDeclare().getQueue();<br><span class="hljs-comment">//将临时队列绑定exchange</span><br>channel.queueBind(queue,<span class="hljs-string">&quot;logs&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-comment">//处理消息</span><br>channel.basicConsume(queue,<span class="hljs-literal">true</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConsumer</span>(channel)&#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-type">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者1: &quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(body));<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="3、开发消费者-2-1"><a href="#3、开发消费者-2-1" class="headerlink" title="3、开发消费者-2"></a>3、开发消费者-2</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//绑定交换机</span><br>channel.exchangeDeclare(<span class="hljs-string">&quot;logs&quot;</span>,<span class="hljs-string">&quot;fanout&quot;</span>);<br><span class="hljs-comment">//创建临时队列</span><br><span class="hljs-type">String</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> channel.queueDeclare().getQueue();<br><span class="hljs-comment">//将临时队列绑定exchange</span><br>channel.queueBind(queue,<span class="hljs-string">&quot;logs&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-comment">//处理消息</span><br>channel.basicConsume(queue,<span class="hljs-literal">true</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConsumer</span>(channel)&#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-type">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者2: &quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(body));<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="4、开发消费者-3"><a href="#4、开发消费者-3" class="headerlink" title="4、开发消费者-3"></a>4、开发消费者-3</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//绑定交换机</span><br>channel.exchangeDeclare(<span class="hljs-string">&quot;logs&quot;</span>,<span class="hljs-string">&quot;fanout&quot;</span>);<br><span class="hljs-comment">//创建临时队列</span><br><span class="hljs-type">String</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> channel.queueDeclare().getQueue();<br><span class="hljs-comment">//将临时队列绑定exchange</span><br>channel.queueBind(queue,<span class="hljs-string">&quot;logs&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-comment">//处理消息</span><br>channel.basicConsume(queue,<span class="hljs-literal">true</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConsumer</span>(channel)&#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-type">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者3: &quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(body));<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="5、测试结果"><a href="#5、测试结果" class="headerlink" title="5、测试结果"></a>5、测试结果</h5><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fo4WntuYNwY4ZDqbPqDqdPYKy4NR.png"></p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fg12m9jNduJKCn4uUIxaYUNAFSRb.png"></p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Ftrl-Adsy7BvWBW4UFptg-LFnU_Y.png"></p><hr><h3 id="7、第四种模型-Routing"><a href="#7、第四种模型-Routing" class="headerlink" title="7、第四种模型(Routing)"></a>7、第四种模型(Routing)</h3><h4 id="1、Routing-之订阅模型-Direct-直连"><a href="#1、Routing-之订阅模型-Direct-直连" class="headerlink" title="1、Routing 之订阅模型-Direct(直连)"></a>1、Routing 之订阅模型-Direct(直连)</h4><p><code>在Fanout模式中，一条消息，会被所有订阅的队列都消费。但是，在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到Direct类型的Exchange。</code></p><p>在 Direct 模型下：</p><ul><li>队列与交换机的绑定，不能是任意绑定了，而是要指定一个<code>RoutingKey</code>（路由 key）</li><li>消息的发送方在 向 Exchange 发送消息时，也必须指定消息的<code>RoutingKey</code>。</li><li>Exchange 不再把消息交给每一个绑定的队列，而是根据消息的<code>Routing Key</code>进行判断，只有队列的<code>Routingkey</code>与消息的<code>Routing key</code>完全一致，才会接收到消息</li></ul><p>流程:</p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FlLe9D77VJY3hxmqB36wFT-GUr54.png"></p><p>图解：</p><ul><li>P：生产者，向 Exchange 发送消息，发送消息时，会指定一个 routing key。</li><li>X：Exchange（交换机），接收生产者的消息，然后把消息递交给 与 routing key 完全匹配的队列</li><li>C1：消费者，其所在队列指定了需要 routing key 为 error 的消息</li><li>C2：消费者，其所在队列指定了需要 routing key 为 info、error、warning 的消息</li></ul><h5 id="2、开发生产者"><a href="#2、开发生产者" class="headerlink" title="2、开发生产者"></a>2、开发生产者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//声明交换机  参数1:交换机名称 参数2:交换机类型 基于指令的Routing key转发</span><br>channel.exchangeDeclare(<span class="hljs-string">&quot;logs_direct&quot;</span>,<span class="hljs-string">&quot;direct&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-comment">//发布消息</span><br>channel.basicPublish(<span class="hljs-string">&quot;logs_direct&quot;</span>,key,<span class="hljs-literal">null</span>,(<span class="hljs-string">&quot;指定的route key&quot;</span>+key+<span class="hljs-string">&quot;的消息&quot;</span>).getBytes());<br></code></pre></td></tr></table></figure><h5 id="3、开发消费者-1"><a href="#3、开发消费者-1" class="headerlink" title="3、开发消费者-1"></a>3、开发消费者-1</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">//声明交换机</span><br>channel.exchangeDeclare(<span class="hljs-string">&quot;logs_direct&quot;</span>,<span class="hljs-string">&quot;direct&quot;</span>);<br><span class="hljs-comment">//创建临时队列</span><br><span class="hljs-type">String</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> channel.queueDeclare().getQueue();<br><span class="hljs-comment">//绑定队列和交换机</span><br>channel.queueBind(queue,<span class="hljs-string">&quot;logs_direct&quot;</span>,<span class="hljs-string">&quot;error&quot;</span>);<br>channel.queueBind(queue,<span class="hljs-string">&quot;logs_direct&quot;</span>,<span class="hljs-string">&quot;info&quot;</span>);<br>channel.queueBind(queue,<span class="hljs-string">&quot;logs_direct&quot;</span>,<span class="hljs-string">&quot;warn&quot;</span>);<br><br><span class="hljs-comment">//消费消息</span><br>channel.basicConsume(queue,<span class="hljs-literal">true</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConsumer</span>(channel)&#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-type">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者1: &quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(body));<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="4、开发消费者-2"><a href="#4、开发消费者-2" class="headerlink" title="4、开发消费者-2"></a>4、开发消费者-2</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//声明交换机</span><br>channel.exchangeDeclare(<span class="hljs-string">&quot;logs_direct&quot;</span>,<span class="hljs-string">&quot;direct&quot;</span>);<br><span class="hljs-comment">//创建临时队列</span><br><span class="hljs-type">String</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> channel.queueDeclare().getQueue();<br><span class="hljs-comment">//绑定队列和交换机</span><br>channel.queueBind(queue,<span class="hljs-string">&quot;logs_direct&quot;</span>,<span class="hljs-string">&quot;error&quot;</span>);<br><span class="hljs-comment">//消费消息</span><br>channel.basicConsume(queue,<span class="hljs-literal">true</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConsumer</span>(channel)&#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-type">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者2: &quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(body));<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="5、测试生产者发送-Route-key-为-error-的消息时"><a href="#5、测试生产者发送-Route-key-为-error-的消息时" class="headerlink" title="5、测试生产者发送 Route key 为 error 的消息时"></a>5、测试生产者发送 Route key 为 error 的消息时</h5><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FgLQkQ2bEvSQAOH8s3vp-0U-Q4_5.png"></p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FiM27Htc6ZVKpYqoGprAetkjV2mw.png"></p><h5 id="6、测试生产者发送-Route-key-为-info-的消息时"><a href="#6、测试生产者发送-Route-key-为-info-的消息时" class="headerlink" title="6、测试生产者发送 Route key 为 info 的消息时"></a>6、测试生产者发送 Route key 为 info 的消息时</h5><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FuV5GRQlOsz5LywxUiwXhb7Wvt5F.png"></p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FnVwcM0pSRbWs4wO7rfhz9Wg7nod.png"></p><hr><h4 id="3、Routing-之订阅模型-Topic"><a href="#3、Routing-之订阅模型-Topic" class="headerlink" title="3、Routing 之订阅模型-Topic"></a>3、Routing 之订阅模型-Topic</h4><p><code>Topic</code>类型的 <code>Exchange</code>与 <code>Direct</code>相比，都是可以根据 <code>RoutingKey</code>把消息路由到不同的队列。只不过 <code>Topic</code>类型 <code>Exchange</code>可以让队列在绑定 <code>Routing key</code> 的时候使用通配符！这种模型 <code>Routingkey</code> 一般都是由一个或多个单词组成，多个单词之间以”.”分割，例如： <code>item.insert</code></p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FkvzciWTvVMb5s1aZjG8yTqYkjKH.png"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 统配符</span><br><br><span class="hljs-bullet">    *</span> (star) can substitute for exactly one word.    匹配不多不少恰好1个词<br><span class="hljs-code">    # (hash) can substitute for zero or more words.  匹配一个或多个词</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 如:</span><br><br><span class="hljs-code">    audit.#    匹配audit.irs.corporate或者 audit.irs 等</span><br><span class="hljs-code">    audit.*   只能匹配 audit.irs</span><br></code></pre></td></tr></table></figure><h5 id="1、开发生产者-3"><a href="#1、开发生产者-3" class="headerlink" title="1、开发生产者"></a>1、开发生产者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//生命交换机和交换机类型 topic 使用动态路由(通配符方式)</span><br>channel.exchangeDeclare(<span class="hljs-string">&quot;topics&quot;</span>,<span class="hljs-string">&quot;topic&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">routekey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user.save&quot;</span>;<span class="hljs-comment">//动态路由key</span><br><span class="hljs-comment">//发布消息</span><br>channel.basicPublish(<span class="hljs-string">&quot;topics&quot;</span>,routekey,<span class="hljs-literal">null</span>,(<span class="hljs-string">&quot;这是路由中的动态订阅模型,route key: [&quot;</span>+routekey+<span class="hljs-string">&quot;]&quot;</span>).getBytes());<br></code></pre></td></tr></table></figure><h5 id="2、开发消费者-1-2"><a href="#2、开发消费者-1-2" class="headerlink" title="2、开发消费者-1"></a>2、开发消费者-1</h5><p><code>Routing Key中使用*通配符方式</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">//声明交换机</span><br>channel.exchangeDeclare(<span class="hljs-string">&quot;topics&quot;</span>,<span class="hljs-string">&quot;topic&quot;</span>);<br><span class="hljs-comment">//创建临时队列</span><br><span class="hljs-type">String</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> channel.queueDeclare().getQueue();<br><span class="hljs-comment">//绑定队列与交换机并设置获取交换机中动态路由</span><br>channel.queueBind(queue,<span class="hljs-string">&quot;topics&quot;</span>,<span class="hljs-string">&quot;user.*&quot;</span>);<br><br><span class="hljs-comment">//消费消息</span><br>channel.basicConsume(queue,<span class="hljs-literal">true</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConsumer</span>(channel)&#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-type">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者1: &quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(body));<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="3、开发消费者-2-2"><a href="#3、开发消费者-2-2" class="headerlink" title="3、开发消费者-2"></a>3、开发消费者-2</h5><p><code>Routing Key中使用#通配符方式</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//声明交换机</span><br>channel.exchangeDeclare(<span class="hljs-string">&quot;topics&quot;</span>,<span class="hljs-string">&quot;topic&quot;</span>);<br><span class="hljs-comment">//创建临时队列</span><br><span class="hljs-type">String</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> channel.queueDeclare().getQueue();<br><span class="hljs-comment">//绑定队列与交换机并设置获取交换机中动态路由</span><br>channel.queueBind(queue,<span class="hljs-string">&quot;topics&quot;</span>,<span class="hljs-string">&quot;user.#&quot;</span>);<br><br><span class="hljs-comment">//消费消息</span><br>channel.basicConsume(queue,<span class="hljs-literal">true</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConsumer</span>(channel)&#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-type">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者2: &quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(body));<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="4、测试结果-1"><a href="#4、测试结果-1" class="headerlink" title="4、测试结果"></a>4、测试结果</h5><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fo8hL00-I-W7q7kNI0ZncXAr52c9.png"></p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FjX4UJzaaOSBOEjLeZptrGNfoQnC.png"></p><h2 id="5、SpringBoot-中使用-RabbitMQ"><a href="#5、SpringBoot-中使用-RabbitMQ" class="headerlink" title="5、SpringBoot 中使用 RabbitMQ"></a>5、SpringBoot 中使用 RabbitMQ</h2><h3 id="1、搭建初始环境"><a href="#1、搭建初始环境" class="headerlink" title="1、搭建初始环境"></a>1、搭建初始环境</h3><h5 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2、配置配置文件"><a href="#2、配置配置文件" class="headerlink" title="2、配置配置文件"></a>2、配置配置文件</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">springboot_rabbitmq</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">10.15</span><span class="hljs-number">.0</span><span class="hljs-number">.9</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">ems</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/ems</span><br></code></pre></td></tr></table></figure><p><code>RabbitTemplate</code>   用来简化操作     使用时候直接在项目中注入即可使用</p><h3 id="2、第一种-hello-world-模型使用"><a href="#2、第一种-hello-world-模型使用" class="headerlink" title="2、第一种 hello world 模型使用"></a>2、第一种 hello world 模型使用</h3><ol><li></li></ol><h5 id="开发生产者"><a href="#开发生产者" class="headerlink" title="开发生产者"></a>开发生产者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHello</span><span class="hljs-params">()</span>&#123;<br>  rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;hello world&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li></li></ol><h5 id="开发消费者"><a href="#开发消费者" class="headerlink" title="开发消费者"></a>开发消费者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@RabbitListener(queuesToDeclare = @Queue(&quot;hello&quot;))</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloCustomer</span> &#123;<br><br>    <span class="hljs-meta">@RabbitHandler</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receive1</span><span class="hljs-params">(String message)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;message = &quot;</span> + message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-第二种-work-模型使用"><a href="#3-第二种-work-模型使用" class="headerlink" title="3 第二种 work 模型使用"></a>3 第二种 work 模型使用</h3><h5 id="1、开发生产者-4"><a href="#1、开发生产者-4" class="headerlink" title="1、开发生产者"></a>1、开发生产者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWork</span><span class="hljs-params">()</span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;work&quot;</span>,<span class="hljs-string">&quot;hello work!&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2、开发消费者-1"><a href="#2、开发消费者-1" class="headerlink" title="2、开发消费者"></a>2、开发消费者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WorkCustomer</span> &#123;<br>    <span class="hljs-meta">@RabbitListener(queuesToDeclare = @Queue(&quot;work&quot;))</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receive1</span><span class="hljs-params">(String message)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;work message1 = &quot;</span> + message);<br>    &#125;<br><br>    <span class="hljs-meta">@RabbitListener(queuesToDeclare = @Queue(&quot;work&quot;))</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receive2</span><span class="hljs-params">(String message)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;work message2 = &quot;</span> + message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><code>说明:默认在Spring AMQP实现中Work这种方式就是公平调度,如果需要实现能者多劳需要额外配置</code></p></blockquote><h3 id="4-Fanout-广播模型"><a href="#4-Fanout-广播模型" class="headerlink" title="4 Fanout 广播模型"></a>4 Fanout 广播模型</h3><ol><li></li></ol><h5 id="开发生产者-1"><a href="#开发生产者-1" class="headerlink" title="开发生产者"></a>开发生产者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFanout</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>  rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;logs&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;这是日志广播&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li></li></ol><h5 id="开发消费者-1"><a href="#开发消费者-1" class="headerlink" title="开发消费者"></a>开发消费者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FanoutCustomer</span> &#123;<br><br>    <span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">            value = @Queue,</span><br><span class="hljs-meta">            exchange = @Exchange(name=&quot;logs&quot;,type = &quot;fanout&quot;)</span><br><span class="hljs-meta">    ))</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receive1</span><span class="hljs-params">(String message)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;message1 = &quot;</span> + message);<br>    &#125;<br><br>    <span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">            value = @Queue, //创建临时队列</span><br><span class="hljs-meta">            exchange = @Exchange(name=&quot;logs&quot;,type = &quot;fanout&quot;)  //绑定交换机类型</span><br><span class="hljs-meta">    ))</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receive2</span><span class="hljs-params">(String message)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;message2 = &quot;</span> + message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-Route-路由模型"><a href="#5-Route-路由模型" class="headerlink" title="5 Route 路由模型"></a>5 Route 路由模型</h3><h4 id="1、开发生产者-5"><a href="#1、开发生产者-5" class="headerlink" title="1、开发生产者"></a>1、开发生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDirect</span><span class="hljs-params">()</span>&#123;<br>  rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;directs&quot;</span>,<span class="hljs-string">&quot;error&quot;</span>,<span class="hljs-string">&quot;error 的日志信息&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、开发消费者-2"><a href="#2、开发消费者-2" class="headerlink" title="2、开发消费者"></a>2、开发消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DirectCustomer</span> &#123;<br><br>    <span class="hljs-meta">@RabbitListener(bindings =&#123;</span><br><span class="hljs-meta">            @QueueBinding(</span><br><span class="hljs-meta">                    value = @Queue(),</span><br><span class="hljs-meta">                    key=&#123;&quot;info&quot;,&quot;error&quot;&#125;,</span><br><span class="hljs-meta">                    exchange = @Exchange(type = &quot;direct&quot;,name=&quot;directs&quot;)</span><br><span class="hljs-meta">            )&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receive1</span><span class="hljs-params">(String message)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;message1 = &quot;</span> + message);<br>    &#125;<br><br>    <span class="hljs-meta">@RabbitListener(bindings =&#123;</span><br><span class="hljs-meta">            @QueueBinding(</span><br><span class="hljs-meta">                    value = @Queue(),</span><br><span class="hljs-meta">                    key=&#123;&quot;error&quot;&#125;,</span><br><span class="hljs-meta">                    exchange = @Exchange(type = &quot;direct&quot;,name=&quot;directs&quot;)</span><br><span class="hljs-meta">            )&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receive2</span><span class="hljs-params">(String message)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;message2 = &quot;</span> + message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6、Topic-订阅模型-动态路由模型"><a href="#6、Topic-订阅模型-动态路由模型" class="headerlink" title="6、Topic 订阅模型(动态路由模型)"></a>6、Topic 订阅模型(动态路由模型)</h3><h4 id="1、开发生产者-6"><a href="#1、开发生产者-6" class="headerlink" title="1、开发生产者"></a>1、开发生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br><span class="hljs-comment">//topic</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testTopic</span><span class="hljs-params">()</span>&#123;<br>  rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;topics&quot;</span>,<span class="hljs-string">&quot;user.save.findAll&quot;</span>,<span class="hljs-string">&quot;user.save.findAll 的消息&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、开发消费者-3"><a href="#2、开发消费者-3" class="headerlink" title="2、开发消费者"></a>2、开发消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TopCustomer</span> &#123;<br>    <span class="hljs-meta">@RabbitListener(bindings = &#123;</span><br><span class="hljs-meta">            @QueueBinding(</span><br><span class="hljs-meta">                    value = @Queue,</span><br><span class="hljs-meta">                    key = &#123;&quot;user.*&quot;&#125;,</span><br><span class="hljs-meta">                    exchange = @Exchange(type = &quot;topic&quot;,name = &quot;topics&quot;)</span><br><span class="hljs-meta">            )</span><br><span class="hljs-meta">    &#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receive1</span><span class="hljs-params">(String message)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;message1 = &quot;</span> + message);<br>    &#125;<br><br>    <span class="hljs-meta">@RabbitListener(bindings = &#123;</span><br><span class="hljs-meta">            @QueueBinding(</span><br><span class="hljs-meta">                    value = @Queue,</span><br><span class="hljs-meta">                    key = &#123;&quot;user.#&quot;&#125;,</span><br><span class="hljs-meta">                    exchange = @Exchange(type = &quot;topic&quot;,name = &quot;topics&quot;)</span><br><span class="hljs-meta">            )</span><br><span class="hljs-meta">    &#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receive2</span><span class="hljs-params">(String message)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;message2 = &quot;</span> + message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="6、MQ-的应用场景"><a href="#6、MQ-的应用场景" class="headerlink" title="6、MQ 的应用场景"></a>6、MQ 的应用场景</h2><h3 id="1、异步处理"><a href="#1、异步处理" class="headerlink" title="1、异步处理"></a>1、异步处理</h3><p><code>场景说明：用户注册后，需要发注册邮件和注册短信,传统的做法有两种 1.串行的方式 2.并行的方式</code></p><ul><li><code>串行方式:</code> 将注册信息写入数据库后,发送注册邮件,再发送注册短信,以上三个任务全部完成后才返回给客户端。 这有一个问题是,邮件,短信并不是必须的,它只是一个通知,而这种做法让客户端等待没有必要等待的东西.</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fl-aqUFbDARW8sss7n817-e_o6a4.png"></p><ul><li><code>并行方式:</code>将注册信息写入数据库后,发送邮件的同时,发送短信,以上三个任务完成后,返回给客户端,并行的方式能提高处理的时间。</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FvLX8oQ1vQ4WIO9jgxi-dhiK40yo.png"></p><ul><li><code>消息队列:</code>假设三个业务节点分别使用 50ms,串行方式使用时间 150ms,并行使用时间 100ms。虽然并行已经提高的处理时间,但是,前面说过,邮件和短信对我正常的使用网站没有任何影响，客户端没有必要等着其发送完成才显示注册成功,应该是写入数据库后就返回.  <code>消息队列</code>: 引入消息队列后，把发送邮件,短信不是必须的业务逻辑异步处理<br><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FkvUxDME_gUzsuARNYZ7RDg5WqTp.jpg"></li></ul><p>由此可以看出,引入消息队列后，用户的响应时间就等于写入数据库的时间+写入消息队列的时间(可以忽略不计),引入消息队列后处理后,响应时间是串行的 3 倍,是并行的 2 倍。</p><h3 id="2、应用解耦"><a href="#2、应用解耦" class="headerlink" title="2、应用解耦"></a>2、应用解耦</h3><p><code>场景：双11是购物狂节,用户下单后,订单系统需要通知库存系统,传统的做法就是订单系统调用库存系统的接口.</code></p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FrZ9o8jMGQy20b_7S8fm5XUTZpqk.png"></p><p>这种做法有一个缺点:</p><p>当库存系统出现故障时,订单就会失败。 订单系统和库存系统高耦合.   引入消息队列</p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Flv33-u6shobcCpVEVk-E59jtUjb.png"></p><ul><li><code>订单系统:</code>用户下单后,订单系统完成持久化处理,将消息写入消息队列,返回用户订单下单成功。</li><li><code>库存系统:</code>订阅下单的消息,获取下单消息,进行库操作。   就算库存系统出现故障,消息队列也能保证消息的可靠投递,不会导致消息丢失.</li></ul><h3 id="3、流量削峰"><a href="#3、流量削峰" class="headerlink" title="3、流量削峰"></a>3、流量削峰</h3><p><code>场景:</code> 秒杀活动，一般会因为流量过大，导致应用挂掉,为了解决这个问题，一般在应用前端加入消息队列。</p><p><code>作用:</code></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-number">1.</span>可以控制活动人数，超过此一定阀值的订单直接丢弃<span class="hljs-comment">(我为什么秒杀一次都没有成功过呢^^)</span><br></code></pre></td></tr></table></figure><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-number">2.</span>可以缓解短时间的高流量压垮应用<span class="hljs-comment">(应用程序按自己的最大处理能力获取订单)</span><br></code></pre></td></tr></table></figure><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FmMNioBE1aUkiX1RmD7nD9aaIUrZ.png"></p><p>1.用户的请求,服务器收到之后,首先写入消息队列,加入消息队列长度超过最大值,则直接抛弃用户请求或跳转到错误页面.</p><p>2.秒杀业务根据消息队列中的请求信息，再做后续处理.</p><hr><h2 id="7、RabbitMQ-的集群"><a href="#7、RabbitMQ-的集群" class="headerlink" title="7、RabbitMQ 的集群"></a>7、RabbitMQ 的集群</h2><h3 id="1、集群架构"><a href="#1、集群架构" class="headerlink" title="1、集群架构"></a>1、集群架构</h3><h4 id="1、普通集群-副本集群"><a href="#1、普通集群-副本集群" class="headerlink" title="1、普通集群(副本集群)"></a>1、普通集群(副本集群)</h4><blockquote><p>All data&#x2F;state required for the operation of a RabbitMQ broker is replicated across all nodes. An exception to this are message queues, which by default reside on one node, though they are visible and reachable from all nodes. To replicate queues across nodes in a cluster   –摘自官网</p></blockquote><p><code>默认情况下:RabbitMQ代理操作所需的所有数据/状态都将跨所有节点复制。这方面的一个例外是消息队列，默认情况下，消息队列位于一个节点上，尽管它们可以从所有节点看到和访问</code></p><h5 id="1、架构图"><a href="#1、架构图" class="headerlink" title="1、架构图"></a>1、架构图</h5><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fr1tcGwVc9nkJ99GVpE-k-t4MhbQ.png"></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">核心解决问题:</span><br></code></pre></td></tr></table></figure><p><code>当集群中某一时刻master节点宕机,可以对Quene中信息,进行备份</code></p><h5 id="2、集群搭建"><a href="#2、集群搭建" class="headerlink" title="2、集群搭建"></a>2、集群搭建</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 0.集群规划</span><br><br><span class="hljs-code">    node1: 10.15.0.3  mq1  master 主节点</span><br><span class="hljs-code">    node2: 10.15.0.4  mq2  repl1  副本节点</span><br><span class="hljs-code">    node3: 10.15.0.5  mq3  repl2  副本节点</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 1.克隆三台机器主机名和 ip 映射</span><br><br><span class="hljs-code">    vim /etc/hosts加入:</span><br><span class="hljs-code">     10.15.0.3 mq1</span><br><span class="hljs-code">    10.15.0.4 mq2</span><br><span class="hljs-code">    10.15.0.5 mq3</span><br><span class="hljs-code">    node1: vim /etc/hostname 加入:  mq1</span><br><span class="hljs-code">    node2: vim /etc/hostname 加入:  mq2</span><br><span class="hljs-code">    node3: vim /etc/hostname 加入:  mq3</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 2.三个机器安装 rabbitmq,并同步 cookie 文件,在 node1 上执行:</span><br><br><span class="hljs-code">    scp /var/lib/rabbitmq/.erlang.cookie root@mq2:/var/lib/rabbitmq/</span><br><span class="hljs-code">    scp /var/lib/rabbitmq/.erlang.cookie root@mq3:/var/lib/rabbitmq/</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 3.查看 cookie 是否一致:</span><br><br><span class="hljs-code">    node1: cat /var/lib/rabbitmq/.erlang.cookie</span><br><span class="hljs-code">    node2: cat /var/lib/rabbitmq/.erlang.cookie</span><br><span class="hljs-code">    node3: cat /var/lib/rabbitmq/.erlang.cookie</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 4.后台启动 rabbitmq 所有节点执行如下命令,启动成功访问管理界面:</span><br><br><span class="hljs-code">    rabbitmq-server -detached</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 5.在 node2 和 node3 执行加入集群命令:</span><br><br><span class="hljs-code">    1.关闭       rabbitmqctl stop_app</span><br><span class="hljs-code">    2.加入集群    rabbitmqctl join_cluster rabbit@mq1</span><br><span class="hljs-code">    3.启动服务    rabbitmqctl start_app</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 6.查看集群状态,任意节点执行:</span><br><br><span class="hljs-code">    rabbitmqctl cluster_status</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 7.如果出现如下显示,集群搭建成功:</span><br><br><span class="hljs-code">    Cluster status of node rabbit@mq3 ...</span><br><span class="hljs-code">    [&#123;nodes,[&#123;disc,[rabbit@mq1,rabbit@mq2,rabbit@mq3]&#125;]&#125;,</span><br><span class="hljs-code">    &#123;running_nodes,[rabbit@mq1,rabbit@mq2,rabbit@mq3]&#125;,</span><br><span class="hljs-code">    &#123;cluster_name,&lt;&lt;&quot;rabbit@mq1&quot;&gt;&gt;&#125;,</span><br><span class="hljs-code">    &#123;partitions,[]&#125;,</span><br><span class="hljs-code">    &#123;alarms,[&#123;rabbit@mq1,[]&#125;,&#123;rabbit@mq2,[]&#125;,&#123;rabbit@mq3,[]&#125;]&#125;]</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 8.登录管理界面,展示如下状态:</span><br></code></pre></td></tr></table></figure><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fox8ngbKPPbL8CPZm3pVxhF4-6kL.png"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 9.测试集群在 node1 上,创建队列</span><br></code></pre></td></tr></table></figure><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FlKTOgHYYPA3Lqaw8yqKvXnEy-u-.png"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 10.查看 node2 和 node3 节点:</span><br></code></pre></td></tr></table></figure><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FtmUeJikLT15ey1lihPRcMM2f0Oz.png"></p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Flk-txxeczfMz7IgnH7JlDqjgRgx.png"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 11.关闭 node1 节点,执行如下命令,查看 node2 和 node3:</span><br><br><span class="hljs-code">    rabbitmqctl stop_app</span><br></code></pre></td></tr></table></figure><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fjn0kLT5hJU1c78YOavYl0ms3yFZ.png"></p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FqO_s53ou1totRCx_gjeYnmJCP96.png"></p><hr><h4 id="2、镜像集群"><a href="#2、镜像集群" class="headerlink" title="2、镜像集群"></a>2、镜像集群</h4><blockquote><p>This guide covers mirroring (queue contents replication) of classic queues  –摘自官网</p><p>By default, contents of a queue within a RabbitMQ cluster are located on a single node (the node on which the queue was declared). This is in contrast to exchanges and bindings, which can always be considered to be on all nodes. Queues can optionally be made <em>mirrored</em> across multiple nodes. –摘自官网</p></blockquote><p><code>镜像队列机制就是将队列在三个节点之间设置主从关系，消息会在三个节点之间进行自动同步，且如果其中一个节点不可用，并不会导致消息丢失或服务不可用的情况，提升MQ集群的整体高可用性。</code></p><h5 id="1、集群架构图"><a href="#1、集群架构图" class="headerlink" title="1、集群架构图"></a>1、集群架构图</h5><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fja40L4YtJWlSfS7_3AA0ii1OlFV.png"></p><h5 id="2、配置集群架构"><a href="#2、配置集群架构" class="headerlink" title="2、配置集群架构"></a>2、配置集群架构</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 0.策略说明</span><br><br><span class="hljs-code">    rabbitmqctl set_policy [-p &lt;vhost&gt;] [--priority &lt;priority&gt;] [--apply-to &lt;apply-to&gt;] &lt;name&gt; &lt;pattern&gt;  &lt;definition&gt;</span><br><span class="hljs-code">    -p Vhost： 可选参数，针对指定vhost下的queue进行设置</span><br><span class="hljs-code">    Name:     policy的名称</span><br><span class="hljs-code">    Pattern: queue的匹配模式(正则表达式)</span><br><span class="hljs-code">    Definition：镜像定义，包括三个部分ha-mode, ha-params, ha-sync-mode</span><br><span class="hljs-code">           ha-mode:指明镜像队列的模式，有效值为 all/exactly/nodes</span><br><span class="hljs-code">                        all：表示在集群中所有的节点上进行镜像</span><br><span class="hljs-code">                        exactly：表示在指定个数的节点上进行镜像，节点的个数由ha-params指定</span><br><span class="hljs-code">                        nodes：表示在指定的节点上进行镜像，节点名称通过ha-params指定</span><br><span class="hljs-code">             ha-params：ha-mode模式需要用到的参数</span><br><span class="hljs-code">                ha-sync-mode：进行队列中消息的同步方式，有效值为automatic和manual</span><br><span class="hljs-code">                priority：可选参数，policy的优先级</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 1.查看当前策略</span><br><br><span class="hljs-code">    rabbitmqctl list_policies</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 2.添加策略</span><br><br><span class="hljs-code">    rabbitmqctl set_policy ha-all &#x27;^hello&#x27; &#x27;&#123;&quot;ha-mode&quot;:&quot;all&quot;,&quot;ha-sync-mode&quot;:&quot;automatic&quot;&#125;&#x27;</span><br><span class="hljs-code">    说明:策略正则表达式为 “^” 表示所有匹配所有队列名称  ^hello:匹配hello开头队列</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 3.删除策略</span><br><br><span class="hljs-code">    rabbitmqctl clear_policy ha-all</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 4.测试集群</span><br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>MQ</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL初级</title>
    <link href="/2022/08/13/yuque/MySQL%E5%88%9D%E7%BA%A7/"/>
    <url>/2022/08/13/yuque/MySQL%E5%88%9D%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<p>MySQL 基础知识</p><span id="more"></span><h1 id="一、数据库相关概念"><a href="#一、数据库相关概念" class="headerlink" title="一、数据库相关概念"></a>一、数据库相关概念</h1><h2 id="1、数据库的好处"><a href="#1、数据库的好处" class="headerlink" title="1、数据库的好处"></a>1、数据库的好处</h2><ul><li>1.持久化数据到本地</li><li>2.可以实现结构化查询，方便管理</li></ul><h2 id="2、数据库相关概念"><a href="#2、数据库相关概念" class="headerlink" title="2、数据库相关概念"></a>2、数据库相关概念</h2><ul><li>1、DB：数据库，保存一组有组织的数据的容器</li><li>2、DBMS：数据库管理系统，又称为数据库软件（产品），用于管理 DB 中的数据</li><li>3、SQL:结构化查询语言，用于和 DBMS 通信的语言</li></ul><h2 id="3、数据库存储数据的特点"><a href="#3、数据库存储数据的特点" class="headerlink" title="3、数据库存储数据的特点"></a>3、数据库存储数据的特点</h2><ul><li>1、将数据放到表中，表再放到库中</li><li>2、一个数据库中可以有多个表，每个表都有一个的名字，用来标识自己。表名具有唯一性。</li><li>3、表具有一些特性，这些特性定义了数据在表中如何存储，类似 java 中 “类”的设计。</li><li>4、表由列组成，我们也称为字段。所有表都是由一个或多个列组成的，每一列类似 java 中的”属性”</li><li>5、表中的数据是按行存储的，每一行类似于 java 中的“对象”。</li></ul><h1 id="二、初始化-MYSQL"><a href="#二、初始化-MYSQL" class="headerlink" title="二、初始化 MYSQL"></a>二、初始化 MYSQL</h1><h2 id="1、MySQL-产品的介绍和安装"><a href="#1、MySQL-产品的介绍和安装" class="headerlink" title="1、MySQL 产品的介绍和安装"></a>1、MySQL 产品的介绍和安装</h2><h2 id="2、MySQL-服务的启动和停止"><a href="#2、MySQL-服务的启动和停止" class="headerlink" title="2、MySQL 服务的启动和停止"></a>2、MySQL 服务的启动和停止</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">方式一：计算机——右击管理——服务<br>方式二：通过管理员身份运行<br>net <span class="hljs-keyword">start</span> 服务名（启动服务）<br>net stop 服务名（停止服务）<br></code></pre></td></tr></table></figure><h2 id="3、MySQL-服务的登录和退出"><a href="#3、MySQL-服务的登录和退出" class="headerlink" title="3、MySQL 服务的登录和退出"></a>3、MySQL 服务的登录和退出</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">方式一：通过mysql自带的客户端<br>只限于root用户<br><br>方式二：通过windows自带的客户端<br>登录：<br>mysql 【<span class="hljs-operator">-</span>h主机名 <span class="hljs-operator">-</span>P端口号 】<span class="hljs-operator">-</span>u用户名 <span class="hljs-operator">-</span>p密码<br><br>退出：<br>exit或ctrl<span class="hljs-operator">+</span>C<br></code></pre></td></tr></table></figure><h2 id="4、MySQL-的常见命令"><a href="#4、MySQL-的常见命令" class="headerlink" title="4、MySQL 的常见命令"></a>4、MySQL 的常见命令</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1.</span>查看当前所有的数据库<br><span class="hljs-keyword">show</span> databases;<br><span class="hljs-number">2.</span>打开指定的库<br>use 库名<br><span class="hljs-number">3.</span>查看当前库的所有表<br><span class="hljs-keyword">show</span> tables;<br><span class="hljs-number">4.</span>查看其它库的所有表<br><span class="hljs-keyword">show</span> tables <span class="hljs-keyword">from</span> 库名;<br><span class="hljs-number">5.</span>创建表<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名(<br><br>列名 列类型,<br>列名 列类型，<br>。。。<br>);<br><span class="hljs-number">6.</span>查看表结构<br><span class="hljs-keyword">desc</span> 表名;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">7.</span>查看服务器的版本<br>方式一：登录到mysql服务端<br><span class="hljs-keyword">select</span> version();<br>方式二：没有登录到mysql服务端<br>mysql <span class="hljs-comment">--version</span><br>或<br>mysql <span class="hljs-comment">--V</span><br></code></pre></td></tr></table></figure><h2 id="5、MySQL-的语法规范"><a href="#5、MySQL-的语法规范" class="headerlink" title="5、MySQL 的语法规范"></a>5、MySQL 的语法规范</h2><p>1.不区分大小写,但建议关键字大写，表名、列名小写 2.每条命令最好用分号结尾 3.每条命令根据需要，可以进行缩进 或换行 4.注释<br>单行注释：#注释文字<br>单行注释：– 注释文字<br>多行注释：&#x2F;_ 注释文字  _&#x2F;</p><h3 id="SQL-的语言分类"><a href="#SQL-的语言分类" class="headerlink" title="SQL 的语言分类"></a>SQL 的语言分类</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">DQL（Data Query <span class="hljs-keyword">Language</span>）：数据查询语言<br><span class="hljs-keyword">select</span><br>DML(Data Manipulate <span class="hljs-keyword">Language</span>):数据操作语言<br><span class="hljs-keyword">insert</span> 、<span class="hljs-keyword">update</span>、<span class="hljs-keyword">delete</span><br>DDL（Data <span class="hljs-keyword">Define</span> Languge）：数据定义语言<br><span class="hljs-keyword">create</span>、<span class="hljs-keyword">drop</span>、<span class="hljs-keyword">alter</span><br>TCL（Transaction Control <span class="hljs-keyword">Language</span>）：事务控制语言<br><span class="hljs-keyword">commit</span>、<span class="hljs-keyword">rollback</span><br></code></pre></td></tr></table></figure><h3 id="SQL-的常见命令"><a href="#SQL-的常见命令" class="headerlink" title="SQL 的常见命令"></a>SQL 的常见命令</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> databases； 查看所有的数据库<br>use 库名； 打开指定 的库<br><span class="hljs-keyword">show</span> tables ; 显示库中的所有表<br><span class="hljs-keyword">show</span> tables <span class="hljs-keyword">from</span> 库名;显示指定库中的所有表<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名(<br>字段名 字段类型,<br>字段名 字段类型<br>); 创建表<br><br><span class="hljs-keyword">desc</span> 表名; 查看指定表的结构<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> 表名;显示表中的所有数据<br></code></pre></td></tr></table></figure><h1 id="五、DQL-语言的学习"><a href="#五、DQL-语言的学习" class="headerlink" title="五、DQL 语言的学习"></a>五、DQL 语言的学习</h1><h2 id="1、基础查询"><a href="#1、基础查询" class="headerlink" title="1、基础查询"></a>1、基础查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">语法：<br><span class="hljs-keyword">SELECT</span> 要查询的东西<br>【<span class="hljs-keyword">FROM</span> 表名】;<br><br>类似于Java中 :System.out.println(要打印的东西);<br>特点：<br>通过<span class="hljs-keyword">select</span>查询完的结果 ，是一个虚拟的表格，不是真实存在<br>要查询的东西 可以是常量值、可以是表达式、可以是字段、可以是函数<br></code></pre></td></tr></table></figure><h2 id="2、条件查询"><a href="#2、条件查询" class="headerlink" title="2、条件查询"></a>2、条件查询</h2><blockquote><p>条件查询：根据条件过滤原始表的数据，查询到想要的数据</p></blockquote><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>    要查询的字段<span class="hljs-operator">|</span>表达式<span class="hljs-operator">|</span>常量值<span class="hljs-operator">|</span>函数<br><span class="hljs-keyword">from</span><br>    表<br><span class="hljs-keyword">where</span><br>    条件 ;<br></code></pre></td></tr></table></figure><h3 id="1、条件表达式"><a href="#1、条件表达式" class="headerlink" title="1、条件表达式"></a>1、条件表达式</h3><p>示例：salary&gt;10000<br>条件运算符：</p><blockquote><p>&lt; &gt;&#x3D; &lt;&#x3D; &#x3D; !&#x3D; &lt;&gt;</p></blockquote><h3 id="2、逻辑表达式"><a href="#2、逻辑表达式" class="headerlink" title="2、逻辑表达式"></a>2、逻辑表达式</h3><p>示例：salary&gt;10000 &amp;&amp; salary&lt;20000</p><p>逻辑运算符：</p><p>and（&amp;&amp;）:两个条件如果同时成立，结果为 true，否则为 false<br>or(||)：两个条件只要有一个成立，结果为 true，否则为 false<br>not(!)：如果条件成立，则 not 后为 false，否则为 true</p><h3 id="3、模糊查询"><a href="#3、模糊查询" class="headerlink" title="3、模糊查询"></a>3、模糊查询</h3><p>示例：last_name like ‘a%’</p><h2 id="3、排序查询"><a href="#3、排序查询" class="headerlink" title="3、排序查询"></a>3、排序查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">语法：<br><span class="hljs-keyword">select</span><br>要查询的东西<br><span class="hljs-keyword">from</span><br>表<br><span class="hljs-keyword">where</span><br>条件<br><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 排序的字段<span class="hljs-operator">|</span>表达式<span class="hljs-operator">|</span>函数<span class="hljs-operator">|</span>别名 【<span class="hljs-keyword">asc</span><span class="hljs-operator">|</span><span class="hljs-keyword">desc</span>】<br></code></pre></td></tr></table></figure><h2 id="4、常见函数"><a href="#4、常见函数" class="headerlink" title="4、常见函数"></a>4、常见函数</h2><h3 id="1、单行函数"><a href="#1、单行函数" class="headerlink" title="1、单行函数"></a>1、单行函数</h3><h4 id="1、字符函数"><a href="#1、字符函数" class="headerlink" title="1、字符函数"></a>1、字符函数</h4><ul><li>concat 拼接</li><li>substr 截取子串</li><li>upper 转换成大写</li><li>lower 转换成小写</li><li>trim 去前后指定的空格和字符</li><li>ltrim 去左边空格</li><li>rtrim 去右边空格</li><li>replace 替换</li><li>lpad 左填充</li><li>rpad 右填充</li><li>instr 返回子串第一次出现的索引</li><li>length 获取字节个数</li></ul><h4 id="2、数学函数"><a href="#2、数学函数" class="headerlink" title="2、数学函数"></a>2、数学函数</h4><ul><li>round 四舍五入</li><li>rand 随机数</li><li>floor 向下取整</li><li>ceil 向上取整</li><li>mod 取余</li><li>truncate 截断</li></ul><h4 id="3、日期函数"><a href="#3、日期函数" class="headerlink" title="3、日期函数"></a>3、日期函数</h4><ul><li>now 当前系统日期+时间</li><li>curdate 当前系统日期</li><li>curtime 当前系统时间</li><li>str_to_date 将字符转换成日期</li><li>date_format 将日期转换成字符</li></ul><h4 id="4、流程控制函数"><a href="#4、流程控制函数" class="headerlink" title="4、流程控制函数"></a>4、流程控制函数</h4><ul><li>if 处理双分支:<ul><li>if(表达式 1，表达式 2，表达式 3):即三目运算符</li></ul></li><li>case 语句:处理多分支</li></ul><blockquote><p>case 变量或表达式<br>when 常量 1 then 值 1<br>when 常量 2 then 值 2<br>when 常量 3 then 值 4<br>…</p></blockquote><h4 id="5、其他函数"><a href="#5、其他函数" class="headerlink" title="5、其他函数"></a>5、其他函数</h4><ul><li>version 版本</li><li>database 当前库</li><li>user 当前连接用户</li><li>password(‘字符’):返回该字符的加密形式</li><li>md5(‘字符):md5 加密</li></ul><h3 id="2、分组函数"><a href="#2、分组函数" class="headerlink" title="2、分组函数"></a>2、分组函数</h3><ul><li>sum 求和</li><li>max 最大值</li><li>min 最小值</li><li>avg 平均值</li><li>count 计数</li></ul><blockquote><p>特点：</p><p>1、以上五个分组函数都忽略 null 值，除了 count(*)</p><p>2、sum 和 avg 一般用于处理数值型<br>max、min、count 可以处理任何数据类型</p><p>3、都可以搭配 distinct 使用，用于统计去重后的结果</p><p>4、count 的参数可以支持：必须非空<br>字段、*、常量值，一般放 1、</p><p>效率上：<br>MyISAM:count(<em>)最高<br>InnoDB:count(</em>) &amp; count(1) &gt; count(字段)<br>6、和分组函数一同查询的字段，要求是 group by 后出现的字段</p></blockquote><h2 id="5、分组查询"><a href="#5、分组查询" class="headerlink" title="5、分组查询"></a>5、分组查询</h2><ul><li>where       筛选条件</li><li>group by   分组的字段</li><li>having     分组后的筛选</li><li>order by   排序列表</li></ul><blockquote><p>特点：</p><p>1、可以按单个字段分组</p><p>2、和分组函数一同查询的字段最好是分组后的字段</p><p>3、分组筛选<br>针对的表 位置 关键字<br>分组前筛选： 原始表    group by 的前面 where<br>分组后筛选： 分组后的结果集 group by 的后面 having</p><p>4、可以按多个字段分组，字段之间用逗号隔开</p><p>5、可以支持排序</p><p>6、having 后可以支持别名</p></blockquote><h2 id="6、多表连接查询"><a href="#6、多表连接查询" class="headerlink" title="6、多表连接查询"></a>6、多表连接查询</h2><blockquote><p>笛卡尔乘积：如果连接条件省略或无效则会出现,导致多个表所有行完全连接</p><p>解决办法：添加上有效连接条件</p></blockquote><ul><li>按年代分类</li></ul><h3 id="1、sql92"><a href="#1、sql92" class="headerlink" title="1、sql92"></a>1、sql92</h3><h4 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 查询列表<br><span class="hljs-keyword">from</span> table1，table2<br><span class="hljs-keyword">where</span> table1.key1 <span class="hljs-operator">=</span> table2.key2<br>&#123;<br><span class="hljs-keyword">and</span> 筛选条件<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 分组字段<br><span class="hljs-keyword">having</span> 分组后的筛选<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 排序字段<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>特点：</p><p>1、一般为表起别名,简化 sql</p><p>2、n 表连接至少需要 n-1 个有效连接条件</p><p>3、多表顺序可以调换</p><p>4、等值连接的结果是多表的交集部分</p></blockquote><h4 id="非等值连接"><a href="#非等值连接" class="headerlink" title="非等值连接"></a>非等值连接</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 查询列表<br><span class="hljs-keyword">from</span> table1，table2<br><span class="hljs-keyword">where</span> 非等值的连接条件<br>&#123;<br><span class="hljs-keyword">and</span> 筛选条件<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 分组字段<br><span class="hljs-keyword">having</span> 分组后的筛选<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 排序字段<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 查询列表<br><span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> t1，<span class="hljs-keyword">table</span> t2<br><span class="hljs-keyword">where</span> table1.key1 <span class="hljs-operator">=</span> table2.key2<br>&#123;<br><span class="hljs-keyword">and</span> 筛选条件<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 分组字段<br><span class="hljs-keyword">having</span> 分组后的筛选<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 排序字段<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>t1 和 t2 都是一样的表，只是为了方便</p></blockquote><h4 id="部分外连接-oracle、sqlserver"><a href="#部分外连接-oracle、sqlserver" class="headerlink" title="部分外连接(oracle、sqlserver)"></a>部分外连接(oracle、sqlserver)</h4><h3 id="2、sql99-推荐使用"><a href="#2、sql99-推荐使用" class="headerlink" title="2、sql99(推荐使用)"></a>2、sql99(推荐使用)</h3><blockquote><p>sql92 和 sql99 对比</p><p>给你：sql99 功能更多</p><p>可读性：sql99 实现连接条件和筛选条件的分离，可读性更好</p></blockquote><h4 id="1、内连接"><a href="#1、内连接" class="headerlink" title="1、内连接"></a>1、内连接</h4><ul><li>等值连接</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 查询列表<br><span class="hljs-keyword">from</span> table1 alias1<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> table2 alias2<br><span class="hljs-keyword">on</span> 连接条件<br></code></pre></td></tr></table></figure><blockquote><p>特点</p><p>1、添加排序，分组，筛选</p><p>2、inner 可以省略</p><p>3、筛选条件放在 where 后，连接条件放在 on 后面，提高分离性，便于阅读</p><p>4、inner join 连接和 sql92 语法中的等值连接效果是一样的</p></blockquote><ul><li>非等值连接</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e.salary, j.grade_level<br><span class="hljs-keyword">from</span> employees e<br><span class="hljs-keyword">join</span> job_grades j<br><span class="hljs-keyword">on</span> e.salary <span class="hljs-keyword">between</span> j.lowest_sal <span class="hljs-keyword">and</span> j.highest_sal<br></code></pre></td></tr></table></figure><ul><li>自连接</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">eg:查询员工的名字，上级的名字<br><span class="hljs-keyword">select</span> e.last_name,m.last_name<br><span class="hljs-keyword">from</span> employees e<br><span class="hljs-keyword">join</span> employees m<br><span class="hljs-keyword">on</span> e.manager_id <span class="hljs-operator">=</span> m.employee_id<br></code></pre></td></tr></table></figure><h4 id="2、外连接"><a href="#2、外连接" class="headerlink" title="2、外连接"></a>2、外连接</h4><blockquote><p>结果&#x3D; 主表中所有的行,其中从表和他匹配的将现实匹配行，如果从表没有匹配的则显示 null<br>left：左边的就是主表，right：右边的就是主表</p></blockquote><ul><li>左外连接:left  + outer(可选)</li><li>右外连接:right + outer(可选)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 查询列表<br><span class="hljs-keyword">from</span> table1 alias1 [连接类型:<span class="hljs-keyword">left</span><span class="hljs-operator">/</span><span class="hljs-keyword">right</span><span class="hljs-operator">/</span><span class="hljs-keyword">full</span> <span class="hljs-operator">+</span> <span class="hljs-keyword">outer</span>(可选)]<br><span class="hljs-keyword">join</span> table2 alias2<br><span class="hljs-keyword">on</span> 连接条件<br>&#123;<br><span class="hljs-keyword">where</span> 筛选条件<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 分组<br><span class="hljs-keyword">having</span> 筛选后条件<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>特点：</p><p>1、外连接的查询结果为主表中的所有记录</p><p>如果从表中有和它匹配的，则显示器匹配的值</p><p>如果表中没有和他匹配的，则显示 null</p><p>外连接查询结果&#x3D;内连接结果+主表中有而从表没有的记录</p><p>2、左外连接：left 左边的是主表</p><p>右外连接：right join 的右边是主表</p><p>3、左外和右外交换表顺序，可以得到相同结果</p></blockquote><ul><li>全外连接(mysql 不支持): full + outer(可选)</li></ul><blockquote><p>特点：</p><p>1、全外连接&#x3D;内连接+表 1 有表 2 没有+表 2 有表 1 没有</p></blockquote><h4 id="3、交叉连接"><a href="#3、交叉连接" class="headerlink" title="3、交叉连接"></a>3、交叉连接</h4><ul><li>cross:笛卡尔乘积</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> b.<span class="hljs-operator">*</span>, bo.<span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> beauty b<br><span class="hljs-keyword">cross</span> <span class="hljs-keyword">join</span> boys bo<br></code></pre></td></tr></table></figure><h2 id="7、子查询"><a href="#7、子查询" class="headerlink" title="7、子查询"></a>7、子查询</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs latex">定义：<br>一条查询语句中又嵌套了另一条完整的select语句，其中被嵌套的select语句，称为子查询或内查询<br>在外面的查询语句，称为主查询或外查询<br></code></pre></td></tr></table></figure><blockquote><p>分类：</p><p>按子查询出现的位置</p><p>select 后面：仅仅支持标量子查询</p><p>from 后面：支持表子查询</p><p>*where 或 having 后面：标量子查询   列子查询     行子查询</p><p>exists 后面</p><p>结果集的行列数不同：</p><p>标量子查询（结果只有一行一列）</p><p>列子查询（结果只有一列多行）</p><p>行子查询（结果集有多行多列）</p><p>表子查询（结果集）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 行子查询<br># 查询员工编号最小并且工资最高的员工信息<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> employees<br><span class="hljs-keyword">where</span> (employee_id, salary) <span class="hljs-operator">=</span> (<br>    <span class="hljs-keyword">select</span> <span class="hljs-built_in">MIN</span>(employee_id), <span class="hljs-built_in">MAX</span>(salary)<br>    <span class="hljs-keyword">from</span> employees<br>);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 查询每个部门的员工个数<br><span class="hljs-keyword">select</span> d.<span class="hljs-operator">*</span>,(<br>    <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<br>    <span class="hljs-keyword">from</span> employees e<br>    <span class="hljs-keyword">where</span> e.department_id <span class="hljs-operator">=</span> d.department_id<br>) 个数<br><span class="hljs-keyword">from</span> departments d<br></code></pre></td></tr></table></figure><blockquote><p>where 或 having 后面的特点：</p><p>1、子查询都放在小括号内</p><p>2、子查询可以放在 from 后面、select 后面、where 后面、having 后面，但一般放在条件的右侧</p><p>3、子查询优先于主查询执行，主查询使用了子查询的执行结果</p><p>4、子查询根据查询结果的行数不同分为以下两类：</p><p>单行子查询</p><p>结果集只有一行</p><p>一般搭配单行操作符使用：&gt; &lt; &#x3D; &lt;&gt; &gt;&#x3D; &lt;&#x3D;</p><p>非法使用子查询的情况：</p><p>a、子查询的结果为一组值</p><p>b、子查询的结果为空<br>多行子查询</p><p>结果集有多行</p><p>一般搭配多行操作符使用：any、all、in、not in</p><p>in&#x2F;not in： 属于子查询结果中的任意一个就行</p><p>all：和子查询返回的所有值比较</p><p>any|some:和子查询返回的某一个值比较</p></blockquote><h2 id="8、分页查询"><a href="#8、分页查询" class="headerlink" title="8、分页查询"></a>8、分页查询</h2><ul><li>应用场景：- 实际的 web 项目中需要根据用户的需求提交对应的分页查询的 sql 语句</li></ul><h3 id="1、语法："><a href="#1、语法：" class="headerlink" title="1、语法："></a>1、语法：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 字段<span class="hljs-operator">|</span>表达式,...<br><span class="hljs-keyword">from</span> 表<br>【<span class="hljs-keyword">where</span> 条件】<br>【<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 分组字段】<br>【<span class="hljs-keyword">having</span> 条件】<br>【<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 排序的字段】<br>limit 【起始的条目索引，】条目数;<br></code></pre></td></tr></table></figure><blockquote><p>特点：</p><p>1.起始条目索引从 0 开始</p><p>2.limit 子句放在查询语句的最后</p><p>3.公式：select _ from   表 limit （page-1）_sizePerPage,sizePerPage<br>假如:<br>每页显示条目数 sizePerPage</p></blockquote><blockquote><p>要显示的页数 page</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 查询语句中所有的关键字顺序<br><span class="hljs-keyword">select</span> 查询列表<br><span class="hljs-keyword">from</span> table1<br>连接类型 <span class="hljs-keyword">join</span> table2<br><span class="hljs-keyword">on</span> 连接条件<br><span class="hljs-keyword">where</span>  筛选条件<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 分组列表<br><span class="hljs-keyword">having</span> 分组后的筛选<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span>排序列表<br>limit 偏移，条目数<br></code></pre></td></tr></table></figure><h2 id="9、联合查询"><a href="#9、联合查询" class="headerlink" title="9、联合查询"></a>9、联合查询</h2><blockquote><p>引入：union 联合、合并</p><p>作用：</p><p>1、将多条查询语句的结果合并成一个结果</p><p>2、避免手动创建临时表，将多条语句查询结果联合在一起</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">语法：<br><br><span class="hljs-keyword">select</span> 字段<span class="hljs-operator">|</span>常量<span class="hljs-operator">|</span>表达式<span class="hljs-operator">|</span>函数 【<span class="hljs-keyword">from</span> 表】 【<span class="hljs-keyword">where</span> 条件】 <span class="hljs-keyword">union</span> 【<span class="hljs-keyword">all</span>】<br><span class="hljs-keyword">select</span> 字段<span class="hljs-operator">|</span>常量<span class="hljs-operator">|</span>表达式<span class="hljs-operator">|</span>函数 【<span class="hljs-keyword">from</span> 表】 【<span class="hljs-keyword">where</span> 条件】 <span class="hljs-keyword">union</span> 【<span class="hljs-keyword">all</span>】<br><span class="hljs-keyword">select</span> 字段<span class="hljs-operator">|</span>常量<span class="hljs-operator">|</span>表达式<span class="hljs-operator">|</span>函数 【<span class="hljs-keyword">from</span> 表】 【<span class="hljs-keyword">where</span> 条件】 <span class="hljs-keyword">union</span>  【<span class="hljs-keyword">all</span>】<br>.....<br><span class="hljs-keyword">select</span> 字段<span class="hljs-operator">|</span>常量<span class="hljs-operator">|</span>表达式<span class="hljs-operator">|</span>函数 【<span class="hljs-keyword">from</span> 表】 【<span class="hljs-keyword">where</span> 条件】<br></code></pre></td></tr></table></figure><blockquote></blockquote><blockquote><p>特点：</p><p>1、多条查询语句的查询的列数必须是一致的</p><p>2、多条查询语句的查询的列的类型几乎相同</p><p>3、union 代表去重，union all 代表不去重</p></blockquote><h1 id="六、DML-语言的学习"><a href="#六、DML-语言的学习" class="headerlink" title="六、DML 语言的学习"></a>六、DML 语言的学习</h1><h2 id="1、插入"><a href="#1、插入" class="headerlink" title="1、插入"></a>1、插入</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 语法：<br># 方法一<br># 可以插入多行<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> 表名(字段名，...)<br><span class="hljs-keyword">values</span>(值<span class="hljs-number">1</span>，...),(值<span class="hljs-number">2.</span>..),(值<span class="hljs-number">3.</span>..);<br># 支持子查询<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> beauty<br><span class="hljs-keyword">select</span> <span class="hljs-number">26</span>,<span class="hljs-string">&#x27;宋茜&#x27;</span>,<span class="hljs-string">&#x27;1196898339&#x27;</span>;<br># 方法二：只能插入一行，不支持子查询<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> 表名(字段名，...)<br><span class="hljs-keyword">set</span> 列名<span class="hljs-number">1</span><span class="hljs-operator">=</span>值<span class="hljs-number">1</span>，列名<span class="hljs-number">2</span><span class="hljs-operator">=</span>值<span class="hljs-number">2</span>，...<br></code></pre></td></tr></table></figure><p>特点：</p><ol><li>字段类型和值类型一致或兼容，而且一一对应</li><li>可以为空的字段，可以不用插入值，或用 null 填充</li><li>不可以为空的字段，必须插入值</li><li>字段个数和值的个数必须一致</li><li>字段可以省略，但默认所有字段，并且顺序和表中的存储顺序一致</li><li>字符型的用单引号引起来</li></ol><h2 id="2、修改"><a href="#2、修改" class="headerlink" title="2、修改"></a>2、修改</h2><h3 id="1、修改单表语法"><a href="#1、修改单表语法" class="headerlink" title="1、修改单表语法"></a>1、修改单表语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> 表名<br><span class="hljs-keyword">set</span> 字段<span class="hljs-operator">=</span>新值,字段<span class="hljs-operator">=</span>新值<br><span class="hljs-keyword">where</span> 条件<br></code></pre></td></tr></table></figure><h3 id="2、修改多表语法"><a href="#2、修改多表语法" class="headerlink" title="2、修改多表语法"></a>2、修改多表语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"># sql92语法<br><span class="hljs-keyword">update</span> 表<span class="hljs-number">1</span> 别名<span class="hljs-number">1</span>,表<span class="hljs-number">2</span> 别名<span class="hljs-number">2</span><br><span class="hljs-keyword">set</span> 字段<span class="hljs-operator">=</span>新值，字段<span class="hljs-operator">=</span>新值<br><span class="hljs-keyword">where</span> 连接条件<br><span class="hljs-keyword">and</span> 筛选条件<br><br># sql99语法<br><span class="hljs-keyword">update</span> table1 alias1<br><span class="hljs-keyword">inner</span> <span class="hljs-operator">|</span><span class="hljs-keyword">left</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> table2 alias2<br><span class="hljs-keyword">on</span> 连接条件<br><span class="hljs-keyword">set</span> 列<span class="hljs-operator">=</span>值<br><span class="hljs-keyword">where</span> 筛选条件<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"># eg:修改张无忌的女朋友的手机号为<span class="hljs-number">114</span><br><span class="hljs-keyword">update</span> boys bo<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> beauty b<br><span class="hljs-keyword">on</span> bo.id <span class="hljs-operator">=</span> b.boyfriend_id<br><span class="hljs-keyword">set</span> b.phone <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;114&#x27;</span><br><span class="hljs-keyword">where</span> bo.boyName <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张无忌&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="3、删除"><a href="#3、删除" class="headerlink" title="3、删除"></a>3、删除</h2><h3 id="1、delete-语句"><a href="#1、delete-语句" class="headerlink" title="1、delete 语句"></a>1、delete 语句</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 单表的删除:<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> 表名<br><span class="hljs-keyword">where</span> 筛选条件<br><br># 多表的删除：<br># sql92语法<br><span class="hljs-keyword">delete</span> 别名<span class="hljs-number">1</span>，别名<span class="hljs-number">2</span><br><span class="hljs-keyword">from</span> 表<span class="hljs-number">1</span> 别名<span class="hljs-number">1</span>，表<span class="hljs-number">2</span> 别名<span class="hljs-number">2</span><br><span class="hljs-keyword">where</span> 连接条件<br><span class="hljs-keyword">and</span> 筛选条件;<br><br># sql99语法<br><span class="hljs-keyword">delete</span> table1_alias, table2_alias<br><span class="hljs-keyword">from</span> table1 alias1<br><span class="hljs-keyword">inner</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">left</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">right</span> table2 alias2<br><span class="hljs-keyword">on</span> 连接条件<br><span class="hljs-keyword">where</span> 筛选条件<br></code></pre></td></tr></table></figure><h3 id="2、truncate-语句"><a href="#2、truncate-语句" class="headerlink" title="2、truncate 语句"></a>2、truncate 语句</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 使用时间：清空表<br><span class="hljs-keyword">truncate</span> <span class="hljs-keyword">table</span> 表名<br></code></pre></td></tr></table></figure><p>delete 和 truncate 的区别【面试题】</p><ol><li>truncate 不能加 where 条件，而 delete 可以加 where 条件</li><li>truncate 的效率高一丢丢</li><li>truncate 删除带自增长的列的表后，如果再插入数据，数据从 1 开始<br>delete 删除带自增长列的表后，如果再插入数据，数据从上一次的断点处开始</li><li>truncate 删除不能回滚，delete 删除可以回滚</li><li>truncate 删除没有返回值，delete 删除有返回值</li></ol><h1 id="3、DDL-语句"><a href="#3、DDL-语句" class="headerlink" title="3、DDL 语句"></a>3、DDL 语句</h1><h2 id="1、库和表的管理"><a href="#1、库和表的管理" class="headerlink" title="1、库和表的管理"></a>1、库和表的管理</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 库的管理：<br># <span class="hljs-number">1</span>、创建库<br><span class="hljs-keyword">create</span> database 库名<br># <span class="hljs-number">2</span>、删除库<br><span class="hljs-keyword">drop</span> database 库名<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs sql">表的管理：<br># <span class="hljs-number">1</span>、创建表<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> stuinfo(<br>    stuId <span class="hljs-type">INT</span>,<br>    stuName <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>    gender <span class="hljs-type">CHAR</span>,<br>    bornDate DATETIME<br>);<br># 查看表结构<br><span class="hljs-keyword">DESC</span> studentinfo;<br><br><br># <span class="hljs-number">2</span>、修改表 <span class="hljs-keyword">alter</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span><span class="hljs-operator">|</span>MODIFY<span class="hljs-operator">|</span><span class="hljs-keyword">DROP</span><span class="hljs-operator">|</span>CHANGE <span class="hljs-keyword">COLUMN</span> 字段名 【字段类型】;<br><br># 修改字段名<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> studentinfo CHANGE  <span class="hljs-keyword">COLUMN</span> sex gender <span class="hljs-type">CHAR</span>;<br><br># 修改表名<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> stuinfo RENAME [<span class="hljs-keyword">TO</span>]  studentinfo;<br><br># 修改字段类型和列级约束<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> studentinfo MODIFY <span class="hljs-keyword">COLUMN</span> borndate <span class="hljs-type">DATE</span> ;<br><br># 添加字段<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> studentinfo <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">COLUMN</span> email <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">first</span>;<br><br># 删除字段<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> studentinfo <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">COLUMN</span> email;<br><br><br><br># <span class="hljs-number">3</span>、删除表<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> [IF <span class="hljs-keyword">EXISTS</span>] studentinfo;<br><br><br># <span class="hljs-number">4</span>、表的复制<br># <span class="hljs-number">1</span>、仅复制表结构<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">copy</span> <span class="hljs-keyword">like</span> author<br><br># <span class="hljs-number">2</span>、复制表结构和数据<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> copy2<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> author;<br><br># <span class="hljs-number">3</span>、只复制部分数据<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span>  copy3<br><span class="hljs-keyword">select</span> id,au_name<br><span class="hljs-keyword">from</span> author<br><span class="hljs-keyword">where</span> nation <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;中国&#x27;</span>;<br><br># <span class="hljs-number">4</span>、只复制表字段<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span>  copy3<br><span class="hljs-keyword">select</span> id,au_name<br><span class="hljs-keyword">from</span> author<br><span class="hljs-keyword">where</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><h2 id="2、常见类型"><a href="#2、常见类型" class="headerlink" title="2、常见类型"></a>2、常见类型</h2><ul><li>数值型<ul><li>整型：</li><li>小数：<ul><li>定点数：最大取值范围与 double 相同，给的 decimal 的有效范围由 M 和 D 决定<ul><li>DEC(M,D): M+2 字节</li><li>DECIMAL(M,D):M+2 字节</li></ul></li><li>浮点数<ul><li>float: 4 字节</li><li>double:8 字节</li></ul></li></ul></li></ul></li><li>字符型(串数据)<ul><li>较短文本：<ul><li>char</li><li>varchar</li></ul></li><li>较长文本：<ul><li>text</li><li>blob(较长二进制数据)</li></ul></li></ul></li><li>Enum 型：枚举类型，插入值必须是列表中指定值之一<ul><li>列表成员为 1 ～ 255，需要 1 个字节存储</li><li>列表成员为 255 ～ 65535，需要 2 个字节存储</li></ul></li><li>Set 类型：可以保存 0 ～ 64 个成员<ul><li>与 set 区别：set 一次可选取多个成员，enum 一次只能选一个</li><li>(成员数，字节数)&#x3D;(18,1),(916,2),(1724,3),(2532,4),(3364,8),(18,1),</li></ul></li><li>日期型       字节数 最小值                 最大值<ul><li>date       4     1000-01-01           9999-12-31</li><li>datetime   8     1000-01-01 00:00:00  9999-12-31 23:59:59</li><li>timestamp  4     19700101080001       2038 年某时刻</li><li>time       3     -838:59:59           838:59:59</li><li>year       1     1901                 2155</li><li>timestamp 和实际时区有关，更能反映实际日期，datetime 反映插入式的当地时区</li><li>timestamp 的属性受 mysql 版本和 sqlmode 的影响很大</li></ul></li></ul><ol><li>M:整数位数 + 小数位数<br>N:小数位数<br>如果超过范围，插入临界值</li><li>M，D 可省略<br>默认值分别为 10，0<br>float 和 double 根据插入数值的精度来缺点精度</li><li>定点型精度更高，要求插入的数值的精度较高如货币使用定点型</li><li>原则：<br>所选精度越简单越好，能保存数值的类型越小越好</li><li>char 和 varchar 比较<br>写法        M 的意思             特点       空间消耗 效率</li></ol><p>char     cahr(M)     最大字符数，可省略   固定长度   较高     高</p><p>varchar  varchar(M) 最大字符数，不可省略 可变长度   较低     低</p><ul><li>binary 和 varbinary 类型相似</li></ul><h2 id="3、常见约束"><a href="#3、常见约束" class="headerlink" title="3、常见约束"></a>3、常见约束</h2><h3 id="1、基本约束"><a href="#1、基本约束" class="headerlink" title="1、基本约束"></a>1、基本约束</h3><ul><li>NOT NULL:非空</li><li>DEFAULT:默认值，比如性别</li><li>UNIQUE:唯一性，可以为空</li><li>CHECK:检查约束，mysql 不支持</li><li>PRIMARY KEY:主键，保证该字段唯一性</li><li>FOREIGN KEY:外键，限制两个表的关系，保证该字段的值必须来自于主表关联列的值,<br>在从表添加外键约束，用于引用主表中某列的值<br>eg:学生专业编号，员工表部门编号，员工表工种编号</li></ul><h3 id="2、约束详解"><a href="#2、约束详解" class="headerlink" title="2、约束详解"></a>2、约束详解</h3><ul><li>添加约束的时机<ul><li>创建表时</li><li>修改表时</li></ul></li><li>约束添加分类<ul><li>列级约束<ul><li>六大约束都支持，但外键没有效果,除了外键都支持，不可以起约束名。可以追加多个，中间逗号隔开，没有顺序要求</li></ul></li><li>表级约束<ul><li>除了 not null，default，其他的都支持，可以起约束名，对主键无效</li></ul></li></ul></li></ul><h3 id="3、约束添加例子"><a href="#3、约束添加例子" class="headerlink" title="3、约束添加例子"></a>3、约束添加例子</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 添加表级约束<br><span class="hljs-keyword">create</span> database if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> students;<br>use studemts;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> stuinfo (<br>    id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key,<br>    stuName <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    gender <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">check</span> (gender <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;男&#x27;</span> <span class="hljs-keyword">or</span> gender <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;女&#x27;</span>)<br>    seat <span class="hljs-type">int</span> <span class="hljs-keyword">unique</span><br>    age <span class="hljs-type">int</span> <span class="hljs-keyword">default</span>  <span class="hljs-number">18</span><br>    majorId <span class="hljs-type">int</span> <span class="hljs-keyword">references</span> major(id)<br>);<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> major(<br>    id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key,<br>    majorName <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)<br>);<br><br># 添加表级约束<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> stuinfo(<br>    id <span class="hljs-type">int</span> ,<br>    stuName <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>    gender <span class="hljs-type">char</span>(<span class="hljs-number">1</span>),<br>    seat <span class="hljs-type">int</span>,<br>    age <span class="hljs-type">int</span> <span class="hljs-keyword">default</span>  <span class="hljs-number">18</span>,<br>    majorId <span class="hljs-type">int</span>,<br>    <span class="hljs-keyword">constraint</span> pk <span class="hljs-keyword">primary</span> key (id),<br>    <span class="hljs-keyword">constraint</span> uq <span class="hljs-keyword">unique</span>(seat),<br>    <span class="hljs-keyword">constraint</span> ck <span class="hljs-keyword">check</span> ( gender <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;男&#x27;</span> <span class="hljs-keyword">or</span> gender <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;女&#x27;</span> ),<br>    <span class="hljs-keyword">constraint</span> fk <span class="hljs-keyword">foreign</span> key (majorId) <span class="hljs-keyword">references</span> major(id)<br>)<br><br># 通用写法<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> stuinfo(<br>    id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key ,<br>    stuName <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> ,<br>    gender <span class="hljs-type">char</span>(<span class="hljs-number">1</span>),<br>    age <span class="hljs-type">int</span> <span class="hljs-keyword">default</span> <span class="hljs-number">18</span>,<br>    seat <span class="hljs-type">int</span> <span class="hljs-keyword">unique</span> ,<br>    majorId <span class="hljs-type">int</span>,<br>    <span class="hljs-keyword">constraint</span> fk_stuinfo_major <span class="hljs-keyword">foreign</span> key (majorId) <span class="hljs-keyword">references</span> major(id)<br></code></pre></td></tr></table></figure><ol><li>主键和唯一的区别：</li></ol><p>主键 唯一性 不允许为空 至多一个   可以组合（不推荐）</p><p>唯一 唯一性 允许为空   可以多个   可以组合（不推荐</p><ol start="2"><li>外键：</li></ol><p>要求在从表设置外键</p><p>从表的外键列的类型必须跟主表的类型一直或兼容，名称无要求</p><p>从表的关联列必须是一个 key,一般是主键或唯一</p><p>插入数据时，先主表再从表；删除数据时，先从表再主表</p><ol start="3"><li>添加列级约束</li></ol><p>alter table tableName modify column 字段名 字段类型 新约束</p><p>添加表级约束</p><p>alter table 表名 add constraint 约束名 约束类型(字段名) 外键的引用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">#  创建表时设置自增<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> table1(<br>  <span class="hljs-type">int</span> id auto_increment<br>)<br><br># 修改表时设置自增长列<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> table1 modify <span class="hljs-keyword">column</span> 字段名 字段类型 约束 auto_increment<br></code></pre></td></tr></table></figure><ol start="4"><li>自增长列</li></ol><p>不用手动插入值，可以自动提供序列值，默认从 1 开始，步长为 1</p><p>如果要更改起始值，手动插入值；要更改步长，修改系统设置</p><p>auto_increment_increment&#x3D;步长</p><p>一个表至多有一个自增长列，仅支持数值型</p><p>必须为一个 key（mysql 要求）</p><h1 id="七、数据库事务"><a href="#七、数据库事务" class="headerlink" title="七、数据库事务"></a>七、数据库事务</h1><ul><li>含义:通过一组逻辑操作单元（一组 DML——sql 语句），将数据从一种状态切换到另外一种状态</li></ul><p>特点:ACID）</p><p>原子性(Atomicity)：要么都执行，要么都回滚</p><p>一致性(Consistency)：保证数据的状态操作前和操作后保持一致</p><p>隔离性(Lsolation)：多个事务同时操作相同数据库的同一个数据时，一个事务的执行不受另外一个事务的干扰</p><p>持久性(Durability)：一个事务一旦提交，则数据将持久化到本地，除非其他事务对其进行修改</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs latex">相关步骤：<br>1. 开启事务<br>2. 编写事务的一组逻辑操作单元（多条sql语句）<br>3. 提交事务或回滚事务<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> engines # 查看存储引擎<br></code></pre></td></tr></table></figure><h2 id="1、事务的分类："><a href="#1、事务的分类：" class="headerlink" title="1、事务的分类："></a>1、事务的分类：</h2><h3 id="1、隐式事务：没有明显的开启和结束事务的标志"><a href="#1、隐式事务：没有明显的开启和结束事务的标志" class="headerlink" title="1、隐式事务：没有明显的开启和结束事务的标志"></a>1、隐式事务：没有明显的开启和结束事务的标志</h3><ul><li>insert、update、delete 语句本身就是一个事务</li></ul><h3 id="2、显式事务：具有明显的开启和结束事务的标志"><a href="#2、显式事务：具有明显的开启和结束事务的标志" class="headerlink" title="2、显式事务：具有明显的开启和结束事务的标志"></a>2、显式事务：具有明显的开启和结束事务的标志</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"># <span class="hljs-number">1</span>、开启事务<br><span class="hljs-keyword">set</span> autocommit <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;# 取消自动提交事务的功能<br><span class="hljs-keyword">start</span> transaction;# 可选的<br># <span class="hljs-number">2</span>、编写事务的一组逻辑操作单元（多条<span class="hljs-keyword">sql</span>语句）<br># 仅增删改查<br><span class="hljs-keyword">insert</span><br><span class="hljs-keyword">update</span><br><span class="hljs-keyword">delete</span><br><span class="hljs-keyword">truncate</span>不支持<span class="hljs-keyword">rollback</span><br><span class="hljs-number">3.</span> 提交事务或回滚事务,两者选一<br><span class="hljs-keyword">commit</span>;    # 提交<br><span class="hljs-keyword">rollback</span>; # 回滚<br></code></pre></td></tr></table></figure><p>###使用到的关键字</p><p>set autocommit&#x3D;0;<br>start transaction;<br>commit;<br>rollback;</p><p>savepoint   断点<br>commit to 断点<br>rollback to 断点</p><h2 id="3、事务的隔离级别"><a href="#3、事务的隔离级别" class="headerlink" title="3、事务的隔离级别:"></a>3、事务的隔离级别:</h2><p>事务并发问题如何发生？</p><p>当多个事务同时操作同一个数据库的相同数据时</p><p>事务的并发问题有哪些？</p><p>脏读：一个事务读取到     了另外一个事务未提交的数据</p><p>不可重复读：同一个事务中，多次读取到的数据不一致</p><p>幻读：一个事务读取数据时，另外一个事务进行更新，导致第一个事务读取到了没有更新的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 如何避免事务的并发问题？<br># 设置隔离级别：<br><span class="hljs-keyword">set</span> session<span class="hljs-operator">|</span><span class="hljs-keyword">global</span> transaction isolation level 隔离级别名;<br># 查看隔离级别：<br><span class="hljs-keyword">select</span> @<span class="hljs-variable">@transaction</span>_isolation;<br></code></pre></td></tr></table></figure><table><thead><tr><th></th><th>脏读</th><th>不可重复读</th><th>幻读</th><th>ORACLE 支持</th><th>MYSQL 支持</th></tr></thead><tbody><tr><td>READ_UNCOMMITTED</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>READ_COMMITTED</td><td>N</td><td>Y</td><td>Y</td><td>N</td><td>Y</td></tr><tr><td>REPEATABLE_READ：一把行锁</td><td>N</td><td>N</td><td>Y</td><td>N</td><td>Y</td></tr><tr><td>SERIALIZABLE：表锁</td><td>N</td><td>N</td><td>N</td><td>Y</td><td>Y</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"># <span class="hljs-keyword">savepoint</span>的使用<br><span class="hljs-keyword">set</span> autocommit  <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">start</span> transaction ;<br><span class="hljs-keyword">delete</span>  <span class="hljs-keyword">from</span> account <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">25</span>;<br># 设置保存点<br><span class="hljs-keyword">savepoint</span> a;<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> account <span class="hljs-keyword">where</span>  id <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br># 回滚到保存点<br><span class="hljs-keyword">rollback</span> <span class="hljs-keyword">to</span> a;<br></code></pre></td></tr></table></figure><h1 id="八、视图"><a href="#八、视图" class="headerlink" title="八、视图"></a>八、视图</h1><p>理解成一张虚拟的表,mysql-5.0.1 新特性</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs latex">视图和表的区别：<br>            关键字      使用方式    占用物理空间                使用<br>视图view       完全相同    不占用，仅仅保存的是sql逻辑  一般用于查询<br>表    table      完全相同    占用,保存实际数据           增删改查<br></code></pre></td></tr></table></figure><p>视图的好处：</p><ol><li>sql 语句实现了封装性，提高重用性，效率高</li><li>和表实现了分离，提高了安全性</li><li>保护数据，提高安全性</li><li>简化复杂 sql，不必知道其查询细节</li></ol><h2 id="1、视图的创建"><a href="#1、视图的创建" class="headerlink" title="1、视图的创建"></a>1、视图的创建</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span>  视图名<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">select</span> stuName,majorId;<br><span class="hljs-keyword">from</span> stuinfo s<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> major m <span class="hljs-keyword">on</span> s.majorId <span class="hljs-operator">=</span> m.id<br></code></pre></td></tr></table></figure><h2 id="2、视图的增删改查"><a href="#2、视图的增删改查" class="headerlink" title="2、视图的增删改查"></a>2、视图的增删改查</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"># <span class="hljs-number">1</span>、查看视图的数据 ★<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> my_v4;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> my_v1 <span class="hljs-keyword">WHERE</span> last_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Partners&#x27;</span>;<br><br># <span class="hljs-number">2</span>、插入视图的数据<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> my_v4(last_name,department_id) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;虚竹&#x27;</span>,<span class="hljs-number">90</span>);<br><br># <span class="hljs-number">3</span>、修改视图的数据<br><span class="hljs-keyword">UPDATE</span> my_v4 <span class="hljs-keyword">SET</span> last_name <span class="hljs-operator">=</span><span class="hljs-string">&#x27;梦姑&#x27;</span> <span class="hljs-keyword">WHERE</span> last_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;虚竹&#x27;</span>;<br><br># <span class="hljs-number">4</span>、删除视图的数据<br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> my_v4;<br><br># <span class="hljs-number">5</span>、视图结构的查看<br><span class="hljs-keyword">DESC</span> test_v7;<br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> test_v7;<br></code></pre></td></tr></table></figure><h2 id="3、某些视图不能更新"><a href="#3、某些视图不能更新" class="headerlink" title="3、某些视图不能更新"></a>3、某些视图不能更新</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs latex">包含以下关键字的sql语句：分组函数、distinct、group  by、having、union或者union all<br>常量视图<br>Select中包含子查询<br>join<br>from一个不能更新的视图<br>where子句的子查询引用了from子句中的表<br>    用到了不可更新的视图<br></code></pre></td></tr></table></figure><h2 id="4、视图逻辑的更新"><a href="#4、视图逻辑的更新" class="headerlink" title="4、视图逻辑的更新"></a>4、视图逻辑的更新</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">#方式一：<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-keyword">VIEW</span> test_v7<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> last_name <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> employee_id100;<br><br>#方式二:<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">VIEW</span> test_v7<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> employee_id <span class="hljs-keyword">FROM</span> employees;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> test_v7;<br></code></pre></td></tr></table></figure><h1 id="九、变量"><a href="#九、变量" class="headerlink" title="九、变量"></a>九、变量</h1><h2 id="1、变量分类"><a href="#1、变量分类" class="headerlink" title="1、变量分类"></a>1、变量分类</h2><ul><li>系统变量<ul><li>全局变量:针对于所有会话（连接）有效，但不能跨重启</li><li>会话变量:针对于当前会话（连接）有效</li></ul></li><li>自定义变量<ul><li>用户变量</li><li>局部变量</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 系统变量<br># <span class="hljs-number">1</span>、查看所有系统变量<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">global</span> <span class="hljs-operator">|</span> session(<span class="hljs-keyword">default</span>) variables;<br># <span class="hljs-number">2</span>、查看满足条件的变量<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">global</span> <span class="hljs-operator">|</span> session variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;char&#x27;</span>;<br># <span class="hljs-number">3</span>、查看某个具体的变量<br><span class="hljs-keyword">select</span> @@系统变量名<br># <span class="hljs-number">4</span>、为某个系统变量赋值<br><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> <span class="hljs-operator">|</span>session 系统变量名 <span class="hljs-operator">=</span> 值<br><span class="hljs-keyword">set</span> @<span class="hljs-variable">@global</span> <span class="hljs-operator">|</span>session.系统变量名 <span class="hljs-operator">=</span> 值<br><br><br># 自定义变量<br># 用户变量<br># 声明并初始化：<br><span class="hljs-keyword">SET</span> @变量名<span class="hljs-operator">=</span>值;<br><span class="hljs-keyword">SET</span> @变量名:<span class="hljs-operator">=</span>值;<br><span class="hljs-keyword">SELECT</span> @变量名:<span class="hljs-operator">=</span>值;<br># 赋值<br># 方式一：一般用于赋简单的值<br><span class="hljs-keyword">SET</span> 变量名<span class="hljs-operator">=</span>值;<br><span class="hljs-keyword">SET</span> 变量名:<span class="hljs-operator">=</span>值;<br><span class="hljs-keyword">SELECT</span> 变量名:<span class="hljs-operator">=</span>值;<br># 方式二：一般用于赋表 中的字段值<br><span class="hljs-keyword">SELECT</span> 字段名或表达式 <span class="hljs-keyword">INTO</span> 变量<br><span class="hljs-keyword">FROM</span> 表;<br># 使用：<br><span class="hljs-keyword">select</span> @变量名;<br><br># 局部变量<br># 声明：<br><span class="hljs-keyword">declare</span> 变量名 类型 【<span class="hljs-keyword">default</span> 值】;<br># 赋值：<br># 方式一：一般用于赋简单的值<br><span class="hljs-keyword">SET</span> 变量名<span class="hljs-operator">=</span>值;<br><span class="hljs-keyword">SET</span> 变量名:<span class="hljs-operator">=</span>值;<br><span class="hljs-keyword">SELECT</span> 变量名:<span class="hljs-operator">=</span>值;<br># 方式二：一般用于赋表 中的字段值<br><span class="hljs-keyword">SELECT</span> 字段名或表达式 <span class="hljs-keyword">INTO</span> 变量<br><span class="hljs-keyword">FROM</span> 表;<br># 使用：<br><span class="hljs-keyword">select</span> 变量名<br><br> 作用域定义位置语法<br>用户变量当前会话会话的任何地方加@符号，不用指定类型<br>局部变量定义它的<span class="hljs-keyword">BEGIN</span> <span class="hljs-keyword">END</span>中 <span class="hljs-keyword">BEGIN</span> <span class="hljs-keyword">END</span>的第一句话一般不用加@,需要指定类型<br></code></pre></td></tr></table></figure><h1 id="十、存储过程和函数"><a href="#十、存储过程和函数" class="headerlink" title="十、存储过程和函数"></a>十、存储过程和函数</h1><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><p>含义：一组经过预先编译的 sql 语句的集合,类似于 java 的方法</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs latex">好处：<br><br>1、提高了sql语句的重用性，减少了开发程序员的压力<br>2、提高了效率<br>3、减少了传输次数<br></code></pre></td></tr></table></figure><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li>1、无返回无参</li><li>2、仅仅带 in 类型，无返回有参</li><li>3、仅仅带 out 类型，有返回无参</li><li>4、既带 in 又带 out，有返回有参</li><li>5、带 inout，有返回有参</li><li>注意：in、out、inout 都可以在一个存储过程中带多个</li></ul><h3 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> 存储过程名(<span class="hljs-keyword">in</span><span class="hljs-operator">|</span><span class="hljs-keyword">out</span><span class="hljs-operator">|</span><span class="hljs-keyword">inout</span> 参数名  参数类型,...)<br><span class="hljs-keyword">begin</span><br>    存储过程体<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs latex">类似于方法：<br>修饰符 返回类型 方法名(参数类型 参数名,...)&#123;<br>    方法体;<br>&#125;<br>注意<br>1、需要设置新的结束标记<br>delimiter 新的结束标记<br>示例：<br>delimiter <span class="hljs-built_in">$</span><br>CREATE PROCEDURE 存储过程名(IN|OUT|INOUT 参数名  参数类型,...)<br>BEGIN<br>sql语句1;<br>sql语句2;<br>END <span class="hljs-built_in">$</span><br>2、存储过程体中可以有多条sql语句，每条末尾必须加;如果仅仅一条sql语句，则可以省略begin end<br>3、参数前面的符号的意思<br>in:该参数只能作为输入 （该参数不能做返回值）<br>out：该参数只能作为输出（该参数只能做返回值）<br>inout：既能做输入又能做输出<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 创建存储过程<br>delimiter $<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> mypl()<br><span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> admin(username, password)<br>    <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;john1&#x27;</span>,<span class="hljs-string">&#x27;lqs&#x27;</span>),(<span class="hljs-string">&#x27;john1&#x27;</span>,<span class="hljs-string">&#x27;lqs&#x27;</span>),(<span class="hljs-string">&#x27;john1&#x27;</span>,<span class="hljs-string">&#x27;lqs&#x27;</span>),(<span class="hljs-string">&#x27;john1&#x27;</span>,<span class="hljs-string">&#x27;lqs&#x27;</span>);<br><span class="hljs-keyword">end</span> $<br><span class="hljs-keyword">call</span> mypl()$<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> admin$<br><br># 创建带<span class="hljs-keyword">in</span>模式参数带存储过程<br>delimiter $<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> myp2(<span class="hljs-keyword">in</span> beauty <span class="hljs-type">varchar</span> (<span class="hljs-number">20</span>))<br><span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">select</span> bo.<span class="hljs-operator">*</span><br>    <span class="hljs-keyword">from</span> boys bo<br>    <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> beauty b <span class="hljs-keyword">on</span> bo.id <span class="hljs-operator">=</span> b.boyfriend_id<br>    <span class="hljs-keyword">where</span> b.name <span class="hljs-operator">=</span> beautyName;<br><span class="hljs-keyword">end</span> $<br><span class="hljs-keyword">call</span> myp2(<span class="hljs-string">&#x27;小昭&#x27;</span>)<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> myp3(<span class="hljs-keyword">in</span> username <span class="hljs-type">varchar</span> (<span class="hljs-number">20</span>), <span class="hljs-keyword">in</span> password <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>))<br><span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-keyword">result</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span>; # 声明并初始化<br>    <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">into</span> <span class="hljs-keyword">result</span><br>    <span class="hljs-keyword">from</span> admin<br>    <span class="hljs-keyword">where</span> admin.username <span class="hljs-operator">=</span> username<br>    <span class="hljs-keyword">and</span> admin.password <span class="hljs-operator">=</span> password<br>    <span class="hljs-keyword">select</span> <span class="hljs-keyword">result</span>;<br><span class="hljs-keyword">end</span> $<br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>学过的函数：LENGTH、SUBSTR、CONCAT 等</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 创建函数<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> 函数名(参数名 参数类型,...) <span class="hljs-keyword">RETURNS</span> 返回类型<br><span class="hljs-keyword">BEGIN</span><br>    函数体<br><span class="hljs-keyword">END</span><br>###调用函数<br><span class="hljs-keyword">SELECT</span> 函数名（实参列表）<br></code></pre></td></tr></table></figure><h3 id="函数和存储过程的区别"><a href="#函数和存储过程的区别" class="headerlink" title="函数和存储过程的区别"></a>函数和存储过程的区别</h3><p>关键字 调用语法 返回值 应用场景<br>函数  FUNCTION SELECT 函数() 只能是一个 一般用于查询结果为一个值并返回时，当有返回值而且仅仅一个<br>存储过程 PROCEDURE CALL 存储过程() 可以有 0 个或多个 一般用于更新</p><h3 id="流程控制结构"><a href="#流程控制结构" class="headerlink" title="流程控制结构"></a>流程控制结构</h3><p>###分支<br>一、if 函数<br>语法：if(条件，值 1，值 2)<br>特点：可以用在任何位置</p><p>二、case 语句</p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql">情况一：类似于switch<br><span class="hljs-keyword">case</span> 表达式<br><span class="hljs-keyword">when</span> 值<span class="hljs-number">1</span> <span class="hljs-keyword">then</span> 结果<span class="hljs-number">1</span>或语句<span class="hljs-number">1</span>(如果是语句，需要加分号)<br><span class="hljs-keyword">when</span> 值<span class="hljs-number">2</span> <span class="hljs-keyword">then</span> 结果<span class="hljs-number">2</span>或语句<span class="hljs-number">2</span>(如果是语句，需要加分号)<br>...<br><span class="hljs-keyword">else</span> 结果n或语句n(如果是语句，需要加分号)<br><span class="hljs-keyword">end</span> 【<span class="hljs-keyword">case</span>】（如果是放在<span class="hljs-keyword">begin</span> <span class="hljs-keyword">end</span>中需要加上<span class="hljs-keyword">case</span>，如果放在<span class="hljs-keyword">select</span>后面不需要）<br><br>情况二：类似于多重if<br><span class="hljs-keyword">case</span><br><span class="hljs-keyword">when</span> 条件<span class="hljs-number">1</span> <span class="hljs-keyword">then</span> 结果<span class="hljs-number">1</span>或语句<span class="hljs-number">1</span>(如果是语句，需要加分号)<br><span class="hljs-keyword">when</span> 条件<span class="hljs-number">2</span> <span class="hljs-keyword">then</span> 结果<span class="hljs-number">2</span>或语句<span class="hljs-number">2</span>(如果是语句，需要加分号)<br>...<br><span class="hljs-keyword">else</span> 结果n或语句n(如果是语句，需要加分号)<br><span class="hljs-keyword">end</span> 【<span class="hljs-keyword">case</span>】（如果是放在<span class="hljs-keyword">begin</span> <span class="hljs-keyword">end</span>中需要加上<span class="hljs-keyword">case</span>，如果放在<span class="hljs-keyword">select</span>后面不需要）<br></code></pre></td></tr></table></figure><p>特点：<br>可以用在任何位置</p><p>三、if elseif 语句</p><p>语法：</p><p>if 情况 1 then 语句 1;<br>elseif 情况 2 then 语句 2;<br>…<br>else 语句 n;<br>end if;<br>特点：<br>只能用在 begin end 中！！！！！！！！！！！！！！！<br>三者比较：<br>应用场合<br>if 函数 简单双分支<br>case 结构 等值判断 的多分支<br>if 结构 区间判断 的多分支 ###循环</p><p>语法：<br>【标签：】WHILE 循环条件  DO<br>循环体<br>END WHILE 【标签】;</p><p>特点：<br>只能放在 BEGIN END 里面<br>如果要搭配 leave 跳转语句，需要使用标签，否则可以不用标签<br>leave 类似于 java 中的 break 语句，跳出所在循环！！！</p><ul><li>已看完 p-166</li></ul>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatisPlus体验及使用</title>
    <link href="/2022/08/13/yuque/MyBatisPlus%E4%BD%93%E9%AA%8C%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/08/13/yuque/MyBatisPlus%E4%BD%93%E9%AA%8C%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>MyBatis 的增强版，但是我现在用的不多，JPA 为主</p><span id="more"></span><h1 id="一、快速使用"><a href="#一、快速使用" class="headerlink" title="一、快速使用"></a>一、快速使用</h1><ul><li>1、编写 pojo</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String email;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>2、SpringBoot 添加扫描包</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@MapperScan(&quot;com.lqs.mybatisplusstart.mapper&quot;)</span> <span class="hljs-comment">//扫描mapper文件夹</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisplusstartApplication</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>SpringApplication.run(MybatisplusstartApplication.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>3、编写 mapper 接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 继承基本的BaseMapper</span><br><span class="hljs-comment"> * 传入泛型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二、配置日志"><a href="#二、配置日志" class="headerlink" title="二、配置日志"></a>二、配置日志</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br></code></pre></td></tr></table></figure><h1 id="三、CRUD-扩展"><a href="#三、CRUD-扩展" class="headerlink" title="三、CRUD 扩展"></a>三、CRUD 扩展</h1><h2 id="1、插入操作"><a href="#1、插入操作" class="headerlink" title="1、插入操作"></a>1、插入操作</h2><p>![](&#x2F;Users&#x2F;aries&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20200809123655241.png)</p><h2 id="2、主键生成策略"><a href="#2、主键生成策略" class="headerlink" title="2、主键生成策略"></a>2、主键生成策略</h2><h3 id="雪花算法"><a href="#雪花算法" class="headerlink" title="雪花算法"></a>雪花算法</h3><blockquote><p>SnowFlake 算法，是 Twitter 开源的分布式 id 生成算法。其核心思想就是：使用一个 64 bit 的 long 型的数字作为全局唯一 id。在分布式系统中的应用十分广泛，且 ID 引入了时间戳，基本上保持自增的。</p><p>这 64 个 bit 中，其中 1 个 bit 是不用的，然后用其中的 41 bit 作为毫秒数，用 10 bit 作为工作机器 id，12 bit 作为序列号。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">IdType</span> &#123;<br>    AUTO(<span class="hljs-number">0</span>),<span class="hljs-comment">//数据库ID自增</span><br>    NONE(<span class="hljs-number">1</span>),<span class="hljs-comment">//该类型为未设置主键类型</span><br><br>    INPUT(<span class="hljs-number">2</span>), <span class="hljs-comment">//用户输入ID，该类型可以通过自己注册自动填充插件进行填充</span><br><br>    <span class="hljs-comment">//以下3种类型、只有当插入对象ID 为空，才自动填充</span><br>    ID_WORKER(<span class="hljs-number">3</span>),<span class="hljs-comment">//全局唯一ID (idWorker)</span><br>    UUID(<span class="hljs-number">4</span>),<span class="hljs-comment">//全局唯一ID (UUID)</span><br>    ID_WORKER_STR(<span class="hljs-number">5</span>);<span class="hljs-comment">//字符串全局唯一ID (idWorker 的字符串表示)</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> key;<br>    IdType(<span class="hljs-type">int</span> key) &#123;<br>        <span class="hljs-built_in">this</span>.key = key;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、更新操作"><a href="#3、更新操作" class="headerlink" title="3、更新操作"></a>3、更新操作</h2><p>![](&#x2F;Users&#x2F;aries&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20200809124927435.png)</p><h2 id="4、自动填充"><a href="#4、自动填充" class="headerlink" title="4、自动填充"></a>4、自动填充</h2><p>创建时间，修改时间，一般自动化完成</p><ul><li>alibaba 开发手册：松油数据库表，gmt_create, gmt_modified 都必须有，需要自动化</li></ul><h3 id="1、数据库级别"><a href="#1、数据库级别" class="headerlink" title="1、数据库级别"></a>1、数据库级别</h3><blockquote><p>在表中增加字段，create_time, update_time</p></blockquote><p>![](&#x2F;Users&#x2F;aries&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20200809130842249.png)</p><blockquote><p>实体类添加属性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Date createTime;<br><span class="hljs-keyword">private</span> Date updateTime;<br></code></pre></td></tr></table></figure><h3 id="2、代码级别"><a href="#2、代码级别" class="headerlink" title="2、代码级别"></a>2、代码级别</h3><blockquote><p>不需要加特别的属性</p></blockquote><p>![](&#x2F;Users&#x2F;aries&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20200809132006113.png)</p><blockquote><p>添加属性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableField(fill = FieldFill.INSERT)</span><br><span class="hljs-keyword">private</span> Date createTime;<br><span class="hljs-meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span><br><span class="hljs-keyword">private</span> Date updateTime;<br></code></pre></td></tr></table></figure><blockquote><p>编写处理器</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMetaObjectHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MetaObjectHandler</span> &#123;<br>    <span class="hljs-comment">//插入的更新策略</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertFill</span><span class="hljs-params">(MetaObject metaObject)</span> &#123;<br>        Log.info(<span class="hljs-string">&quot;start insert fill...&quot;</span>);<br>        <span class="hljs-comment">//String fieldName, Object fieldVal, MetaObject metaObject</span><br>        <span class="hljs-built_in">this</span>.setFieldValByName(<span class="hljs-string">&quot;createTime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(), metaObject);<br>    &#125;<br>    <span class="hljs-comment">//更新的策略</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateFill</span><span class="hljs-params">(MetaObject metaObject)</span> &#123;<br>        Log.info(<span class="hljs-string">&quot;start insert update fill...&quot;</span>);<br>        <span class="hljs-built_in">this</span>.setFieldValByName(<span class="hljs-string">&quot;updateTime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(), metaObject);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5、乐-x2F-悲观锁"><a href="#5、乐-x2F-悲观锁" class="headerlink" title="5、乐&#x2F;悲观锁"></a>5、乐&#x2F;悲观锁</h2><blockquote><p>乐观锁：认为不会出现问题，做什么都不加锁。出现问题之后再次更新值测试</p><p>悲观锁：认为会出现问题，干什么都上锁，再去操作</p></blockquote><blockquote><p>增加 verison 字段</p></blockquote><p>![](&#x2F;Users&#x2F;aries&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20200809143706419.png)</p><blockquote><p>实体类增加对应的字段</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Version</span> <span class="hljs-comment">//乐观锁注解</span><br><span class="hljs-keyword">private</span> Integer version;<br></code></pre></td></tr></table></figure><blockquote><p>注册组件</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableTransactionManagement</span><br> <span class="hljs-comment">//扫描mapper文件夹,将主类的配置拿到此处</span><br><span class="hljs-meta">@MapperScan(&quot;com.lqs.mybatisplusstart.mapper&quot;)</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisPlusConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span> <span class="hljs-comment">//注册乐观锁插件</span><br>    <span class="hljs-keyword">public</span> OptimisticLockerInterceptor <span class="hljs-title function_">optimisticLockerInterceptor</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OptimisticLockerInterceptor</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6、分页查询"><a href="#6、分页查询" class="headerlink" title="6、分页查询"></a>6、分页查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testPage</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//current:当前页面，size：页面大小</span><br>Page&lt;User&gt; objectPage = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>);<br>userMapper.selectPage(objectPage, <span class="hljs-literal">null</span>);<br>objectPage.getRecords().forEach(System.out::println);<br>objectPage.getTotal();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7、逻辑删除"><a href="#7、逻辑删除" class="headerlink" title="7、逻辑删除"></a>7、逻辑删除</h2><blockquote><p>例子：管理员可以查看被删除的东西，普通用户不可以</p></blockquote><blockquote><p>增加 deleted 字段</p></blockquote><p>![](&#x2F;Users&#x2F;aries&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20200809160321267.png)</p><blockquote><p>增加配置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ISqlInjector <span class="hljs-title function_">sqlInjector</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LogicSqlInjector</span>();<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">global-config:</span><br>    <span class="hljs-attr">db-config:</span><br>      <span class="hljs-comment">#逻辑删除</span><br>      <span class="hljs-attr">logic-delete-value:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">logic-not-delete-value:</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ORM</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker教程</title>
    <link href="/2022/08/13/yuque/Docker%E6%95%99%E7%A8%8B/"/>
    <url>/2022/08/13/yuque/Docker%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>Docker 的出现，改变了以前传统开发部署运帷的繁琐步骤。作为新时代的开发者，必须掌握这门技术。课程来源：<a href="https://www.bilibili.com/video/BV1og4y1q7M4?p=1">bilibili 遇见狂神说</a></p><span id="more"></span><h1 id="Docker-概述"><a href="#Docker-概述" class="headerlink" title="Docker 概述"></a>Docker 概述</h1><h2 id="Docker-为什么出现？"><a href="#Docker-为什么出现？" class="headerlink" title="Docker 为什么出现？"></a>Docker 为什么出现？</h2><ul><li>开发运维环境不同，换设备就不能运行</li><li>希望项目能带上环境一起打包</li><li>更方便的配置集群</li><li>开发步骤<ul><li>传统：开发 jar，运维来做</li><li>现在：开发、打包、部署、上线</li></ul></li><li>Docker 给出了解决方案</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FmA32QVzUvUrUxF8aPlqlh-qU69y.png"></p><ul><li>类似于集装箱</li><li>Docker 通过隔离机制将服务器利用到极致</li><li>本质：需求驱动技术</li></ul><h2 id="Docker-历史"><a href="#Docker-历史" class="headerlink" title="Docker 历史"></a>Docker 历史</h2><ul><li>2010 年，几个年轻人成立一家公司 dotCloud，做一些云计算业务，有容器技术</li><li>经验遇到困难之后，2013 年将 Docker 开源</li><li>2014 年 4 月 9 日，Docker1.0 发布</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">vm: 需要下载 linux 镜像，体积大，配置要求高，启动慢，笨重；<br>docker: 隔离，寄生于宿主机，配置要求低，启动快，小巧。<br></code></pre></td></tr></table></figure><ul><li>Docker 基于 Go 语言开发</li><li>官网：<a href="https://www.docker.com/">https://www.docker.com/</a></li><li>文档地址：<a href="https://docs.docker.com/">https://docs.docker.com/</a></li><li>仓库地址：<a href="https://hub.docker.com/">https://hub.docker.com/</a></li></ul><blockquote><p>DevOps（开发、运维）</p></blockquote><p><strong>应用更快速的交互和部署</strong></p><p>传统：一堆帮助文档，安装程序</p><p>Docker：打包镜像发布测试，一件运行</p><p><strong>更快捷的升级和扩缩容</strong></p><p>部署应用就像搭积木</p><p>项目打包为镜像，扩展，服务器 A，服务器 B</p><p><strong>更简单的系统运维</strong></p><p>开发测试环境高度一致</p><p><strong>更高效的计算资源利用</strong></p><p>Docker 是内核级虚拟化，一个物理机可运行很多容器实例</p><h1 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h1><h2 id="Docker-基本组成"><a href="#Docker-基本组成" class="headerlink" title="Docker 基本组成"></a>Docker 基本组成</h2><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FrEAzJxJkiNs15utNfU5CQfgNv-3.png"></p><h3 id="镜像（image）"><a href="#镜像（image）" class="headerlink" title="镜像（image）"></a>镜像（image）</h3><blockquote><p>一个模板，可以通过这个模板来创建容器服务。tomcat 镜像&#x3D;&#x3D; &gt;run&#x3D;&#x3D;&#x3D;&gt;tomcat01 容器，通过这个惊喜可以创建多个容器</p></blockquote><h3 id="容器（container）"><a href="#容器（container）" class="headerlink" title="容器（container）"></a>容器（container）</h3><blockquote><p>Docker 利用容器技术，独立运行一个或一组应用</p></blockquote><h3 id="仓库（repository）"><a href="#仓库（repository）" class="headerlink" title="仓库（repository）"></a>仓库（repository）</h3><blockquote><p>存放镜像的地方。分为共有仓库和私有仓库</p><p>Docker Hub 默认为国外的，可以使用国内地址加速</p></blockquote><h2 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">官网：https://docs.docker.com/get-docker/</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Mac</span><br>brew cask install docker<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Centos</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">卸载老版本</span><br>sudo yum remove docker \<br>                  docker-client \<br>                  docker-client-latest \<br>                  docker-common \<br>                  docker-latest \<br>                  docker-latest-logrotate \<br>                  docker-logrotate \<br>                  docker-engine<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置存储库</span><br>sudo yum install -y yum-utils<br>sudo yum-config-manager \<br>    --add-repo \<br>    https://download.docker.com/linux/centos/docker-ce.repo<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装Docker引擎</span><br>sudo yum install docker-ce docker-ce-cli containerd.io<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装docker-compose</span><br>sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose<br>sudo chmod +x /usr/local/bin/docker-compose<br>sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动Docker</span><br>sudo systemctl start docker<br><span class="hljs-meta prompt_"># </span><span class="language-bash">运行hello-world</span><br>sudo docker run hello-world<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">镜像加速</span><br>sudo mkdir -p /etc/docker<br>sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;<br>&#123;<br>  &quot;registry-mirrors&quot;: [&quot;https://qtpwk07g.mirror.aliyuncs.com&quot;]<br>&#125;<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure><h2 id="HelloWorld-流程"><a href="#HelloWorld-流程" class="headerlink" title="HelloWorld 流程"></a>HelloWorld 流程</h2><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FmTjHWXCnl90nXLLlU6gYH8zgd9e.png"></p><h2 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h2><ul><li>Docker 是一个 Server-Client 架构的系统，Docker 守护进程运行在主机上，通过 Client 访问</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FpoCSlbUaEKsH47haupN02w7fmiZ.png"></p><ul><li>为什么 Docker 比 VM 快？<ul><li>Docker 有着比虚拟机更少的抽象层</li><li>Docker 利用宿主机内核，VM 需要 Guest OS</li></ul></li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FrGfuT8fXXZDME4mMiSz3oUvWmDy.png"></p><ul><li>Docker &amp;&amp; LXC &amp;&amp; VM 对比<table><thead><tr><th></th><th>Docker 容器</th><th>LXC</th><th>VM</th></tr></thead><tbody><tr><td>虚拟化类型</td><td>OS 虚拟化</td><td>OS 虚拟化</td><td>硬件虚拟化</td></tr><tr><td>性能</td><td>物理机性能</td><td>物理机性能</td><td>5%–20%损耗</td></tr><tr><td>隔离型</td><td>NS 隔离</td><td>NS 隔离</td><td>强</td></tr><tr><td>QoS</td><td>Cgroup 弱</td><td>Cgroup 弱</td><td>强</td></tr><tr><td>安全性</td><td>中</td><td>差</td><td>强</td></tr><tr><td>GuestOS</td><td>全部</td><td>只支持 Linux</td><td>全部</td></tr><tr><td>可迁移性</td><td>强</td><td>弱</td><td>强</td></tr></tbody></table></li></ul><h1 id="Docker-常用命令"><a href="#Docker-常用命令" class="headerlink" title="Docker 常用命令"></a>Docker 常用命令</h1><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><p>帮助文档地址：<a href="https://docs.docker.com/engine/reference/commandline/">https://docs.docker.com/engine/reference/commandline/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看版本信息</span><br>docker version<br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示docker系统信息，包括镜像</span><br>docker info<br><span class="hljs-meta prompt_"># </span><span class="language-bash">万能命令</span><br>docker 命令 --help<br></code></pre></td></tr></table></figure><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><h3 id="docker-images"><a href="#docker-images" class="headerlink" title="docker images"></a>docker images</h3><ul><li>查看本地所有主机上的镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@server1 ~]# docker images<br>REPOSITORY    TAG       IMAGE ID       CREATED         SIZE<br>mysql         latest    dd7265748b5d   9 days ago      545MB<br>hello-world   latest    bf756fb1ae65   11 months ago   13.3kB<br><span class="hljs-meta prompt_"># </span><span class="language-bash">可选项</span><br>-a, -all# 列出所有镜像<br>-q, -quiet# 只显示镜像id<br></code></pre></td></tr></table></figure><h3 id="docker-search"><a href="#docker-search" class="headerlink" title="docker search"></a>docker search</h3><ul><li>搜索镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@server1 ~]# docker search mysql<br>NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED<br>mysql                             MySQL is a widely used, open-source relation…   10202     [OK]<br>mariadb                           MariaDB is a community-developed fork of MyS…   3753      [OK]<br>mysql/mysql-server                Optimized MySQL Server Docker images. Create…   746                  [OK]<br>percona                           Percona Server is a fork of the MySQL relati…   511       [OK]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">可选项</span><br>--filter=STARS=3000# 搜索出来的镜像STARS大于3000<br></code></pre></td></tr></table></figure><h3 id="docker-pull"><a href="#docker-pull" class="headerlink" title="docker pull"></a>docker pull</h3><ul><li>下载镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@server1 ~]# docker pull tomcat<br>Using default tag: latest<br>latest: Pulling from library/tomcat# 不写tag默认为latest<br>756975cb9c7e: Pull complete# 分层下载，docker image的核心，联合文件系统<br>d77915b4e630: Pull complete<br>5f37a0a41b6b: Pull complete<br>96b2c1e36db5: Pull complete<br>27a2d52b526e: Pull complete<br>a867dba77389: Pull complete<br>0939c055fb79: Pull complete<br>0b0694ce0ae2: Pull complete<br>81a5f8099e05: Pull complete<br>c3d7917d545e: Pull complete<br>Digest: sha256:a319b10d8729817c7ce0bcc2343a6f97711c7870395019340d96b6aafd6ccbea# 签名<br>Status: Downloaded newer image for tomcat:latest<br>docker.io/library/tomcat:latest#真实地址<br><br>docker pull tomcat === docker pull docker.io/library/tomcat:latest<br><br><br>[root@server1 ~]# docker pull mysql:5.7<br>5.7: Pulling from library/mysql<br>852e50cd189d: Already exists# 联合文件系统，已存在的不需要再下载<br>29969ddb0ffb: Already exists<br>a43f41a44c48: Already exists<br>5cdd802543a3: Already exists<br>b79b040de953: Already exists<br>938c64119969: Already exists<br>7689ec51a0d9: Already exists<br>36bd6224d58f: Pull complete<br>cab9d3fa4c8c: Pull complete<br>1b741e1c47de: Pull complete<br>aac9d11987ac: Pull complete<br>Digest: sha256:8e2004f9fe43df06c3030090f593021a5f283d028b5ed5765cc24236c2c4d88e<br>Status: Downloaded newer image for mysql:5.7<br>docker.io/library/mysql:5.7<br></code></pre></td></tr></table></figure><h3 id="docker-rmi"><a href="#docker-rmi" class="headerlink" title="docker rmi"></a>docker rmi</h3><ul><li>删除镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">删除指定<span class="hljs-built_in">id</span>的镜像</span><br>[root@server1 ~]# docker rmi -f ae0658fdbad5<br>Untagged: mysql:5.7<br>Untagged: mysql@sha256:8e2004f9fe43df06c3030090f593021a5f283d028b5ed5765cc24236c2c4d88e<br>Deleted: sha256:ae0658fdbad5fb1c9413c998d8a573eeb5d16713463992005029c591e6400d02<br>Deleted: sha256:a2cf831f4221764f4484ff0df961b54f1f949ed78220de1b24046843c55ac40f<br>Deleted: sha256:0a7adcc95a91b1ec2beab283e0bfce5ccd6df590bd5a5e894954fcf27571e7f5<br>Deleted: sha256:0fae465cbacf7c99aa90bc286689bc88a35d086f37fd931e03966d312d5dfb10<br>Deleted: sha256:23af125b9e54a94c064bdfacc2414b1c8fba288aff48308e8117beb08b38cb19<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除多个镜像</span><br>[root@server1 ~]# docker rmi -f imageid1, imageid2,imageid3<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除所有镜像</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">可命令嵌套</span><br>[root@server1 ~]# docker rmi -f $(docker images -aq)<br></code></pre></td></tr></table></figure><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><h3 id="docker-run"><a href="#docker-run" class="headerlink" title="docker run"></a>docker run</h3><ul><li>开启新容器并运行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">先ntos镜像</span><br>docker pull centos<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">新建容器并启动</span><br>docker run [可选参数] image<br><span class="hljs-meta prompt_"># </span><span class="language-bash">参数说明</span><br>--name=&quot;Name&quot;# 指定容器名字<br>-d# 后台方式运行<br>-i# 使用交互方式运行，进入容器查看内容<br>-p# 指定容器端口<br>  -p ip:主机端口 : 容器端口<br>          -p 主机端口 : 容器端口<br>  -p 容器端口<br>-P# 指定随机端口<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">测试、启动并进入容器</span><br>[root@server1 ~]# docker run -it centos /bin/bash<br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用</span><br>[root@cd3299fcc032 /]# ls<br>bin  etc   lib  lost+found  mnt  proc  run   srv  tmp  var<br>dev  home  lib64  media       opt  root  sbin  sys  usr<br></code></pre></td></tr></table></figure><h3 id="docker-ps"><a href="#docker-ps" class="headerlink" title="docker ps"></a>docker ps</h3><ul><li>查看运行的容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看正在运行的容器</span><br>[root@server1 ~]# docker ps [可选参数<br>CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES<br>-a# 示所有容器<br>-n=7# 显示最近7个容器<br></code></pre></td></tr></table></figure><h3 id="exit"><a href="#exit" class="headerlink" title="exit"></a>exit</h3><ul><li>退出</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">退出容器且停止运行</span><br>[root@cd3299fcc032 opt]# exit<br>exit<br><span class="hljs-meta prompt_"># </span><span class="language-bash">退出容器且继续运行</span><br>Ctrl + P + Q<br></code></pre></td></tr></table></figure><h3 id="docker-rm"><a href="#docker-rm" class="headerlink" title="docker rm"></a>docker rm</h3><ul><li>删除容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">删除指定<span class="hljs-built_in">id</span>容器</span><br>docker rm 容器id<br>-f# 强制执行<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除所有容器</span><br>docker rm -f $(docker ps -aq)<br>docker ps -a -q | xargs docker rm<br></code></pre></td></tr></table></figure><h3 id="docker-start-x2F-restart-x2F-stop-x2F-kill"><a href="#docker-start-x2F-restart-x2F-stop-x2F-kill" class="headerlink" title="docker start&#x2F;restart&#x2F;stop&#x2F;kill"></a>docker start&#x2F;restart&#x2F;stop&#x2F;kill</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动容器</span><br>docker start 容器id<br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启容器</span><br>docker restart 容器id<br><span class="hljs-meta prompt_"># </span><span class="language-bash">停止当前正在运行的容器</span><br>docker stop 容器id<br><span class="hljs-meta prompt_"># </span><span class="language-bash">强制停止当前容器</span><br>docker kill 容器id<br></code></pre></td></tr></table></figure><h2 id="其他常用"><a href="#其他常用" class="headerlink" title="其他常用"></a>其他常用</h2><h3 id="1、后台启动容器"><a href="#1、后台启动容器" class="headerlink" title="1、后台启动容器"></a>1、后台启动容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@server1 ~]# docker run -d centos<br>a2e2c9f87dc9dea7a04221c4e159a71364e752cb572ee8c6a9722defc2a9713f<br>[root@server1 ~]# docker ps<br>CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES<br>[root@server1 ~]#<br><span class="hljs-meta prompt_"># </span><span class="language-bash">常见的坑：docker容器使用后台运行，必须有一个前台进程。docker没有发现应用，就自动停止</span><br></code></pre></td></tr></table></figure><h3 id="2、查看日志"><a href="#2、查看日志" class="headerlink" title="2、查看日志"></a>2、查看日志</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@server1 ~]# docker logs --help<br>Usage:  docker logs [OPTIONS] CONTAINER<br>Fetch the logs of a container<br><br>Options:<br>      --details        Show extra details provided to logs<br>  -f, --follow         Follow log output<br>      --since string   Show logs since timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)<br>  -n, --tail string    Number of lines to show from the end of the logs (default &quot;all&quot;)<br>  -t, --timestamps     Show timestamps<br>      --until string   Show logs before a timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)<br><br>[root@server1 ~]# docker run -d centos /bin/sh -c &quot;while true;do echo lqs;sleep 1;done&quot;<br>1d99006b4363eabcf1f33e5eec16fd45059dd5cdd400e6e05b3300fcd7b5e094<br>[root@server1 ~]# docker ps<br>CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS     NAMES<br>1d99006b4363   centos    &quot;/bin/sh -c &#x27;while t…&quot;   4 seconds ago   Up 2 seconds             sweet_pascal<br>4a48763c24a9   centos    &quot;/bin/sh -c &#x27;while t…&quot;   2 minutes ago   Up 2 minutes             cool_knuth<br>[root@server1 ~]# docker logs -tf --tail 10 1d99006b4363<br>2020-11-30T06:24:34.441977721Z lqs<br>2020-11-30T06:24:35.459814107Z lqs<br>2020-11-30T06:24:36.487265008Z lqs<br>2020-11-30T06:24:37.508551064Z lqs<br>2020-11-30T06:24:38.526719550Z lqs<br></code></pre></td></tr></table></figure><h3 id="3、查看进程信息"><a href="#3、查看进程信息" class="headerlink" title="3、查看进程信息"></a>3、查看进程信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@server1 ~]# docker top 1d99006b4363<br>UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD<br>root                476469              476326              0                   14:24               ?                   00:00:00            /bin/sh -c while true;do echo lqs;sleep 1;done<br>root                583733              476469              0                   14:29               ?                   00:00:00            /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1<br></code></pre></td></tr></table></figure><h3 id="4、查看元数据"><a href="#4、查看元数据" class="headerlink" title="4、查看元数据"></a>4、查看元数据</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><br>[root<span class="hljs-symbol">@server1</span> ~]<span class="hljs-meta"># docker inspect 1d99006b4363</span><br>[<br>    &#123;<br>        <span class="hljs-string">&quot;Id&quot;</span>: <span class="hljs-string">&quot;1d99006b4363eabcf1f33e5eec16fd45059dd5cdd400e6e05b3300fcd7b5e094&quot;</span>,<br>        <span class="hljs-string">&quot;Created&quot;</span>: <span class="hljs-string">&quot;2020-11-30T06:24:24.660296498Z&quot;</span>,<br>        <span class="hljs-string">&quot;Path&quot;</span>: <span class="hljs-string">&quot;/bin/sh&quot;</span>,<br>        <span class="hljs-string">&quot;Args&quot;</span>: [<br>            <span class="hljs-string">&quot;-c&quot;</span>,<br>            <span class="hljs-string">&quot;while true;do echo lqs;sleep 1;done&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;State&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;Status&quot;</span>: <span class="hljs-string">&quot;running&quot;</span>,<br>            <span class="hljs-string">&quot;Running&quot;</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-string">&quot;Paused&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;Restarting&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;OOMKilled&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;Dead&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;Pid&quot;</span>: <span class="hljs-number">476469</span>,<br>            <span class="hljs-string">&quot;ExitCode&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&quot;Error&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;StartedAt&quot;</span>: <span class="hljs-string">&quot;2020-11-30T06:24:26.324713861Z&quot;</span>,<br>            <span class="hljs-string">&quot;FinishedAt&quot;</span>: <span class="hljs-string">&quot;0001-01-01T00:00:00Z&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;Image&quot;</span>: <span class="hljs-string">&quot;sha256:0d120b6ccaa8c5e149176798b3501d4dd1885f961922497cd0abef155c869566&quot;</span>,<br>        <span class="hljs-string">&quot;ResolvConfPath&quot;</span>: <span class="hljs-string">&quot;/var/lib/docker/containers/1d99006b4363eabcf1f33e5eec16fd45059dd5cdd400e6e05b3300fcd7b5e094/resolv.conf&quot;</span>,<br>        <span class="hljs-string">&quot;HostnamePath&quot;</span>: <span class="hljs-string">&quot;/var/lib/docker/containers/1d99006b4363eabcf1f33e5eec16fd45059dd5cdd400e6e05b3300fcd7b5e094/hostname&quot;</span>,<br>        <span class="hljs-string">&quot;HostsPath&quot;</span>: <span class="hljs-string">&quot;/var/lib/docker/containers/1d99006b4363eabcf1f33e5eec16fd45059dd5cdd400e6e05b3300fcd7b5e094/hosts&quot;</span>,<br>        <span class="hljs-string">&quot;LogPath&quot;</span>: <span class="hljs-string">&quot;/var/lib/docker/containers/1d99006b4363eabcf1f33e5eec16fd45059dd5cdd400e6e05b3300fcd7b5e094/1d99006b4363eabcf1f33e5eec16fd45059dd5cdd400e6e05b3300fcd7b5e094-json.log&quot;</span>,<br>        <span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;/sweet_pascal&quot;</span>,<br>        <span class="hljs-string">&quot;RestartCount&quot;</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&quot;Driver&quot;</span>: <span class="hljs-string">&quot;overlay2&quot;</span>,<br>        <span class="hljs-string">&quot;Platform&quot;</span>: <span class="hljs-string">&quot;linux&quot;</span>,<br>        <span class="hljs-string">&quot;MountLabel&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;ProcessLabel&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;AppArmorProfile&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;ExecIDs&quot;</span>: <span class="hljs-literal">null</span>,<br>        <span class="hljs-string">&quot;HostConfig&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;Binds&quot;</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-string">&quot;ContainerIDFile&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;LogConfig&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;Type&quot;</span>: <span class="hljs-string">&quot;json-file&quot;</span>,<br>                <span class="hljs-string">&quot;Config&quot;</span>: &#123;&#125;<br>            &#125;,<br>            <span class="hljs-string">&quot;NetworkMode&quot;</span>: <span class="hljs-string">&quot;default&quot;</span>,<br>            <span class="hljs-string">&quot;PortBindings&quot;</span>: &#123;&#125;,<br>            <span class="hljs-string">&quot;RestartPolicy&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;no&quot;</span>,<br>                <span class="hljs-string">&quot;MaximumRetryCount&quot;</span>: <span class="hljs-number">0</span><br>            &#125;,<br>            <span class="hljs-string">&quot;AutoRemove&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;VolumeDriver&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;VolumesFrom&quot;</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-string">&quot;CapAdd&quot;</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-string">&quot;CapDrop&quot;</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-string">&quot;CgroupnsMode&quot;</span>: <span class="hljs-string">&quot;host&quot;</span>,<br>            <span class="hljs-string">&quot;Dns&quot;</span>: [],<br>            <span class="hljs-string">&quot;DnsOptions&quot;</span>: [],<br>            <span class="hljs-string">&quot;DnsSearch&quot;</span>: [],<br>            <span class="hljs-string">&quot;ExtraHosts&quot;</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-string">&quot;GroupAdd&quot;</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-string">&quot;IpcMode&quot;</span>: <span class="hljs-string">&quot;private&quot;</span>,<br>            <span class="hljs-string">&quot;Cgroup&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;Links&quot;</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-string">&quot;OomScoreAdj&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&quot;PidMode&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;Privileged&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;PublishAllPorts&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;ReadonlyRootfs&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;SecurityOpt&quot;</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-string">&quot;UTSMode&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;UsernsMode&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;ShmSize&quot;</span>: <span class="hljs-number">67108864</span>,<br>            <span class="hljs-string">&quot;Runtime&quot;</span>: <span class="hljs-string">&quot;runc&quot;</span>,<br>            <span class="hljs-string">&quot;ConsoleSize&quot;</span>: [<br>                <span class="hljs-number">0</span>,<br>                <span class="hljs-number">0</span><br>            ],<br>            <span class="hljs-string">&quot;Isolation&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;CpuShares&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&quot;Memory&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&quot;NanoCpus&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&quot;CgroupParent&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;BlkioWeight&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&quot;BlkioWeightDevice&quot;</span>: [],<br>            <span class="hljs-string">&quot;BlkioDeviceReadBps&quot;</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-string">&quot;BlkioDeviceWriteBps&quot;</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-string">&quot;BlkioDeviceReadIOps&quot;</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-string">&quot;BlkioDeviceWriteIOps&quot;</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-string">&quot;CpuPeriod&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&quot;CpuQuota&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&quot;CpuRealtimePeriod&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&quot;CpuRealtimeRuntime&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&quot;CpusetCpus&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;CpusetMems&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;Devices&quot;</span>: [],<br>            <span class="hljs-string">&quot;DeviceCgroupRules&quot;</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-string">&quot;DeviceRequests&quot;</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-string">&quot;KernelMemory&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&quot;KernelMemoryTCP&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&quot;MemoryReservation&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&quot;MemorySwap&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&quot;MemorySwappiness&quot;</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-string">&quot;OomKillDisable&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;PidsLimit&quot;</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-string">&quot;Ulimits&quot;</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-string">&quot;CpuCount&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&quot;CpuPercent&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&quot;IOMaximumIOps&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&quot;IOMaximumBandwidth&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&quot;MaskedPaths&quot;</span>: [<br>                <span class="hljs-string">&quot;/proc/asound&quot;</span>,<br>                <span class="hljs-string">&quot;/proc/acpi&quot;</span>,<br>                <span class="hljs-string">&quot;/proc/kcore&quot;</span>,<br>                <span class="hljs-string">&quot;/proc/keys&quot;</span>,<br>                <span class="hljs-string">&quot;/proc/latency_stats&quot;</span>,<br>                <span class="hljs-string">&quot;/proc/timer_list&quot;</span>,<br>                <span class="hljs-string">&quot;/proc/timer_stats&quot;</span>,<br>                <span class="hljs-string">&quot;/proc/sched_debug&quot;</span>,<br>                <span class="hljs-string">&quot;/proc/scsi&quot;</span>,<br>                <span class="hljs-string">&quot;/sys/firmware&quot;</span><br>            ],<br>            <span class="hljs-string">&quot;ReadonlyPaths&quot;</span>: [<br>                <span class="hljs-string">&quot;/proc/bus&quot;</span>,<br>                <span class="hljs-string">&quot;/proc/fs&quot;</span>,<br>                <span class="hljs-string">&quot;/proc/irq&quot;</span>,<br>                <span class="hljs-string">&quot;/proc/sys&quot;</span>,<br>                <span class="hljs-string">&quot;/proc/sysrq-trigger&quot;</span><br>            ]<br>        &#125;,<br>        <span class="hljs-string">&quot;GraphDriver&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;Data&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;LowerDir&quot;</span>: <span class="hljs-string">&quot;/var/lib/docker/overlay2/e43e6b4eee920ace4ce359c795615e673ba50bb70cee790a86d8feb26c999fa9-init/diff:/var/lib/docker/overlay2/591ddae90babb77b4ea29561acc558e678b309edbb5b91112a566c9c1fb48367/diff&quot;</span>,<br>                <span class="hljs-string">&quot;MergedDir&quot;</span>: <span class="hljs-string">&quot;/var/lib/docker/overlay2/e43e6b4eee920ace4ce359c795615e673ba50bb70cee790a86d8feb26c999fa9/merged&quot;</span>,<br>                <span class="hljs-string">&quot;UpperDir&quot;</span>: <span class="hljs-string">&quot;/var/lib/docker/overlay2/e43e6b4eee920ace4ce359c795615e673ba50bb70cee790a86d8feb26c999fa9/diff&quot;</span>,<br>                <span class="hljs-string">&quot;WorkDir&quot;</span>: <span class="hljs-string">&quot;/var/lib/docker/overlay2/e43e6b4eee920ace4ce359c795615e673ba50bb70cee790a86d8feb26c999fa9/work&quot;</span><br>            &#125;,<br>            <span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;overlay2&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;Mounts&quot;</span>: [],<br>        <span class="hljs-string">&quot;Config&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;Hostname&quot;</span>: <span class="hljs-string">&quot;1d99006b4363&quot;</span>,<br>            <span class="hljs-string">&quot;Domainname&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;User&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;AttachStdin&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;AttachStdout&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;AttachStderr&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;Tty&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;OpenStdin&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;StdinOnce&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;Env&quot;</span>: [<br>                <span class="hljs-string">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><br>            ],<br>            <span class="hljs-string">&quot;Cmd&quot;</span>: [<br>                <span class="hljs-string">&quot;/bin/sh&quot;</span>,<br>                <span class="hljs-string">&quot;-c&quot;</span>,<br>                <span class="hljs-string">&quot;while true;do echo lqs;sleep 1;done&quot;</span><br>            ],<br>            <span class="hljs-string">&quot;Image&quot;</span>: <span class="hljs-string">&quot;centos&quot;</span>,<br>            <span class="hljs-string">&quot;Volumes&quot;</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-string">&quot;WorkingDir&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;Entrypoint&quot;</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-string">&quot;OnBuild&quot;</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-string">&quot;Labels&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;org.label-schema.build-date&quot;</span>: <span class="hljs-string">&quot;20200809&quot;</span>,<br>                <span class="hljs-string">&quot;org.label-schema.license&quot;</span>: <span class="hljs-string">&quot;GPLv2&quot;</span>,<br>                <span class="hljs-string">&quot;org.label-schema.name&quot;</span>: <span class="hljs-string">&quot;CentOS Base Image&quot;</span>,<br>                <span class="hljs-string">&quot;org.label-schema.schema-version&quot;</span>: <span class="hljs-string">&quot;1.0&quot;</span>,<br>                <span class="hljs-string">&quot;org.label-schema.vendor&quot;</span>: <span class="hljs-string">&quot;CentOS&quot;</span><br>            &#125;<br>        &#125;,<br>        <span class="hljs-string">&quot;NetworkSettings&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;Bridge&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;SandboxID&quot;</span>: <span class="hljs-string">&quot;b7d79cfaf7ee2a80d7186625f73561987096a77d40022d9da8a15325f833908e&quot;</span>,<br>            <span class="hljs-string">&quot;HairpinMode&quot;</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&quot;LinkLocalIPv6Address&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;LinkLocalIPv6PrefixLen&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&quot;Ports&quot;</span>: &#123;&#125;,<br>            <span class="hljs-string">&quot;SandboxKey&quot;</span>: <span class="hljs-string">&quot;/var/run/docker/netns/b7d79cfaf7ee&quot;</span>,<br>            <span class="hljs-string">&quot;SecondaryIPAddresses&quot;</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-string">&quot;SecondaryIPv6Addresses&quot;</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-string">&quot;EndpointID&quot;</span>: <span class="hljs-string">&quot;82568b40df9a9923ae2599d54adba35f7231ee42f1712781da5549e5333a4332&quot;</span>,<br>            <span class="hljs-string">&quot;Gateway&quot;</span>: <span class="hljs-string">&quot;172.18.0.1&quot;</span>,<br>            <span class="hljs-string">&quot;GlobalIPv6Address&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;GlobalIPv6PrefixLen&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&quot;IPAddress&quot;</span>: <span class="hljs-string">&quot;172.18.0.3&quot;</span>,<br>            <span class="hljs-string">&quot;IPPrefixLen&quot;</span>: <span class="hljs-number">16</span>,<br>            <span class="hljs-string">&quot;IPv6Gateway&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;MacAddress&quot;</span>: <span class="hljs-string">&quot;02:42:ac:12:00:03&quot;</span>,<br>            <span class="hljs-string">&quot;Networks&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;bridge&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;IPAMConfig&quot;</span>: <span class="hljs-literal">null</span>,<br>                    <span class="hljs-string">&quot;Links&quot;</span>: <span class="hljs-literal">null</span>,<br>                    <span class="hljs-string">&quot;Aliases&quot;</span>: <span class="hljs-literal">null</span>,<br>                    <span class="hljs-string">&quot;NetworkID&quot;</span>: <span class="hljs-string">&quot;fc51f6980ccad65f81ddef3584c7a7f3b80df21521fc322d204f1eaf9b9383a0&quot;</span>,<br>                    <span class="hljs-string">&quot;EndpointID&quot;</span>: <span class="hljs-string">&quot;82568b40df9a9923ae2599d54adba35f7231ee42f1712781da5549e5333a4332&quot;</span>,<br>                    <span class="hljs-string">&quot;Gateway&quot;</span>: <span class="hljs-string">&quot;172.18.0.1&quot;</span>,<br>                    <span class="hljs-string">&quot;IPAddress&quot;</span>: <span class="hljs-string">&quot;172.18.0.3&quot;</span>,<br>                    <span class="hljs-string">&quot;IPPrefixLen&quot;</span>: <span class="hljs-number">16</span>,<br>                    <span class="hljs-string">&quot;IPv6Gateway&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>                    <span class="hljs-string">&quot;GlobalIPv6Address&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>                    <span class="hljs-string">&quot;GlobalIPv6PrefixLen&quot;</span>: <span class="hljs-number">0</span>,<br>                    <span class="hljs-string">&quot;MacAddress&quot;</span>: <span class="hljs-string">&quot;02:42:ac:12:00:03&quot;</span>,<br>                    <span class="hljs-string">&quot;DriverOpts&quot;</span>: <span class="hljs-literal">null</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>]<br></code></pre></td></tr></table></figure><h3 id="5、进入当前正在运行的容器"><a href="#5、进入当前正在运行的容器" class="headerlink" title="5、进入当前正在运行的容器"></a>5、进入当前正在运行的容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">方式一</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">一般后台运行，需要进入容器修改一些配置</span><br>[root@server1 ~]# docker exec -it 1d99006b4363 /bin/bash<br>- exec# 进入容器<br>-it# 交互模式<br>[root@1d99006b4363 /]# ls<br>bin  etc   lib  lost+found  mnt  proc  run   srv  tmp  var<br>dev  home  lib64  media       opt  root  sbin  sys  usr<br>[root@1d99006b4363 /]# ps -ef<br>UID          PID    PPID  C STIME TTY          TIME CMD<br>root           1       0  0 06:24 ?        00:00:00 /bin/sh -c while true;do<br>root         847       0  0 06:38 pts/0    00:00:00 /bin/bash<br>root         926       1  0 06:39 ?        00:00:00 /usr/bin/coreutils --cor<br>root         927     847  0 06:39 pts/0    00:00:00 ps -ef<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">方式二</span><br>[root@server1 ~]# docker attach 1d99006b4363<br>lqs<br>lqs<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">比较</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">docker <span class="hljs-built_in">exec</span>进入容器后开启新终端，可以直接操作</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">docker attach进入容器正在执行的终端，不会启动新进程</span><br></code></pre></td></tr></table></figure><h3 id="6、从容器拷贝文件到主机"><a href="#6、从容器拷贝文件到主机" class="headerlink" title="6、从容器拷贝文件到主机"></a>6、从容器拷贝文件到主机</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">docker <span class="hljs-built_in">cp</span> 2973e8f2a4c1:/home/new.java  /home</span><br><br>[root@server1 ssh]# docker attach 2973e8f2a4c1<br>[root@2973e8f2a4c1 /]# cd /home/<br>[root@2973e8f2a4c1 home]# ls<br>lqs.java<br>[root@2973e8f2a4c1 home]# touch new.java<br>[root@2973e8f2a4c1 home]# ls<br>lqs.java  new.java<br>[root@2973e8f2a4c1 home]# read escape sequence<br>[root@server1 ssh]# cd<br>[root@server1 ~]# cd /home/<br>[root@server1 home]# ls<br>admin  lqs.java<br>[root@server1 home]# docker cp 2973e8f2a4c1:/home/new.java /home<br>[root@server1 home]# ls<br>admin  lqs.java  new.java<br>[root@server1 home]#<br></code></pre></td></tr></table></figure><h3 id="7、测试用例"><a href="#7、测试用例" class="headerlink" title="7、测试用例"></a>7、测试用例</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">测试用例，用完自动删</span><br>[root@server1 ssh]# docker run -it --rm tomcat:9.0<br></code></pre></td></tr></table></figure><h3 id="8、可视化"><a href="#8、可视化" class="headerlink" title="8、可视化"></a>8、可视化</h3><ul><li>portainer</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d -p 8088:9000 \<br>--restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer<br></code></pre></td></tr></table></figure><ul><li>rancher</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FrL1WSjc9yo4jrRFsIMNLSdOtc1C.png"></p><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><ul><li>DockerHub：<a href="https://hub.docker.com/">https://hub.docker.com</a></li></ul><h3 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@server1 home]# docker pull nginx<br>Using default tag: latest<br>latest: Pulling from library/nginx<br>852e50cd189d: Pull complete<br>571d7e852307: Pull complete<br>addb10abd9cb: Pull complete<br>d20aa7ccdb77: Pull complete<br>8b03f1e11359: Pull complete<br>Digest: sha256:6b1daa9462046581ac15be20277a7c75476283f969cb3a61c8725ec38d3b01c3<br>Status: Downloaded newer image for nginx:latest<br>docker.io/library/nginx:latest<br>[root@server1 home]# docker images<br>REPOSITORY   TAG       IMAGE ID       CREATED        SIZE<br>nginx        latest    bc9a0695f571   5 days ago     133MB<br>centos       latest    0d120b6ccaa8   3 months ago   215MB<br>[root@server1 home]# docker run -d --name nginx01 -p 3344:80 nginx<br>730596a510eb00386fc0c2de680f1379bbee497c70f676df1588d635e944c115<br>[root@server1 home]# docker ps<br>CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS          PORTS                  NAMES<br>730596a510eb   nginx     &quot;/docker-entrypoint.…&quot;   4 seconds ago   Up 3 seconds    0.0.0.0:3344-&gt;80/tcp   nginx01<br>2973e8f2a4c1   centos    &quot;/bin/bash&quot;              5 hours ago     Up 25 minutes                          gallant_shirley<br><span class="hljs-meta prompt_"># </span><span class="language-bash">访问nginx</span><br>[root@server1 home]# curl localhost:3344<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;title&gt;Welcome to nginx!&lt;/title&gt;<br>&lt;style&gt;<br>    body &#123;<br>        width: 35em;<br>        margin: 0 auto;<br>        font-family: Tahoma, Verdana, Arial, sans-serif;<br>    &#125;<br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;<br>&lt;p&gt;If you see this page, the nginx web server is successfully installed and<br>working. Further configuration is required.&lt;/p&gt;<br><br>&lt;p&gt;For online documentation and support please refer to<br>&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;<br>Commercial support is available at<br>&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;<br><br>&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br>[root@server1 home]#<br></code></pre></td></tr></table></figure><h3 id="部署-ElasticSearch-Kibana"><a href="#部署-ElasticSearch-Kibana" class="headerlink" title="部署 ElasticSearch + Kibana"></a>部署 ElasticSearch + Kibana</h3><ul><li>ES 端口暴露多</li><li>十分耗内存</li><li>ES 数据一般放置在安全目录</li><li>–net somenetwork 网络配置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@server1 home]# docker run -d --name elasticsearch --net somenetwork -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; elasticsearch:7.9.3<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">ES占用内存太大，修改JVM参数</span><br>[root@server1 home]# docker run -d --name elasticsearch01 -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; -e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot; elasticsearch:7.9.3<br></code></pre></td></tr></table></figure><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FkGkIILyNfC_jPQReY11bS0mYvmc.png"></p><h1 id="Docker-镜像"><a href="#Docker-镜像" class="headerlink" title="Docker 镜像"></a>Docker 镜像</h1><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><blockquote><p>是一种轻量级、可执行的独立软件包。用来打包软件运行环境和基于运行环境开发的软件，包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。所有应用，直接打包 docker 镜像，就可以直接运行</p></blockquote><h2 id="Docker-镜像加载原理"><a href="#Docker-镜像加载原理" class="headerlink" title="Docker 镜像加载原理"></a>Docker 镜像加载原理</h2><blockquote><p>UnionFS 文件系统</p></blockquote><p>UnionFS(联合文件系统): Union 文件系统(UnionFS)是一种分层、轻量级并且高性能的文件系统，它支持<strong>对文件系统的修改作为一次提交来一层层的叠加</strong>，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。Union 文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承, 基于基础镜像(没有父镜像)， 可以制作各种具体的应用镜像。<br>特性: 一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p><blockquote><p>Docker 镜像加载原理</p></blockquote><p><strong>bootfs(boot file system)<strong>主要包含 bootloader 和 kernel，bootloader 主要是引导加载 kernel，Linux 刚启动时会加载 bootfs 文件系统，</strong>在 Docker 镜像的最底层是 bootfs</strong>。这一层与我们典型的 Linux&#x2F;Unix 系统是一样的, 包含 boot 加载器和内核。当 boot 加载完成之后整个内核就都在内存中了，此时内存的使用权已由 bootfs 转交给内核，此时系统也会卸载 bootfs。</p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FjKihmQmxu25fy_qHs27aXzO0EKS.png"></p><p><strong>rootfs(root file system)</strong>, 在 bootfs 之上。包含的就是典型 Linux 系统中的&#x2F;dev, &#x2F;proc, &#x2F;bin, &#x2F;etc 等标准目录和文件。rootfs 就是各种不同的操作系统发行版，比如 Ubuntu，Centos 等等。</p><p>对于一个精简的 OS，rootfs 可以很小，只需要包括最基本的命令、工具和程序库就可以了，因为底层直接用 Host 的 kernel，自己只需要提供 rootfs 就行了。由此可见对于不同的 linux 发行版，bootfs 基本是一致的，rootfs 会有差别，因此不同的发行版可以共用 bootfs。</p><blockquote><p>分层的镜像</p></blockquote><p>以我们的 pull 为例，在下载的过程中我们可以看到 docker 的镜像好像是在一层一层的在下载</p><blockquote><p>分层好处</p></blockquote><p><strong>共享资源</strong><br>比如：有多个镜像都从相同的 base 镜像构建而来，那么宿主机只需在磁盘上保存一份 base 镜像,同时内存中也只需加载一份 base 镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。</p><blockquote><p>Docker 镜像特点</p></blockquote><p>Docker 镜像都是只读的<br>当容器启动时，一个新的可写层被加载到镜像的顶部。<br>这一层通常被称作为”容器层”，“容器层”之下的都叫”镜像层”。</p><h2 id="Commit-镜像"><a href="#Commit-镜像" class="headerlink" title="Commit 镜像"></a>Commit 镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker commit 类似于git<br><span class="hljs-meta prompt_"># </span><span class="language-bash">提交容器成为一个新的镜像</span><br><br>docker commit -m=&quot;描述信息&quot; -a=&quot;作者&quot; 容器id 目标镜像名:[tag]<br></code></pre></td></tr></table></figure><h1 id="Docker-数据卷"><a href="#Docker-数据卷" class="headerlink" title="Docker 数据卷"></a>Docker 数据卷</h1><blockquote><p>容器数据卷：能将数据可持久化，删除容器时可不删除存放的数据</p></blockquote><h2 id="方式一：-v-挂载"><a href="#方式一：-v-挂载" class="headerlink" title="方式一：-v 挂载"></a>方式一：-v 挂载</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 将新建的 centos 容器的/home 目录挂载在主机上/home/ceshi 文件夹进行<span class="hljs-strong">**双向绑定**</span></span><br><br>docker run -it -v /home/ceshi:/home centos /bin/bash<br><br><span class="hljs-section"># 在主机上使用 docker inspect id 查看数据卷挂载</span><br><br>&quot;Mounts&quot;: [<br>&#123;<br>&quot;Type&quot;: &quot;bind&quot;,<br>&quot;Source&quot;: &quot;/home/ceshi&quot;,<br>&quot;Destination&quot;: &quot;/home&quot;,<br>&quot;Mode&quot;: &quot;&quot;,<br>&quot;RW&quot;: true,<br>&quot;Propagation&quot;: &quot;rprivate&quot;<br>&#125;<br>],<br></code></pre></td></tr></table></figure><h3 id="实战：持久化-MySQL"><a href="#实战：持久化-MySQL" class="headerlink" title="实战：持久化 MySQL"></a>实战：持久化 MySQL</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 进行配置</span><br><br>[root@server1 home]# docker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL<span class="hljs-emphasis">_ROOT_</span>PASSWORD=123456 --name mysql01 mysql:5.7<br>-d 后台运行<br>-p 端口<br>-v 数据卷挂载<br>-e 环境<br>--name 名字<br><br><span class="hljs-section"># 远程登录</span><br><br>🐂🍺 mysql -haly -P3310 -uroot -p<br><br><span class="hljs-section"># 此时删除容器，主机上的目录依然存在</span><br></code></pre></td></tr></table></figure><h3 id="具名-x2F-匿名挂载"><a href="#具名-x2F-匿名挂载" class="headerlink" title="具名&#x2F;匿名挂载"></a>具名&#x2F;匿名挂载</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 匿名挂载</span><br><br><span class="hljs-section"># -v 容器内路径</span><br><br>docker run -d -P --name nginx01 -v /etc/nginx nginx<br><br><span class="hljs-section"># 具名挂载</span><br><br><span class="hljs-section"># -v 卷名:容器内路径</span><br><br><span class="hljs-section"># 默认挂载地址：/var/lib/docker/volumes/juming/\<span class="hljs-emphasis">_data</span></span><br><span class="hljs-emphasis"><span class="hljs-section"></span></span><br><span class="hljs-emphasis"><span class="hljs-section">[root@server1 data]# docker run -d -P --name nginx01 -v juming:/etc/nginx nginx</span></span><br><span class="hljs-emphasis"><span class="hljs-section">Unable to find image &#x27;nginx:latest&#x27; locally</span></span><br><span class="hljs-emphasis"><span class="hljs-section">latest: Pulling from library/nginx</span></span><br><span class="hljs-emphasis"><span class="hljs-section">852e50cd189d: Already exists</span></span><br><span class="hljs-emphasis"><span class="hljs-section">571d7e852307: Pull complete</span></span><br><span class="hljs-emphasis"><span class="hljs-section">addb10abd9cb: Pull complete</span></span><br><span class="hljs-emphasis"><span class="hljs-section">d20aa7ccdb77: Pull complete</span></span><br><span class="hljs-emphasis"><span class="hljs-section">8b03f1e11359: Pull complete</span></span><br><span class="hljs-emphasis"><span class="hljs-section">Digest: sha256:6b1daa9462046581ac15be20277a7c75476283f969cb3a61c8725ec38d3b01c3</span></span><br><span class="hljs-emphasis"><span class="hljs-section">Status: Downloaded newer image for nginx:latest</span></span><br><span class="hljs-emphasis"><span class="hljs-section">f4b4012c0245d5c7c32010b6cefdf14ab82ccd4eb7441201b13f38429022e121</span></span><br><span class="hljs-emphasis"><span class="hljs-section"></span></span><br><span class="hljs-emphasis"><span class="hljs-section"># 查看所有卷：docker volume ls</span></span><br><span class="hljs-emphasis"><span class="hljs-section"></span></span><br><span class="hljs-emphasis"><span class="hljs-section">[root@server1 data]# docker volume ls</span></span><br><span class="hljs-emphasis"><span class="hljs-section">DRIVER VOLUME NAME</span></span><br><span class="hljs-emphasis"><span class="hljs-section">local 9a7e9a5a0533594193bd5711b1f52899f22f5ed9d7c09a18356455a8a270fbcd</span></span><br><span class="hljs-emphasis"><span class="hljs-section">local juming</span></span><br><span class="hljs-emphasis"><span class="hljs-section"></span></span><br><span class="hljs-emphasis"><span class="hljs-section"># 查看卷名元数据：docker volume inspect juming</span></span><br><span class="hljs-emphasis"><span class="hljs-section"></span></span><br><span class="hljs-emphasis"><span class="hljs-section">[root@server1 data]# docker volume inspect juming</span></span><br><span class="hljs-emphasis"><span class="hljs-section">[</span></span><br><span class="hljs-emphasis"><span class="hljs-section">&#123;</span></span><br><span class="hljs-emphasis"><span class="hljs-section">&quot;CreatedAt&quot;: &quot;2020-12-01T15:43:14+08:00&quot;,</span></span><br><span class="hljs-emphasis"><span class="hljs-section">&quot;Driver&quot;: &quot;local&quot;,</span></span><br><span class="hljs-emphasis"><span class="hljs-section">&quot;Labels&quot;: null,</span></span><br><span class="hljs-emphasis"><span class="hljs-section"># 本地存储位置</span></span><br><span class="hljs-emphasis"><span class="hljs-section">&quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/juming/_</span>data&quot;,</span><br>&quot;Name&quot;: &quot;juming&quot;,<br>&quot;Options&quot;: null,<br>&quot;Scope&quot;: &quot;local&quot;<br>&#125;<br>]<br></code></pre></td></tr></table></figure><ul><li>拓展</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 通过-v 指定容器内路径及读写权限</span><br><br><span class="hljs-section"># ro: 只读,只能通过宿主机改变，容器内部不能修改</span><br><br><span class="hljs-section"># rw:可读可写(default)</span><br><br>-v 卷名:路径:ro/rw<br></code></pre></td></tr></table></figure><h2 id="初识-DockerFile"><a href="#初识-DockerFile" class="headerlink" title="初识 DockerFile"></a>初识 DockerFile</h2><blockquote><p>实际就是 imageFile，构建 Docker 镜像的构建脚本</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@server1 docker-test-volume]# vim dockerfile1<br><br>FROM centos<br><br>VOLUME [&quot;volume01&quot;,&quot;volume02&quot;]<br><br>CMD echo &quot;===end===&quot;<br>CMD /bin/bash<br><br>[root@server1 docker-test-volume]# docker build -f dockerfile1 -t lqs/centos:1.0 .<br>Sending build context to Docker daemon  2.048kB<br>Step 1/4 : FROM centos<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">0d120b6ccaa8</span><br>Step 2/4 : VOLUME [&quot;volume01&quot;,&quot;volume02&quot;]<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> 139b85666b23</span><br>Removing intermediate container 139b85666b23<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">5ba70f0b2c01</span><br>Step 3/4 : CMD echo &quot;===end===&quot;<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> b7b3d3d10528</span><br>Removing intermediate container b7b3d3d10528<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">a2f5c60a54e0</span><br>Step 4/4 : CMD /bin/bash<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> b7a8f6f55f83</span><br>Removing intermediate container b7a8f6f55f83<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">1153bee64870</span><br>Successfully built 1153bee64870<br>Successfully tagged lqs/centos:1.0<br>[root@server1 docker-test-volume]# docker images<br>REPOSITORY   TAG       IMAGE ID       CREATED         SIZE<br>lqs/centos   1.0       1153bee64870   9 seconds ago   215MB<br>nginx        latest    bc9a0695f571   6 days ago      133MB<br>mysql        5.7       ae0658fdbad5   10 days ago     449MB<br>centos       latest    0d120b6ccaa8   3 months ago    215MB<br></code></pre></td></tr></table></figure><ul><li>可以看到生存镜像是自动给挂载的数据卷</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@server1 docker-test-volume]# docker run -it 1153bee64870 /bin/bash<br>[root@1e6c5ff18e75 /]# ls -l<br>total 0<br>lrwxrwxrwx   1 root root   7 May 11  2019 bin -&gt; usr/bin<br>drwxr-xr-x   5 root root 360 Dec  1 08:20 dev<br>drwxr-xr-x   1 root root  66 Dec  1 08:20 etc<br>drwxr-xr-x   2 root root   6 May 11  2019 home<br>lrwxrwxrwx   1 root root   7 May 11  2019 lib -&gt; usr/lib<br>lrwxrwxrwx   1 root root   9 May 11  2019 lib64 -&gt; usr/lib64<br>drwx------   2 root root   6 Aug  9 21:40 lost+found<br>drwxr-xr-x   2 root root   6 May 11  2019 media<br>drwxr-xr-x   2 root root   6 May 11  2019 mnt<br>drwxr-xr-x   2 root root   6 May 11  2019 opt<br>dr-xr-xr-x 118 root root   0 Dec  1 08:20 proc<br>dr-xr-x---   2 root root 162 Aug  9 21:40 root<br>drwxr-xr-x  11 root root 163 Aug  9 21:40 run<br>lrwxrwxrwx   1 root root   8 May 11  2019 sbin -&gt; usr/sbin<br>drwxr-xr-x   2 root root   6 May 11  2019 srv<br>dr-xr-xr-x  13 root root   0 Dec  1 08:20 sys<br>drwxrwxrwt   7 root root 145 Aug  9 21:40 tmp<br>drwxr-xr-x  12 root root 144 Aug  9 21:40 usr<br>drwxr-xr-x  20 root root 262 Aug  9 21:40 var<br>drwxr-xr-x   2 root root   6 Dec  1 08:20 volume01<br>drwxr-xr-x   2 root root   6 Dec  1 08:20 volume02<br></code></pre></td></tr></table></figure><h2 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h2><ul><li>实现多容器数据共享</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">这样docker02和docker03的文件随docker01文件的改变而改变</span><br>[root@server1 /]# docker run -it --name docker02 --volumes-from docker01  lqs/centos:1.0<br>[root@server1 /]# docker run -it --name docker03 --volumes-from docker01  lqs/centos:1.0<br><br>- 但是删除docker01时docker02和docker03的文件依然存在，都存在宿主机文件中<br></code></pre></td></tr></table></figure><blockquote><p>注意：</p><p>容器之间配置信息的传递，一直持续到没有容器使用为止</p><p>一旦持久化到本地，本地数据不会删除</p></blockquote><h1 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h1><blockquote><p>构建 DockerImage 镜像的文件，是命令参数脚本，定义一切步骤和源代码</p><p>面向开发，逐渐成为企业交付的标准。</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 注意:<br><br><span class="hljs-section"># 每个关键字必须大写</span><br><br><span class="hljs-section"># 执行从上到下按序执行</span><br><br><span class="hljs-bullet">-</span> 1、编写一个 dockerfile 文件<br><span class="hljs-bullet">-</span> 2、docker build 构建镜像<br><span class="hljs-bullet">-</span> 3、docker run 运行镜像<br><span class="hljs-bullet">-</span> 4、docker push 发布镜像到 DockerHub or 阿里云镜像仓库<br><br><span class="hljs-section"># #表示注释</span><br><br><span class="hljs-section"># 每个指令都表示一个新的镜像层，并提交</span><br></code></pre></td></tr></table></figure><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FqtjVGiCfxkGq2LFNUoNI2UgIpQC.png"></p><h2 id="DockerFile-命令"><a href="#DockerFile-命令" class="headerlink" title="DockerFile 命令"></a>DockerFile 命令</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> FROM 基础镜像，一起从这里开始<br><span class="hljs-bullet">-</span> MAINTAINER 作者，姓名+邮箱<br><span class="hljs-bullet">-</span> RUN 镜像构建的时候需要运行的命令<br><span class="hljs-bullet">-</span> ADD tomcat 镜像<br><span class="hljs-bullet">-</span> WORKDIR 镜像工作目录<br><span class="hljs-bullet">-</span> VOLUME 挂载目录<br><span class="hljs-bullet">-</span> EXPOSE 保留端口配置<br><span class="hljs-bullet">-</span> CMD 指定容器启动时运行的指令,只有最后一个会生效，可被替代<br><span class="hljs-bullet">-</span> ENTRYPOINT 指定容器启动时运行的指令，可以追加命令<br><span class="hljs-bullet">-</span> ONBUILD 触发指令：当构建一个被挤成 DockerFile，这个时候就运行<br><span class="hljs-bullet">-</span> COPY 类似 ADD，将文件拷贝到镜像中<br><span class="hljs-bullet">-</span> ENV 环境变量<br></code></pre></td></tr></table></figure><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FqtqfBOCxtw-TqXH02qIx2oLnRnG.jpg"></p><h2 id="例子：构建个人-centos"><a href="#例子：构建个人-centos" class="headerlink" title="例子：构建个人 centos"></a>例子：构建个人 centos</h2><h3 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@server1 docker-test-volume]# vim dockerfile-centos<br>FROM centos<br>MAINTAINER lqs&lt;polarisink@163.com&gt;<br><br>ENV MYPATH /usr/local<br>WORKDIR $MYPATH<br><br>RUN yum -y install vim<br>RUN yum -y install net-tools<br><br>EXPOSE 80<br><br>CMD echo $MYPATH<br>CMD echo &quot;-----end----&quot;<br>CMD /bin/bash<br></code></pre></td></tr></table></figure><h3 id="通过文件构建镜像（-不能少）"><a href="#通过文件构建镜像（-不能少）" class="headerlink" title="通过文件构建镜像（.不能少）"></a>通过文件构建镜像（.不能少）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@server1 docker-test-volume]# docker build -f dockerfile-centos -t mycentos:0.1 .<br>Successfully built 69a888bf8bdb<br>Successfully tagged mycentos:0.1<br></code></pre></td></tr></table></figure><h3 id="测试运行（vim-和-ifconfig-可以使用）"><a href="#测试运行（vim-和-ifconfig-可以使用）" class="headerlink" title="测试运行（vim 和 ifconfig 可以使用）"></a>测试运行（vim 和 ifconfig 可以使用）</h3><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fhhu9P5wl-207MEZd1n1ON3r8_QM.png"></p><h3 id="查看历史"><a href="#查看历史" class="headerlink" title="查看历史"></a>查看历史</h3><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FqvhCqriWPLJO_4KEFdqxVaCvB-l.png"></p><h3 id="CMD-amp-amp-ENTRYPOINT"><a href="#CMD-amp-amp-ENTRYPOINT" class="headerlink" title="CMD &amp;&amp; ENTRYPOINT"></a>CMD &amp;&amp; ENTRYPOINT</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">CMD指定容器启动时运行的指令,只有最后一个会生效，可被替代</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">ENTRYPOINT指定容器启动时运行的指令，可以追加命令</span><br><br>[root@server1 docker-test-volume]# cat dockerfile-cmd-test<br>FROM centos<br><br>CMD [&quot;ls&quot;, &quot;-a&quot;]<br><br>[root@server1 docker-test-volume]# cat dockerfile-entrypoint-test<br>FROM centos<br><br>ENTRYPOINT [&quot;ls&quot;, &quot;-a&quot;]<br><span class="hljs-meta prompt_"># </span><span class="language-bash">不能追加命令</span><br>[root@server1 docker-test-volume]# docker run cmdtest -l<br>docker: Error response from daemon: OCI runtime create failed: container_linux.go:370: starting container process caused: exec: &quot;-l&quot;: executable file not found in $PATH: unknown.<br><span class="hljs-meta prompt_"># </span><span class="language-bash">可以追加命令</span><br>[root@server1 docker-test-volume]# docker run mycentos-entrypoint -l<br>total 0<br>drwxr-xr-x   1 root root   6 Dec  2 05:32 .<br>drwxr-xr-x   1 root root   6 Dec  2 05:32 ..<br>-rwxr-xr-x   1 root root   0 Dec  2 05:32 .dockerenv<br>lrwxrwxrwx   1 root root   7 May 11  2019 bin -&gt; usr/bin<br>drwxr-xr-x   5 root root 340 Dec  2 05:32 dev<br>drwxr-xr-x   1 root root  66 Dec  2 05:32 etc<br>drwxr-xr-x   2 root root   6 May 11  2019 home<br>lrwxrwxrwx   1 root root   7 May 11  2019 lib -&gt; usr/lib<br>lrwxrwxrwx   1 root root   9 May 11  2019 lib64 -&gt; usr/lib64<br>drwx------   2 root root   6 Aug  9 21:40 lost+found<br>drwxr-xr-x   2 root root   6 May 11  2019 media<br>drwxr-xr-x   2 root root   6 May 11  2019 mnt<br>drwxr-xr-x   2 root root   6 May 11  2019 opt<br>dr-xr-xr-x 125 root root   0 Dec  2 05:32 proc<br>dr-xr-x---   2 root root 162 Aug  9 21:40 root<br>drwxr-xr-x  11 root root 163 Aug  9 21:40 run<br>lrwxrwxrwx   1 root root   8 May 11  2019 sbin -&gt; usr/sbin<br>drwxr-xr-x   2 root root   6 May 11  2019 srv<br>dr-xr-xr-x  13 root root   0 Dec  2 05:32 sys<br>drwxrwxrwt   7 root root 145 Aug  9 21:40 tmp<br>drwxr-xr-x  12 root root 144 Aug  9 21:40 usr<br>drwxr-xr-x  20 root root 262 Aug  9 21:40 var<br>[root@server1 docker-test-volume]#<br></code></pre></td></tr></table></figure><h2 id="实战：构建-Tomcat-镜像"><a href="#实战：构建-Tomcat-镜像" class="headerlink" title="实战：构建 Tomcat 镜像"></a>实战：构建 Tomcat 镜像</h2><h3 id="1、准备镜像文件"><a href="#1、准备镜像文件" class="headerlink" title="1、准备镜像文件"></a>1、准备镜像文件</h3><ul><li>tomcat 压缩包，jdk 压缩包，readme.txt</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@server1 tomcat]# ls<br>apache-tomcat-8.5.54.tar.gz  jdk-8u271-linux-x64.tar.gz  readme.txt<br></code></pre></td></tr></table></figure><h3 id="2、编写Dockerfile"><a href="#2、编写Dockerfile" class="headerlink" title="2、编写Dockerfile"></a>2、编写<code>Dockerfile</code></h3><ul><li>官方推荐名字，可以自动寻找</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@server1 tomcat]# vim Dockerfile<br><br><br>FROM    centos<br>MAINTAINER polarisink&lt;polarisink@163.com&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">复制文件</span><br>COPY readme.txt /usr/local/readme.txt<br><span class="hljs-meta prompt_"># </span><span class="language-bash">增加，会自动解压</span><br>ADD jdk-8u271-linux-x64.tar.gz   /usr/local<br>ADD apache-tomcat-8.5.54.tar.gz  /usr/local<br><br>RUN yum -y install vim<br><br>ENV MYPATH /usr/local<br>WORKDIR $MYPATH<br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置环境变量</span><br>ENV JAVA_HOME /usr/local/jdk1.8.0_271<br>ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar<br>ENV CATALINA_HOME /usr/local/apache-tomcat-8.5.54<br>ENV CATALINA_BASH /usr/local/apache-tomcat-8.5.54<br>ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin<br><br>EXPOSE 8080<br><br>CMD /usr/local/apache-tomcat-8.5.54/bin/startup.sh &amp;&amp; tail -F /usr/local/apache-tomcat-8.5.54/bin/logs/catalina.out<br></code></pre></td></tr></table></figure><h3 id="3、build-镜像"><a href="#3、build-镜像" class="headerlink" title="3、build 镜像"></a>3、build 镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@server1 tomcat]# docker build -t diytomcat .<br>Sending build context to Docker daemon  153.5MB<br>Step 1/15 : FROMcentos<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">0d120b6ccaa8</span><br>Step 2/15 : MAINTAINER polarisink&lt;polarisink@163.com&gt;<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> 38b244f6ae39</span><br>Removing intermediate container 38b244f6ae39<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">7df638db0336</span><br>Step 3/15 : COPY readme.txt /usr/local/readme.txt<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">4d8f3f2150ab</span><br>Step 4/15 : ADD jdk-8u271-linux-x64.tar.gz /usr/local<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">9e75aa75f839</span><br>Step 5/15 : ADD apache-tomcat-8.5.54.tar.gz  /usr/local<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">613500475b41</span><br>Step 6/15 : RUN yum -y install vim<br></code></pre></td></tr></table></figure><p>Step 15&#x2F;15 : CMD &#x2F;usr&#x2F;local&#x2F;apache-tomcat-8.5.54&#x2F;bin&#x2F;startup.sh &amp;&amp; tail -F &#x2F;usr&#x2F;local&#x2F;apache-tomcat-8.5.54&#x2F;bin&#x2F;logs&#x2F;catalina.out<br>—&gt; Running in 1a5e363f4779<br>Removing intermediate container 1a5e363f4779<br>—&gt; 311502a899e6<br>Successfully built 311502a899e6<br>Successfully tagged diytomcat:latest</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><br>### <span class="hljs-number">4</span>、启动镜像<br><br>```shell<br># 挂载两个目录<br>[root@server1 tomcat]# docker run -d -p <span class="hljs-number">9090</span>:<span class="hljs-number">8080</span> --name polaristomcat -v <span class="hljs-regexp">/home/</span>ceshi<span class="hljs-regexp">/tomcat/</span>test:<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/apache-tomcat-8.5.54/</span>webapps<span class="hljs-regexp">/test -v /</span>home<span class="hljs-regexp">/ceshi/</span>tomcat<span class="hljs-regexp">/tomcatlogs/</span>:<span class="hljs-regexp">/uar/</span>local<span class="hljs-regexp">/apache-tomcat-8.5.54/</span>logs diytomcat<br><span class="hljs-number">7</span>b4e433ae6c695d8290b58e8ea517cca12232bdc89a1f4dd2df695ec4ce6a18c<br></code></pre></td></tr></table></figure><h3 id="5、访问测试"><a href="#5、访问测试" class="headerlink" title="5、访问测试"></a>5、访问测试</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@server1 tomcat]# curl localhost:9090<br><br><br><br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>    &lt;head&gt;<br>        &lt;meta charset=&quot;UTF-8&quot; /&gt;<br>        &lt;title&gt;Apache Tomcat/8.5.54&lt;/title&gt;<br>        &lt;link href=&quot;favicon.ico&quot; rel=&quot;icon&quot; type=&quot;image/x-icon&quot; /&gt;<br>        &lt;link href=&quot;favicon.ico&quot; rel=&quot;shortcut icon&quot; type=&quot;image/x-icon&quot; /&gt;<br>        &lt;link href=&quot;tomcat.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;<br>    &lt;/head&gt;<br></code></pre></td></tr></table></figure><h3 id="6、发布项目"><a href="#6、发布项目" class="headerlink" title="6、发布项目"></a>6、发布项目</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@server1 ~]# cd /home/ceshi/tomcat/test/<br>[root@server1 test]# ls<br>index.jsp  WEB-INFO<br>[root@server1 test]# docker run -d -p 9090:8080 --name polaristomcat2 -v /home/ceshi/tomcat/test:/usr/local/apache-tomcat-8.5.54/webapps/test -v /home/ceshi/tomcat/tomcatlogs:/usr/local/apache-tomcat-8.5.54/logs diytomcat<br>[root@server1 ~]# cat /home/ceshi/tomcat/tomcatlogs/catalina.out<br>02-Dec-2020 07:09:02.863 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/usr/local/apache-tomcat-8.5.54/webapps/test] has finished in [60] ms<br>02-Dec-2020 07:09:02.879 INFO [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [&quot;http-nio-8080&quot;]<br>02-Dec-2020 07:09:02.925 INFO [main] org.apache.catalina.startup.Catalina.start Server startup in 1618 ms<br>--my test web logs---<br>--my test web logs---<br></code></pre></td></tr></table></figure><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FkgpcrbrewdVNzj9nX3ZTYUBzQiH.png"></p><h2 id="发布个人镜像"><a href="#发布个人镜像" class="headerlink" title="发布个人镜像"></a>发布个人镜像</h2><ol><li>登录<a href="https://hub.docker.com/">DockerHub</a></li><li>在服务器上登录 dockerhub</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@server1 tomcatlogs]# docker login -u polarisink<br>Password:<br>WARNING! Your password will be stored unencrypted in /root/.docker/config.json.<br>Configure a credential helper to remove this warning. See<br>https://docs.docker.com/engine/reference/commandline/login/#credentials-store<br><br>Login Succeeded<br></code></pre></td></tr></table></figure><ol start="3"><li>提交镜像到 dockerhub</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@server1 tomcatlogs]# docker images<br>REPOSITORY            TAG       IMAGE ID       CREATED             SIZE<br>diytomcat             latest    311502a899e6   About an hour ago   642MB<br>mycentos-entrypoint   latest    72d222203c8b   2 hours ago         215MB<br>cmdtest               latest    09422ecb6cde   2 hours ago         215MB<br>mycentos              0.1       69a888bf8bdb   3 hours ago         295MB<br>lqs/centos            1.0       1153bee64870   23 hours ago        215MB<br>nginx                 latest    bc9a0695f571   7 days ago          133MB<br>mysql                 5.7       ae0658fdbad5   11 days ago         449MB<br>centos                latest    0d120b6ccaa8   3 months ago        215MB<br><span class="hljs-meta prompt_"># </span><span class="language-bash">push可以使用tag重命名</span><br>[root@server1 tomcatlogs]# docker tag 311502a899e6 polarisink/tomcat:1.0<br>[root@server1 tomcatlogs]# docker push polarisink/tomcat:1.0<br>The push refers to repository [docker.io/polarisink/tomcat]<br>96030ed24189: Pushing  11.35MB/57.24MB<br>d6314d23ddb4: Pushing  2.111MB/14.45MB<br>0d60766e4c76: Pushing  3.857MB/355.3MB<br>264590514375: Pushed<br>291f6e44771a: Pushing  6.561MB/215.1MB<br></code></pre></td></tr></table></figure><ol start="4"><li>提交到阿里云镜像仓库</li></ol><ul><li>注册命名空间和仓库</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FgjMzBL-Zqn-gcXzJqlbgs6HrceE.png"></p><ul><li>基本信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">登陆阿里云容器镜像服务</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo docker login --username=lxl520lqs registry.cn-hangzhou.aliyuncs.com</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">pull镜像</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo docker pull registry.cn-hangzhou.aliyuncs.com/polarsink/kuangshendocker:[镜像版本号]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">给镜像起名</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/polarsink/kuangshendocker:[镜像版本号]</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">push镜像</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo docker push registry.cn-hangzhou.aliyuncs.com/polarsink/kuangshendocker:[镜像版本号]</span><br></code></pre></td></tr></table></figure><h1 id="Docker-网络"><a href="#Docker-网络" class="headerlink" title="Docker 网络"></a>Docker 网络</h1><h2 id="Docker0"><a href="#Docker0" class="headerlink" title="Docker0"></a>Docker0</h2><h3 id="1、准备和观察"><a href="#1、准备和观察" class="headerlink" title="1、准备和观察"></a>1、准备和观察</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">先环境清零</span><br>docker rm -f $(docker ps -aq)<br>docker rmi $(docker images -q)<br>docker volume rm $(docker volume ls -q)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看网卡</span><br></code></pre></td></tr></table></figure><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FuZwZKQvzJG0mpKeUZhH1m3P-_uP.png"></p><ul><li>查看容器内部网络</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fo_FqdH3oh0uuXDea2-85n2YwtWg.png"></p><ul><li>Linux 主机可以 ping 通容器内部</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FmBLEuQCiUskGULwXkr6wYCWiPAp.png"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 安装 Docker 时，系统给 Docker 分配一个 docker0 网卡<br><span class="hljs-bullet">-</span> 每当启动一个 Docker 容器，Docker 就会给 Docker 容器分配一个 ip<br>  5: vethf6beca6@if4: <span class="language-xml">&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</span> mtu 1500 qdisc noqueue master docker0 state UP group default<br>  link/ether 36:bf:79:d7:66:46 brd ff:ff:ff:ff:ff:ff link-netnsid 0<br>  inet6 fe80::34bf:79ff:fed7:6646/64 scope link<br>  valid<span class="hljs-emphasis">_lft forever preferred_</span>lft forever<br><span class="hljs-bullet">-</span> 使用桥接模式，采用 evth-pair 技术<br></code></pre></td></tr></table></figure><p>![](&#x2F;Users&#x2F;lqs&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20201204205621273.png)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># evth-pair</span><br><br><span class="hljs-bullet">-</span> 一对对的虚拟设备接口，成对出现<br><span class="hljs-bullet">-</span> 一段连着协议，一段连接彼此<br><span class="hljs-bullet">-</span> 用来充当桥梁，连接各种虚拟网络设备<br><br><span class="hljs-section"># 结论</span><br><br><span class="hljs-bullet">-</span> 所有容器在不指定网络的情况下，都使用 docker 作为路由器<br><span class="hljs-bullet">-</span> docker0 为容器 A 和容器 B 分配一个默认可用的 IP<br><span class="hljs-bullet">-</span> 当删除容器时虚拟网卡会删除<br></code></pre></td></tr></table></figure><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FlTU8TgyJbjwYxL2ZKyTo0ZD0qw0.png"></p><h2 id="–Link"><a href="#–Link" class="headerlink" title="–Link"></a>–Link</h2><blockquote><p>作用：端口绑定，将 link 写入&#x2F;etc&#x2F;hosts</p><p>现在一般放弃使用，因为默认使用 docker0 网卡，不能自定义</p><p>docker0 不支持容器名连接访问</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[root@server1 blog]# docker run -d -P --name tomcat04 --link tomcat03 tomcat<br>b46b2485ff5c82cf7ca7ad394f30cbb1cc80dfcc407980105ef08a6a3c033c5f<br>[root@server1 blog]# docker exec -it tomcat04 cat /etc/hosts<br>127.0.0.1 localhost<br>::1 localhost ip6-localhost ip6-loopback<br>fe00::0 ip6-localnet<br>ff00::0 ip6-mcastprefix<br>ff02::1 ip6-allnodes<br>ff02::2 ip6-allrouters<br><br><span class="hljs-section"># 可以发现 tomcat03 的 ip 被写入 hosts 文件中</span><br><br>172.18.0.4 tomcat03 0f3204836c34<br>172.18.0.5 b46b2485ff5c<br>[root@server1 blog]#<br></code></pre></td></tr></table></figure><h2 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h2><h3 id="网络模式"><a href="#网络模式" class="headerlink" title="网络模式"></a>网络模式</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># bridge:桥接网络(默认，自定义也使用此方式)</span><br><br><span class="hljs-section"># none:不配置网络</span><br><br><span class="hljs-section"># host:和宿主机共享网络</span><br><br><span class="hljs-section"># container:容器网络连接(用得少，局限性大)</span><br></code></pre></td></tr></table></figure><h3 id="自定义网络-1"><a href="#自定义网络-1" class="headerlink" title="自定义网络"></a>自定义网络</h3><blockquote><p>docker network create</p><p>好处：不同集群使用不同的网络，保证集群的安全和健康</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@server1 ~]# docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet<br>68db8c5bfd01e7237a19d9cc2aaec9e0199c2690de3926065a16d89224de3250<br>[root@server1 ~]# docker network ls<br>NETWORK ID          NAME                DRIVER              SCOPE<br>e2e8121885a1        blog_default        bridge              local<br>e7745415748f        bridge              bridge              local<br>998422bb93bb        host                host                local<br>68db8c5bfd01        mynet               bridge              local<br>3a5d3fb4c291        none                null                local<br>[root@server1 ~]# docker network inspect mynet<br>[<br>    &#123;<br>        &quot;Name&quot;: &quot;mynet&quot;,<br>        &quot;Id&quot;: &quot;68db8c5bfd01e7237a19d9cc2aaec9e0199c2690de3926065a16d89224de3250&quot;,<br>        &quot;Created&quot;: &quot;2020-12-05T11:14:01.64643517+08:00&quot;,<br>        &quot;Scope&quot;: &quot;local&quot;,<br>        &quot;Driver&quot;: &quot;bridge&quot;,<br>        &quot;EnableIPv6&quot;: false,<br>        &quot;IPAM&quot;: &#123;<br>            &quot;Driver&quot;: &quot;default&quot;,<br>            &quot;Options&quot;: &#123;&#125;,<br>            &quot;Config&quot;: [<br>                &#123;<br>                    &quot;Subnet&quot;: &quot;192.168.0.0/16&quot;,<br>                    &quot;Gateway&quot;: &quot;192.168.0.1&quot;<br>                &#125;<br>            ]<br>        &#125;,<br>        &quot;Internal&quot;: false,<br>        &quot;Attachable&quot;: false,<br>        &quot;Ingress&quot;: false,<br>        &quot;ConfigFrom&quot;: &#123;<br>            &quot;Network&quot;: &quot;&quot;<br>        &#125;,<br>        &quot;ConfigOnly&quot;: false,<br>        &quot;Containers&quot;: &#123;&#125;,<br>        &quot;Options&quot;: &#123;&#125;,<br>        &quot;Labels&quot;: &#123;&#125;<br>    &#125;<br>]<br></code></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@server1 ~]# docker run -d -P --name tomcat-net-01 --net mynet tomcat<br>[root@server1 ~]# docker run -d -P --name tomcat-net-02 --net mynet tomcat<br>a65f9956dfa468e2f642c6d784172dac6beb81be0ca7170ca3c9417066b8ca0d<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">二者在同一子网，可以用名字互ping</span><br>[root@server1 ~]# docker exec -it tomcat-net-01 ping tomcat-net-02<br>PING tomcat-net-02 (192.168.0.3) 56(84) bytes of data.<br>64 bytes from tomcat-net-02.mynet (192.168.0.3): icmp_seq=1 ttl=64 time=0.115 ms<br>64 bytes from tomcat-net-02.mynet (192.168.0.3): icmp_seq=2 ttl=64 time=0.084 ms<br>64 bytes from tomcat-net-02.mynet (192.168.0.3): icmp_seq=3 ttl=64 time=0.063 ms<br>^C<br>--- tomcat-net-02 ping statistics ---<br>3 packets transmitted, 3 received, 0% packet loss, time 39ms<br>rtt min/avg/max/mdev = 0.063/0.087/0.115/0.022 ms<br>[root@server1 ~]#<br></code></pre></td></tr></table></figure><ul><li>跨网络互 ping</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">此时tomcat-net-01和tomcat01不在同一网络，不能互ping</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">需要docker network connect进行连接</span><br>[root@server1 ~]# docker exec -it tomcat01 ping tomcat-net-01<br>ping: tomcat-net-01: Name or service not known<br></code></pre></td></tr></table></figure><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FsvYiwjQ-z_Jr1xR6ApeVibFPkm-.png"></p><h3 id="部署-Redis-集群"><a href="#部署-Redis-集群" class="headerlink" title="部署 Redis 集群"></a>部署 Redis 集群</h3><ul><li>要求</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FkU1Deh7KSmoi2b88FVqlVpHIDjK.png"></p><ul><li>编写 shell 脚本创建 Redis 容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建网卡</span><br>docker network create redis --subnet 172.38.0.0/16<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">脚本</span><br>for port in $(seq 1 6);\<br>do \<br>mkdir -p /mydata/redis/node-$&#123;port&#125;/conf<br>touch /mydata/redis/node-$&#123;port&#125;/conf/redis.conf<br>cat &lt;&lt; EOF &gt;/mydata/redis/node-$&#123;port&#125;/conf/redis.conf<br>port 6379<br>bind 0.0.0.0<br>cluster-enabled yes<br>cluster-config-file nodes.conf<br>cluster-node-timeout 5000<br>cluster-announce-ip 172.38.0.1$&#123;port&#125;<br>cluster-announce-port 6379<br>cluster-announce-bus-port 16379<br>appendonly yes<br>EOF<br>done<br><br>docker run -p 637$&#123;port&#125;:6379 -p 1637$&#123;port&#125;:16379 --name redis-$&#123;port&#125; \<br>-v /mydata/redis/node-$&#123;port&#125;/data:/data \<br>-v /mydata/redis/node-$&#123;port&#125;/conf/redis.conf:/etc/redis/redis.conf \<br>-d --net redis --ip 172.38.0.1$&#123;port&#125; redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf; \<br><br>docker run -p 6376:6379 -p 16376:16379 --name redis-6 \<br>-v /mydata/redis/node-6/data:/data \<br>-v /mydata/redis/node-6/conf/redis.conf:/etc/redis/redis.conf \<br>-d --net redis --ip 172.38.0.16 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf; \<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建集群</span><br>/data # redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --cluster-replicas 1<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Performing <span class="hljs-built_in">hash</span> slots allocation on 6 nodes...</span><br>Master[0] -&gt; Slots 0 - 5460<br>Master[1] -&gt; Slots 5461 - 10922<br>Master[2] -&gt; Slots 10923 - 16383<br>Adding replica 172.38.0.15:6379 to 172.38.0.11:6379<br>Adding replica 172.38.0.16:6379 to 172.38.0.12:6379<br>Adding replica 172.38.0.14:6379 to 172.38.0.13:6379<br>M: 0f5cca1448266f1afb8a2818229e73f716ccf3e4 172.38.0.11:6379<br>   slots:[0-5460] (5461 slots) master<br>M: f86cd1e9ab3ef69d6c7da52dddc16091346f00d7 172.38.0.12:6379<br>   slots:[5461-10922] (5462 slots) master<br>M: 2ceb335c841c7313ce9a14f664ce5f32d8a79a84 172.38.0.13:6379<br>   slots:[10923-16383] (5461 slots) master<br>S: c30fdd6b0698566ed0fc043c267809a98353e5a0 172.38.0.14:6379<br>   replicates 2ceb335c841c7313ce9a14f664ce5f32d8a79a84<br>S: 20ea2a40faaa3212237677d3adefe3fe543fa838 172.38.0.15:6379<br>   replicates 0f5cca1448266f1afb8a2818229e73f716ccf3e4<br>S: 9d3e36fdff17d3b5f95e94024d2af63d8c19be32 172.38.0.16:6379<br>   replicates f86cd1e9ab3ef69d6c7da52dddc16091346f00d7<br>Can I set the above configuration? (type &#x27;yes&#x27; to accept): yes<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Nodes configuration updated</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Assign a different config epoch to each node</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Sending CLUSTER MEET messages to <span class="hljs-built_in">join</span> the cluster</span><br>Waiting for the cluster to join<br>..<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Performing Cluster Check (using node 172.38.0.11:6379)</span><br>M: 0f5cca1448266f1afb8a2818229e73f716ccf3e4 172.38.0.11:6379<br>   slots:[0-5460] (5461 slots) master<br>   1 additional replica(s)<br>M: f86cd1e9ab3ef69d6c7da52dddc16091346f00d7 172.38.0.12:6379<br>   slots:[5461-10922] (5462 slots) master<br>   1 additional replica(s)<br>M: 2ceb335c841c7313ce9a14f664ce5f32d8a79a84 172.38.0.13:6379<br>   slots:[10923-16383] (5461 slots) master<br>   1 additional replica(s)<br>S: 20ea2a40faaa3212237677d3adefe3fe543fa838 172.38.0.15:6379<br>   slots: (0 slots) slave<br>   replicates 0f5cca1448266f1afb8a2818229e73f716ccf3e4<br>S: 9d3e36fdff17d3b5f95e94024d2af63d8c19be32 172.38.0.16:6379<br>   slots: (0 slots) slave<br>   replicates f86cd1e9ab3ef69d6c7da52dddc16091346f00d7<br>S: c30fdd6b0698566ed0fc043c267809a98353e5a0 172.38.0.14:6379<br>   slots: (0 slots) slave<br>   replicates 2ceb335c841c7313ce9a14f664ce5f32d8a79a84<br>[OK] All nodes agree about slots configuration.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check <span class="hljs-keyword">for</span> open slots...</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check slots coverage...</span><br>[OK] All 16384 slots covered.<br>/data #<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">搭建成功</span><br>172.38.0.14:6379&gt; cluster nodes<br>f86cd1e9ab3ef69d6c7da52dddc16091346f00d7 172.38.0.12:6379@16379 master - 0 1607142666417 2 connected 5461-10922<br>9d3e36fdff17d3b5f95e94024d2af63d8c19be32 172.38.0.16:6379@16379 slave f86cd1e9ab3ef69d6c7da52dddc16091346f00d7 0 1607142667421 6 connected<br>2ceb335c841c7313ce9a14f664ce5f32d8a79a84 172.38.0.13:6379@16379 slave c30fdd6b0698566ed0fc043c267809a98353e5a0 0 1607142667019 7 connected<br>20ea2a40faaa3212237677d3adefe3fe543fa838 172.38.0.15:6379@16379 slave 0f5cca1448266f1afb8a2818229e73f716ccf3e4 0 1607142666000 5 connected<br>c30fdd6b0698566ed0fc043c267809a98353e5a0 172.38.0.14:6379@16379 myself,master - 0 1607142666000 7 connected 10923-16383<br>0f5cca1448266f1afb8a2818229e73f716ccf3e4 172.38.0.11:6379@16379 master - 0 1607142666518 1 connected 0-5460<br>172.38.0.14:6379&gt;<br></code></pre></td></tr></table></figure><h2 id="SpringBoot-微服务打包-Docker-镜像"><a href="#SpringBoot-微服务打包-Docker-镜像" class="headerlink" title="SpringBoot 微服务打包 Docker 镜像"></a>SpringBoot 微服务打包 Docker 镜像</h2><ol><li>编写 SpringBoot 代码</li><li>打包应用</li><li>编写 Dockerfile</li><li>发布镜像到服务器</li><li>发布运行</li></ol><h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h1><blockquote><p>轻松高效地管理容器，定义运行多个容器</p><p>让程序在任何地方运行：web 服务、redis、mysql、nginx</p><p>本节文档：<a href="https://docs.docker.com/compose/gettingstarted/">https://docs.docker.com/compose/gettingstarted/</a></p></blockquote><h2 id="三步骤"><a href="#三步骤" class="headerlink" title="三步骤"></a>三步骤</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 1、定义 Dockerfile<br><span class="hljs-bullet">-</span> 2、编写 docker-compose.yml<br><span class="hljs-bullet">  -</span> services：容器，应用（web、redis、mysql）<br><span class="hljs-bullet">  -</span> project：项目，一组关联的容器<br><span class="hljs-bullet">-</span> 3、通过命令 docker-compose up 启动<br></code></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ol><li>编写应用 app.py</li></ol><ul><li>Create a directory for the project:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> composetest</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> composetest</span><br></code></pre></td></tr></table></figure><ul><li>编写应用 <code>app.py</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">import</span> redis<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br>app = Flask(__name__)<br>cache = redis.Redis(host=<span class="hljs-string">&#x27;redis&#x27;</span>, port=<span class="hljs-number">6379</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_hit_count</span>():<br>    retries = <span class="hljs-number">5</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> cache.incr(<span class="hljs-string">&#x27;hits&#x27;</span>)<br>        <span class="hljs-keyword">except</span> redis.exceptions.ConnectionError <span class="hljs-keyword">as</span> exc:<br>            <span class="hljs-keyword">if</span> retries == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">raise</span> exc<br>            retries -= <span class="hljs-number">1</span><br>            time.sleep(<span class="hljs-number">0.5</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>():<br>    count = get_hit_count()<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello World! I have been seen &#123;&#125; times.\n&#x27;</span>.<span class="hljs-built_in">format</span>(count)<br></code></pre></td></tr></table></figure><ul><li>创建 <code>requirements.txt</code></li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">flask</span><br><span class="hljs-attribute">redis</span><br></code></pre></td></tr></table></figure><ol start="2"><li>编写 Dockerfile</li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> python:<span class="hljs-number">3.7</span>-alpine<br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /code</span><br><span class="hljs-keyword">ENV</span> FLASK_APP=app.py<br><span class="hljs-keyword">ENV</span> FLASK_RUN_HOST=<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apk add --no-cache gcc musl-dev linux-headers</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> requirements.txt requirements.txt</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> pip install -r requirements.txt</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">5000</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . .</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;flask&quot;</span>, <span class="hljs-string">&quot;run&quot;</span>]</span><br></code></pre></td></tr></table></figure><ol start="3"><li>定义<code>docker-compose.yml</code></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.8&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">web:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">.</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;5000:5000&quot;</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;redis:alpine&quot;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>启动并访问服务</li></ol><ul><li>启动</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker-compose up</span><br><br>Creating network &quot;composetest_default&quot; with the default driver<br>Creating composetest_web_1 ...<br>Creating composetest_redis_1 ...<br>Creating composetest_web_1<br>Creating composetest_redis_1 ... done<br>Attaching to composetest_web_1, composetest_redis_1<br>web_1    |  * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)<br>redis_1  | 1:C 17 Aug 22:11:10.480 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo<br>redis_1  | 1:C 17 Aug 22:11:10.480 # Redis version=4.0.1, bits=64, commit=00000000, modified=0, pid=1, just started<br>redis_1  | 1:C 17 Aug 22:11:10.480 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf<br>web_1    |  * Restarting with stat<br>redis_1  | 1:M 17 Aug 22:11:10.483 * Running mode=standalone, port=6379.<br>redis_1  | 1:M 17 Aug 22:11:10.483 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.<br>web_1    |  * Debugger is active!<br>redis_1  | 1:M 17 Aug 22:11:10.483 # Server initialized<br>redis_1  | 1:M 17 Aug 22:11:10.483 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command &#x27;echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled&#x27; as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.<br>web_1    |  * Debugger PIN: 330-787-903<br>redis_1  | 1:M 17 Aug 22:11:10.483 * Ready to accept connections<br></code></pre></td></tr></table></figure><ul><li>访问 <a href="http://localhost:5000/">http://localhost:5000/</a></li></ul><p>5 、停止</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@server1 composetest]# docker-compose down<br>Stopping composetest_web_1   ... done<br>Stopping composetest_redis_1 ... done<br>Removing composetest_web_1   ... done<br>Removing composetest_redis_1 ... done<br>Removing network composetest_default<br>[root@server1 composetest]#<br></code></pre></td></tr></table></figure><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 默认网卡：文件夹名\<span class="hljs-emphasis">_default，这样都在同一网段，可以通过域名访问</span><br><span class="hljs-emphasis">- 默认服务名：文件夹名\_</span>服务名\<span class="hljs-emphasis">_num （num：副本数量）</span><br><span class="hljs-emphasis">- 一般都是集群部署，不会只有一个实例</span><br></code></pre></td></tr></table></figure><h2 id="docker-compose-yml-编写规则"><a href="#docker-compose-yml-编写规则" class="headerlink" title="docker-compose.yml 编写规则"></a>docker-compose.yml 编写规则</h2><blockquote><p>文档地址：<a href="https://docs.docker.com/compose/compose-file/">https://docs.docker.com/compose/compose-file/</a></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 1、版本</span><br><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment"># 2、服务</span><br><span class="hljs-attr">services:</span><br><span class="hljs-string">服务1:</span><br><span class="hljs-string">xxx</span><br><span class="hljs-string">xxx</span><br><span class="hljs-string">服务2:</span><br>  <span class="hljs-string">xxx</span><br>  <span class="hljs-string">xxx</span><br><br><span class="hljs-comment"># 其他：网络/卷/全局规则</span><br></code></pre></td></tr></table></figure><h2 id="例子：个人博客"><a href="#例子：个人博客" class="headerlink" title="例子：个人博客"></a>例子：个人博客</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 创建目录m y_wordpress</span><br><span class="hljs-string">mkdir</span> <span class="hljs-string">my_wordpress</span><br><br><span class="hljs-comment"># 创建docker-compose.yml</span><br><span class="hljs-string">cd</span> <span class="hljs-string">my_wordpress</span><br><span class="hljs-string">vim</span> <span class="hljs-string">docker-compose.yml</span><br><br><br><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.3&#x27;</span><br><span class="hljs-attr">services:</span><br>   <span class="hljs-attr">db:</span><br>     <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:5.7</span><br>     <span class="hljs-attr">volumes:</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-string">db_data:/var/lib/mysql</span><br>     <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>     <span class="hljs-attr">environment:</span><br>       <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-string">somewordpress</span><br>       <span class="hljs-attr">MYSQL_DATABASE:</span> <span class="hljs-string">wordpress</span><br>       <span class="hljs-attr">MYSQL_USER:</span> <span class="hljs-string">wordpress</span><br>       <span class="hljs-attr">MYSQL_PASSWORD:</span> <span class="hljs-string">wordpress</span><br>   <span class="hljs-attr">wordpress:</span><br>     <span class="hljs-attr">depends_on:</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-string">db</span><br>     <span class="hljs-attr">image:</span> <span class="hljs-string">wordpress:latest</span><br>     <span class="hljs-attr">ports:</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8000:80&quot;</span><br>     <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>     <span class="hljs-attr">environment:</span><br>       <span class="hljs-attr">WORDPRESS_DB_HOST:</span> <span class="hljs-string">db:3306</span><br>       <span class="hljs-attr">WORDPRESS_DB_USER:</span> <span class="hljs-string">wordpress</span><br>       <span class="hljs-attr">WORDPRESS_DB_PASSWORD:</span> <span class="hljs-string">wordpress</span><br>       <span class="hljs-attr">WORDPRESS_DB_NAME:</span> <span class="hljs-string">wordpress</span><br><span class="hljs-attr">volumes:</span><br>    <span class="hljs-attr">db_data:</span> &#123;&#125;<br><br><span class="hljs-comment"># 运行</span><br><span class="hljs-string">docker-compose</span> <span class="hljs-string">up</span> <span class="hljs-string">-d</span><br><br><span class="hljs-comment"># 访问</span><br><span class="hljs-string">aly:8000</span><br></code></pre></td></tr></table></figure><h2 id="容器部署个人微服务"><a href="#容器部署个人微服务" class="headerlink" title="容器部署个人微服务"></a>容器部署个人微服务</h2><h1 id="Docker-Swarm"><a href="#Docker-Swarm" class="headerlink" title="Docker Swarm"></a>Docker Swarm</h1><blockquote><p>集群方式的部署</p></blockquote><h1 id="CI-x2F-CD-之-Jenkins"><a href="#CI-x2F-CD-之-Jenkins" class="headerlink" title="CI&#x2F;CD 之 Jenkins"></a>CI&#x2F;CD 之 Jenkins</h1>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>容器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>王卓数据结构与算法</title>
    <link href="/2022/08/13/yuque/%E7%8E%8B%E5%8D%93%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    <url>/2022/08/13/yuque/%E7%8E%8B%E5%8D%93%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>程序&#x3D;算法+数据结构。可见算法和数据结构的重要性。该课程来自 bilibili<a href="https://www.bilibili.com/video/BV1nJ411V7bd?from=search&seid=7423478234192448238">分享</a></p><span id="more"></span><h1 id="一、数据结构基本概念"><a href="#一、数据结构基本概念" class="headerlink" title="一、数据结构基本概念"></a>一、数据结构基本概念</h1><h2 id="1、数据结构研究内容"><a href="#1、数据结构研究内容" class="headerlink" title="1、数据结构研究内容"></a>1、数据结构研究内容</h2><ul><li>抽象为数学模型<ul><li>分析问题</li><li>提取操作对象</li><li>找出操作对象间关系</li><li>用数学语言描述</li></ul></li><li>设计算法</li><li>编程、调试、 运行</li></ul><h2 id="2、基本概念和术语"><a href="#2、基本概念和术语" class="headerlink" title="2、基本概念和术语"></a>2、基本概念和术语</h2><ul><li>Data</li><li>数据对象</li><li>数据结构<ul><li>逻辑结构<ul><li>划分方式一<ul><li>线性结构：线性表、栈、队列、串</li><li>非线性结构： 树、图</li></ul></li><li>划分方式二<ul><li>几何</li><li>线性</li><li>树</li><li>图、网</li></ul></li></ul></li><li>物理结构（存储结构）<ul><li>顺序</li><li>链式</li><li>索引</li><li>散列</li></ul></li></ul></li></ul><h2 id="3、抽象数据类型与表示"><a href="#3、抽象数据类型与表示" class="headerlink" title="3、抽象数据类型与表示"></a>3、抽象数据类型与表示</h2><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fhp-6WGO8QlmVmyUZ2YpywzMQENX.png"></p><h2 id="4、算法与算法分析"><a href="#4、算法与算法分析" class="headerlink" title="4、算法与算法分析"></a>4、算法与算法分析</h2><blockquote><p>算法：解决问题的一种方法或一个过程</p><p>程序 &#x3D; 数据结构+ 算法</p></blockquote><h3 id="1、算法特性"><a href="#1、算法特性" class="headerlink" title="1、算法特性"></a>1、算法特性</h3><ul><li>有穷性</li><li>确定性</li><li>可行性</li><li>输入</li><li>输出</li></ul><h3 id="2、算法设计要求"><a href="#2、算法设计要求" class="headerlink" title="2、算法设计要求"></a>2、算法设计要求</h3><ul><li>正确性<ul><li>不含语法错误</li><li>对于几组输入得出满足条件的结果</li><li>对于精心选择、典型、苛刻的数据能得到满足的输出</li><li>一切合法输出都能得到满足的输出</li></ul></li><li>可读性<ul><li>不晦涩难懂</li><li>便于阅读交流，最好有注释</li></ul></li><li>健壮性<ul><li>输出非法数据会做出恰当处理</li><li>处理出错不会中断执行，会返回一个表示错误的值</li></ul></li><li>高效性<ul><li>最好时间空间消耗低</li></ul></li></ul><h3 id="3、算法时间效率的度量"><a href="#3、算法时间效率的度量" class="headerlink" title="3、算法时间效率的度量"></a>3、算法时间效率的度量</h3><ul><li>事前分析<ul><li>对资源消耗低估算</li><li><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fqhzu_4LGQ96Ck1r0wgwcaKQWlOd.com/gr/latex?%E7%AE%97%E6%B3%95%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4%20=%5Csum%E6%AF%8F%E6%9D%A1%E8%AF%AD%E5%8F%A5%E9%A2%91%E5%BA%A6%5C;*%5C;%20%E8%AF%A5%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E4%B8%80%E6%AC%A1%E6%89%80%E9%9C%80%E6%97%B6%E9%97%B4"></li><li>一般只比较数量级</li></ul></li><li>事后统计<ul><li>将算法实现，测算时间空间消耗</li><li>缺点<ul><li>编写实现算法花费时间经历多</li><li>实验结果依赖于计算机当前硬件，掩盖算法优劣</li></ul></li></ul></li></ul><h1 id="二、基本数据结构"><a href="#二、基本数据结构" class="headerlink" title="二、基本数据结构"></a>二、基本数据结构</h1><h2 id="1、线性结构"><a href="#1、线性结构" class="headerlink" title="1、线性结构"></a>1、线性结构</h2><h3 id="1、线性表-Linear-List"><a href="#1、线性表-Linear-List" class="headerlink" title="1、线性表(Linear List)"></a>1、线性表(Linear List)</h3><blockquote><p>由 n(n≥0)个数据元素组成的有限序列</p><ul><li>n 定义表的长度</li><li>n&#x3D;0 时称为空表</li><li>数据元素只是抽象符号，具体含义在不同情况下可以不同</li></ul></blockquote><h4 id="逻辑特征"><a href="#逻辑特征" class="headerlink" title="逻辑特征"></a>逻辑特征</h4><ul><li>非空线性表有且仅有一个开始节点，他没有直接前趋，仅有一个直接后继</li><li>有且仅有一个终端节点，他没有直接后继，有且仅有一个直接前趋</li><li>其余内部节点，都有且仅有一个直接前趋和一个直接后继</li></ul><h4 id="类型定义"><a href="#类型定义" class="headerlink" title="类型定义"></a>类型定义</h4><ul><li>抽象数据类型线性表的定义如下</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fu-QRv33imWjtl_ELVLDoWohaC6l.png"></p><ul><li>基本操作</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"># 构造一个空的线性表L<br><span class="hljs-title function_">InitList</span><span class="hljs-params">(&amp;L)</span><br><br># 销毁线性表L（初始条件：L已存在）<br><span class="hljs-title function_">DestoryList</span><span class="hljs-params">(&amp;L)</span><br><br># 将线性表重置为空（初始条件：L已存在）<br><span class="hljs-title function_">ClearList</span><span class="hljs-params">(&amp;L)</span><br><br># L为空返回TRUE，否则返回<span class="hljs-literal">false</span>（初始条件：L已存在）<br><span class="hljs-title function_">ListEmpty</span><span class="hljs-params">(L)</span><br><br># 返回线性表L的数据元素个数（初始条件：L已存在）<br><span class="hljs-title function_">ListLength</span><span class="hljs-params">(L)</span><br><br># 用e返回L中第i个数据元素（初始条件：L已存在,1 ≤ i ≤ <span class="hljs-title function_">ListLength</span><span class="hljs-params">(L)</span>）<br><span class="hljs-title function_">GetElem</span><span class="hljs-params">(L,i,&amp;e)</span><br><br># 返回L中第一个与e满足<span class="hljs-title function_">compare</span><span class="hljs-params">()</span>的数据元素的位置，不存在就返回0（初始条件：L已存在，compare是判定函数）<br><span class="hljs-title function_">LocateElem</span><span class="hljs-params">(L,e,compare())</span><br><br># 若cur_e是L中的元素且不是第一个，用pre_e返回它的前驱；否则操作失败，pre_e无意义（初始条件：L已存在）<br><span class="hljs-title function_">PriorElem</span><span class="hljs-params">(L,cur_e,&amp;pre_e)</span><br><br># 若cur_e是L中元素且不是最后一个，用next_e返回它的后继；否则操作失败，next_e无意义（初始条件：L已存在）<br><span class="hljs-title function_">NextElem</span><span class="hljs-params">(L,cur_e,&amp;next_e)</span><br><br># 在L的第i个位置之前插入新数据元素e，L长度+1（初始条件：L已存在,1 ≤ i ≤ <span class="hljs-title function_">ListLength</span><span class="hljs-params">(L)</span>）<br><span class="hljs-title function_">ListInsert</span><span class="hljs-params">(&amp;L,i,e)</span><br><br># 删除L的第i个元素，用e返回其值，L长度-1（初始条件：L已存在,1 ≤ i ≤ <span class="hljs-title function_">ListLength</span><span class="hljs-params">(L)</span>）<br><span class="hljs-title function_">ListDelete</span><span class="hljs-params">(&amp;L,i,&amp;e)</span><br><br># 依次对线性表每个元素调用<span class="hljs-title function_">visited</span><span class="hljs-params">()</span>（初始条件：L已存在）<br><span class="hljs-title function_">ListTraverse</span><span class="hljs-params">(&amp;L, visited())</span><br></code></pre></td></tr></table></figure><h4 id="顺序表示和实现"><a href="#顺序表示和实现" class="headerlink" title="顺序表示和实现"></a>顺序表示和实现</h4><blockquote><p>定义：把逻辑上相邻的数据元素存储在物理上相邻的存储单元中</p><ul><li>占用一片连续的存储空间</li><li>知道某个元素存储位置就可计算其他元素的存储位置</li></ul></blockquote><ul><li>实现一</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fpws3fpMyLFqsMUMe6Na22erF6pP.png"></p><ul><li>实现二</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FmBu_mRohE59M7C3pQX57RFsjIs2.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"># 数组静态分配<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>  # 具体情况具体选择ElemType<br>  ElemType data[MaxSize];<br>  <span class="hljs-type">int</span> length;<br>&#125;SqList;<br><br># 数组动态分配<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>  ElemType *data;<br>  <span class="hljs-type">int</span> length;<br>&#125;SqList;<br>SqList L;<br># 分配内存<br>L.data = (ElemType*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(ElemType)*MaxSize)<br></code></pre></td></tr></table></figure><ul><li>实现三</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FnkXjvP9sWlRJYcx42NMTLRF8OiH.png"></p><ul><li>知识补充</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// C语言动态内存分配</span><br><span class="hljs-comment">// 开辟m字节地址空间，并返回这段空间的首地址</span><br><span class="hljs-built_in">malloc</span>(m)<br><span class="hljs-comment">// 计算变量x的长度</span><br><span class="hljs-keyword">sizeof</span>(x)<br><span class="hljs-comment">// 释放指针p所指变量的存储空间，即彻底删除一个变量</span><br><span class="hljs-built_in">free</span>(p)<br><br><span class="hljs-comment">// c++动态存储分配</span><br><span class="hljs-comment">// 申请存放T类型对象的内存空间，并依初值列表赋以初值</span><br><span class="hljs-comment">// return T类型指针，指向新分配的内存 or 0(失败)</span><br>new 类型T(初值列表)<br><br><span class="hljs-comment">// 释放指针p所指向内存，p必须是new操作返回值</span><br>delete p<br><br><span class="hljs-comment">// c++参数传递</span><br><span class="hljs-comment">// 函数调用时，参数列表的类型、个数、顺序必须一致</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">参数传递两种方式</span><br><span class="hljs-comment">传值（整型、实型、字符型）</span><br><span class="hljs-comment">- 一般变量做参数，形参变量的值是实参变量的副本</span><br><span class="hljs-comment">传地址</span><br><span class="hljs-comment">- 指针变量(易产生错误且阅读性较差；主函数调用点处必须用变量的地址作为实参)</span><br><span class="hljs-comment">- 引用类型(最好，直接对实参操作，在内存中没有产生实参的副本，时空效率更高)</span><br><span class="hljs-comment">- 数组名(代表数组第一个元素的地址 )</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> i = <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> &amp;j = i;<br>i = <span class="hljs-number">7</span>;<br>j是应用类型<br></code></pre></td></tr></table></figure><ul><li>基本操作的实现</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FnNYwYjpZZiHTlZs_yqMbIGOF-lF.png"></p><ul><li>线性表 L 的初始化(参数用引用)</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FkQldKD6151tkScIYdaYF-Aa3QCp.png"></p><ul><li>销毁线性表 L</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FrnvNxwp8x9b4CSnnPFnedt32IfP.png"></p><ul><li>清空线性表 L</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FkcUU2f5GFBNA152rGGg90uR6icE.png"></p><ul><li>求线性表 L 的长度</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fhn1TakY9A0n5ULQZGTcXVbotmDL.png"></p><ul><li>判断线性表是否为空</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fp08rcr2AH9tmwJg2Gzf4mCnlu0_.png"></p><ul><li>线性表的取值(随机存取)</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FpmGWA6jQJxTMNaMpnVjgZ8_iie6.png"></p><ul><li>按值查找</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FgKyLfU5URihTLE7emEt0CzCEIPw.png"></p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fjdmq_TGZklxrppUNNWmS7KU_cUh.png"></p><ul><li>插入值</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fj9XCrcAp3nwtXqVqPTIWC8smW2U.png"></p><ul><li>删除表的元素</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FnA4UHVRAxqP4xwzrrdI3PhCWSuQ.png"></p><ul><li>小结</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FgcF3iA98jCnQwzt7lxWG4YYZlIr.png"></p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fql70orHVfi3jNVC50RPAPFQ9Nx_.png"></p><h4 id="链式表示和实现"><a href="#链式表示和实现" class="headerlink" title="链式表示和实现"></a>链式表示和实现</h4><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FlvyuEsjrG9LFfZuLOz6dxGVl-PF.png"></p><ul><li>特点</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FtQRzcKx2YSjXgOolQlTdxFnekPC.png"></p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FshwZvByUsu34ZSQstLunpX6dJqz.png"></p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fjafu1s6I5IaG3ISSAxm_94IFuqs.png"></p><ul><li>几个问题</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FpucRiw5lkwzkhgqgPWF1NFTwfnh.png"></p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FuvWqNG0_R0brDqfbRUkQ8iot-ef.png"></p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FimN4TPAzcAvnWO5O_aCwJDwfB7V.png"></p><ul><li>实现一：单链表</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FlqJAXEXPcxQFt_xf_QslPVCgLqm.png"></p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fg4OsT7UpGP7W7FoPfllpMi55LnH.png"></p><ul><li>基本操作</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//初始化单链表</span><br>Status <span class="hljs-title function_">LinkList_L</span><span class="hljs-params">(LinkList &amp;L)</span>&#123;<br>  L = new LNode;<br>  L-&gt;next = null;<br>  <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-comment">//判断链表是否为空</span><br><span class="hljs-comment">//判断头指针是否为空即可</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ListEmpty</span><span class="hljs-params">(LinkList L)</span>&#123;<br>  <span class="hljs-comment">//return L-&gt;next == null ? 0 : 1;</span><br>  <span class="hljs-keyword">if</span>(L-&gt;next)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">//销毁单链表L：销毁后链表消失</span><br><span class="hljs-comment">//从头指针开始，依次释放宿友友节点</span><br>Status <span class="hljs-title function_">DestoryList_L</span><span class="hljs-params">(LinkList &amp;L)</span>&#123;<br>  Lnode *p; <span class="hljs-comment">//或LinkList p</span><br>  <span class="hljs-keyword">while</span>(L)&#123;<br>    p = l;<br>    L =L-&gt;next;<br>    delete p;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//清空链表：链表仍存在，成为空链表</span><br><span class="hljs-comment">//依次释放所有节点，并将头节点指针域设为空</span><br>Status <span class="hljs-title function_">ClearList</span><span class="hljs-params">(LinkList &amp;L)</span>&#123;<br>  Lnode *p,*q;<br>  p = L-&gt;next;<br>  <span class="hljs-keyword">while</span>(p)&#123;<span class="hljs-comment">//没到尾</span><br>    q = p-&gt;next;<br>    delete p;<br>    p = q;<span class="hljs-comment">//下一个节点为首节点</span><br>  &#125;<br>  L-&gt;next = null;<br>  <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-comment">//求链表长度</span><br><span class="hljs-comment">//从首元节点开始，依次计数所有节点</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ListLength_L</span><span class="hljs-params">(LinkList L)</span>&#123;<br>  LinkList p;<br>  p = l-&gt;next;<br>  i = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span>(p)&#123;<br>    i++;<br>    p = p-&gt;next;<br>  &#125;<br>  <span class="hljs-keyword">return</span> i;<br>&#125;<br><br><span class="hljs-comment">//获取线性表中指定index的元素</span><br>Status <span class="hljs-title function_">GetElem_L</span><span class="hljs-params">(LinkList L,<span class="hljs-type">int</span> i,ElemType &amp;e)</span>&#123;<br>  p = l-&gt;next;j = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span>(p &amp;&amp; j&lt;<span class="hljs-number">1</span>)&#123;<br>    p = p-&gt;next;++j;<br>  &#125;<br>  <span class="hljs-keyword">if</span>(!p || j&gt;i) <span class="hljs-keyword">return</span> ERROR; <span class="hljs-comment">//第i个元素不存在</span><br>  e = p-&gt;data<br>  <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-comment">//按值查找地址</span><br>Lnode *<span class="hljs-title function_">LocateElem_L</span><span class="hljs-params">(LinkList L,ElemType e)</span>&#123;<br>  p = L-&gt;next;<br>  <span class="hljs-keyword">while</span>(p &amp;&amp; p-&gt;data != e)<br>    p = p-&gt;next;<br>  <span class="hljs-keyword">return</span> p:<br>&#125;<br><br><span class="hljs-comment">//在线性表L中查找值为e的数据元素的index</span><br><span class="hljs-type">int</span> LocateElem_L(LinkList L,ElemType e)&#123;<br>  p = L-&gt;next;j=<span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span>(p &amp;&amp; p-&gt;data != e)&#123;<br>    p = p-&gt;next;<br>    j++;<br>  &#125;<br>  <span class="hljs-keyword">if</span>(p) <span class="hljs-keyword">return</span> j;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//在第i个节点插入值为e的新节点</span><br>Status <span class="hljs-title function_">ListInsert_L</span><span class="hljs-params">(LinkList &amp;L,<span class="hljs-type">int</span> i,ElemType e)</span>&#123;<br>  p = L;j = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span>(p &amp;&amp; j &lt; i<span class="hljs-number">-1</span>) &#123;p = p-&gt;next; j++;&#125; <span class="hljs-comment">//寻找第i-1个节点，p指向i-1</span><br>  <span class="hljs-keyword">if</span>(!p || j &gt; i<span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> ERROR;<span class="hljs-comment">//i大于表长+1或小于1，插入位置非法</span><br>  s = new LNode;<span class="hljs-comment">//生成新节点s</span><br>  s-&gt;data = e;<span class="hljs-comment">//s数据域设置为e</span><br>  s-&gt;next = p-&gt;next;<span class="hljs-comment">//将s插入l中</span><br>  p-&gt;next = s;<br>  <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-comment">//删除第i个节点</span><br>Status <span class="hljs-title function_">ListDelete_L</span><span class="hljs-params">(LinkList &amp;L,<span class="hljs-type">int</span> i,ElemType e)</span>&#123;<br>  p = L;j = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span>(p &amp;&amp; j &lt; i<span class="hljs-number">-1</span>) &#123;p = p-&gt;next; ++j;&#125; <span class="hljs-comment">//寻找第i个节点，p指向其前驱</span><br>  <span class="hljs-keyword">if</span>(!p-&gt;next || j &gt; i<span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> ERROR; <span class="hljs-comment">//删除位置不合理</span><br>  q = p-&gt;next;<span class="hljs-comment">//临时保存被删除节点的地址以备释放</span><br>  p-&gt;next = q-&gt;next;<span class="hljs-comment">//改变删除节点前驱节点的指针域</span><br>  e = q-&gt;data;<span class="hljs-comment">//保存删除节点的指针域</span><br>  delete q;<span class="hljs-comment">//释放删除节点的空间</span><br>  <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-comment">//头插法建链表</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">CreateList_H</span><span class="hljs-params">(LinkList &amp;L,<span class="hljs-type">int</span> n)</span>&#123;<br>  L = new LNode;<br>  L-&gt;next = null;<span class="hljs-comment">//建立一个带头节点的单链表</span><br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n; i &gt; <span class="hljs-number">0</span>; --i)&#123;<br>    p = new LNode;<span class="hljs-comment">//生成新节点</span><br>    <span class="hljs-built_in">cin</span> &gt;&gt; p-&gt;next;<br>    p-&gt;next = L-&gt;next;<br>    L-&gt;next = p;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//尾插法建立链表</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">CreateList_R</span><span class="hljs-params">(LinkList &amp;L,<span class="hljs-type">int</span> n)</span>&#123;<br>  L = new LNode;<br>  L-&gt;next = null;<br>  r = L;<span class="hljs-comment">//尾指针指向头节点</span><br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>    p = new LNode; <span class="hljs-built_in">cin</span> &gt;&gt; p-&gt;next; <span class="hljs-comment">//生成新节点，输入元素值</span><br>    p-&gt;next = null;<br>    r-&gt;next = p;<span class="hljs-comment">//插入到尾表</span><br>    r = p;<span class="hljs-comment">//r指向新的尾节点</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>循环链表</li></ul><blockquote><p>循环链表：是一种头尾相连的链表</p><ul><li>从表中任意一节点出发均可以找到其他节点</li><li>查找比单链表更方便</li></ul></blockquote><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FqMlntNQzC9AEdwaQQkAOIj9_Lbl.png"></p><ul><li>两个链表合并</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">LinkList <span class="hljs-title function_">Connect</span><span class="hljs-params">(LinkList a,LinkList b)</span>&#123;<span class="hljs-comment">//假设ab均为非空单链表</span><br>  p = a-&gt;next; <span class="hljs-comment">//p存表a头节点</span><br>  a-&gt;next = b-&gt;next-&gt;next;<span class="hljs-comment">//b表头连接a表尾</span><br>  delete b-&gt;next;<span class="hljs-comment">//释放b表头节点</span><br>  b-&gt;next = p;<span class="hljs-comment">//修改指针</span><br>  <span class="hljs-keyword">return</span> b;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>实现三：双向链表</li><li>定义</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FuB96AWd_sF7z_cUCsvnLT9E9PnD.png"></p><ul><li>实现四：双向循环链表</li><li>定义</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fs1H19T17J8hrGa7eZ8NbupIHj7_.png"></p><ul><li>一般操作</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//插入</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">ListInsert_Dul</span><span class="hljs-params">(DuLinkList &amp;L,<span class="hljs-type">int</span> i,ElemType e)</span>&#123;<br>  <span class="hljs-comment">//在带有头节点的的双向循环链表L中第i个位置之前插入元素e</span><br>  <span class="hljs-keyword">if</span>(!(p = GetElemP_DuL(L,i))) <span class="hljs-keyword">return</span> ERROR;<br>  s = new DuLNode;s-&gt;data = e;<br>  s-&gt;prior = p-&gt;prior;p-&gt;prior-&gt;next = s;<br>  s-&gt;next = p;            p-&gt;prior = s;<br>  <span class="hljs-keyword">return</span> OK;<br>&#125;<br><br><span class="hljs-comment">//双向链表的删除</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">ListDelete_DuL</span><span class="hljs-params">(DuLink &amp;L,<span class="hljs-type">int</span> i,Elemtype &amp;e)</span>&#123;<br>  <span class="hljs-comment">//删除带头节点的双抗循环链表L的第i个元素，并用e返回</span><br>  <span class="hljs-keyword">if</span>(!(p = getElemP_DuL(L,i))) <span class="hljs-keyword">return</span> ERROR;<br>  e = p-&gt;data;<br>  p-&gt;prior-&gt;next = p-&gt;next;<br>  p-&gt;next-&gt;prior = p-&gt;prior;<br>  <span class="hljs-built_in">free</span>(p);<br>  <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>几种比较</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FhaTM9OiC78DRrg_uEqmWbGSbg4j.png"></p><h4 id="顺序表和链表的比较"><a href="#顺序表和链表的比较" class="headerlink" title="顺序表和链表的比较"></a>顺序表和链表的比较</h4><ul><li>链式存储<ul><li>优点<ul><li>节点空间可以动态申请和释放</li><li>数据元素的逻辑次序靠节点的指针来提示，插入和删除不需要移动数据元素</li></ul></li><li>缺点<ul><li>存储密度小，每个节点的指针域占用额外存储空间。数据域字节数小时，空间效率低</li><li>不能随机存取</li></ul></li></ul></li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FoBi60t13iWWVw9BP0ukfzOG-LQ7.png"></p><h4 id="线性表的应用"><a href="#线性表的应用" class="headerlink" title="线性表的应用"></a>线性表的应用</h4><ul><li>线性表的合并</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//线性表的合并</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">union</span><span class="hljs-params">(List &amp;a, &amp;b)</span>&#123;<br>  a_len = ListLength(a);<br>  b_len = ListLength(b);<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= b_len; i++)&#123;<br>    GetElem(b,i,e);<br>    <span class="hljs-keyword">if</span>(!LocateElem(a,e))<br>      ListInsert(&amp;a, ++a_len, e)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//有序表合并</span><br><span class="hljs-comment">//顺序表实现</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">MergeList_Sq</span><span class="hljs-params">(SqList a,SqList b,SqList &amp;c)</span>&#123;fin<br>  pa = e.elem;<br>  pb = b.elem;<br>  c.length = a.length + b.length;<br>  c.elem = new ElemType[c.length];<br>  pc = c.elem;<br>  pa_last = a.elem + a.length - <span class="hljs-number">1</span>;<br>  pb_last = b.elem + b.length - <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span>(pa &lt;. pa_last &amp;&amp; pb &lt;= pb_last)&#123;<br>    <span class="hljs-keyword">if</span>(*pa &lt;= *pb) *pc++ = *pa++;<br>    <span class="hljs-keyword">else</span> *pc++ = *pb++;<br>  &#125;<br>  <span class="hljs-keyword">while</span>(pa &lt;= pa_last) *pc++ = *pa++;<br>  <span class="hljs-keyword">while</span>(pb &lt;= pb_last) *pc++ = *pb++;<br>&#125;<br><span class="hljs-comment">//链表实现</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Mergelist_L</span><span class="hljs-params">(LinkList &amp;a,LinkList b,LinkList &amp;c)</span>&#123;<br>  pa = a-&gt;next;pb = b-&gt;next;<br>  pc = c = a;<span class="hljs-comment">//用a的头节点作为c的头节点</span><br>  <span class="hljs-keyword">while</span>(pa &amp;&amp; pb)&#123;<br>    <span class="hljs-keyword">if</span>(pa-&gt;data &lt;= pb-&gt;data) &#123;pc-&gt;next = pa; pc= pa; pa = pa-&gt;next;&#125;<br>    <span class="hljs-keyword">else</span>&#123;pc-&gt;next = pa; pc= pa; pa = pa-&gt;next;&#125;<br>  &#125;<br>  pc-&gt;next = pa ? pa : pb;<br>  delete b;<br>&#125;<br><br><span class="hljs-comment">//多项式创建</span><br><span class="hljs-comment">//输入m项的系数和指数，建立多项式有序链表</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">CreatePolyn</span><span class="hljs-params">(Polynomial &amp;p,<span class="hljs-type">int</span> n)</span>&#123;<br>  p = new PNode;<br>  p-&gt;next = null;<span class="hljs-comment">//先建立一个带头节点的单链表</span><br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<span class="hljs-comment">//依次输入n个非零项</span><br>    s = new PNode;<span class="hljs-comment">//生成新节点</span><br>    <span class="hljs-built_in">cin</span> &gt;&gt; s-&gt;ceof &gt;&gt; s-&gt;expn;<span class="hljs-comment">//输入系数和指数</span><br>    pre = p;<span class="hljs-comment">//pre用于保存q的前驱，初值为头节点</span><br>    q = p-&gt;next;<span class="hljs-comment">//q初始化，指向首元节点</span><br>    <span class="hljs-keyword">while</span>(q &amp;&amp; q-&gt;expn &lt; s-&gt;expn)&#123;<span class="hljs-comment">//找到第一个大雨输入项指数的项*q</span><br>      pre = q; q = q-&gt;next;<br>    &#125;<br>    s-&gt;next = q;<span class="hljs-comment">//将输入项s插入到q和其前驱节点pre之间</span><br>    pre-&gt;next = s;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FiCFl1cthtOnSQyxpaWYj1ES3Kuo.png"></p><h3 id="2、栈-Stack"><a href="#2、栈-Stack" class="headerlink" title="2、栈(Stack)"></a>2、栈(Stack)</h3><blockquote><p>限定插入和删除只能在表的“断点”进行的线性表</p><ul><li>栈(Stack)：后进先出(LIFO)，只能在表尾进行插入和删除<ul><li>栈顶&#x2F;栈底：Top&#x2F;Base</li><li>入栈&#x2F;出栈：Push&#x2F;Pop</li></ul></li></ul></blockquote><blockquote><ul><li>队列(Queue)：先进先出(FIFO)，</li></ul></blockquote><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs latex">栈底作用：<br>1. 表达式求值<br>设置两个栈：一个算符栈OPTR，用于寄存运算器；操作数栈OPND，寄存运算数和运算结果<br>从左往右扫描每一个字符：<br>if(运算数)，将其压入栈OPND<br>else if 优先级：这个运算符 &gt; OPTR栈顶运算符入栈<br>     else 从OPND弹出两个运算数，从OPTR弹出栈顶运算符进行运算，结果压入OPND<br>继续处理，知道遇到结束符为止<br><br>2. 舞伴问题<br></code></pre></td></tr></table></figure><h4 id="类型定义-1"><a href="#类型定义-1" class="headerlink" title="类型定义"></a>类型定义</h4><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fv5PUIIRawJQhdgEiIyz_JBkQDOq.png"></p><h4 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//顺序栈各种操作</span><br><span class="hljs-comment">//栈表示</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>  SElemType *base;<span class="hljs-comment">//栈底</span><br>  SElemType *top;<span class="hljs-comment">//栈顶</span><br>  <span class="hljs-type">int</span> stackSize;<span class="hljs-comment">//栈可用最大容量</span><br>&#125;SqStack<br><span class="hljs-comment">//栈的初始化</span><br>Status <span class="hljs-title function_">InitStack</span><span class="hljs-params">(SqStack &amp;s)</span>&#123;<br>  s.base = new SElmType[maxsize];<br>  <span class="hljs-keyword">if</span>(!s.base) <span class="hljs-built_in">exit</span>(overflow);<span class="hljs-comment">//分配失败</span><br>  s.top = s.base;<span class="hljs-comment">//栈顶指向栈底</span><br>  s.stacksize = maxsiez;<br>  <span class="hljs-keyword">return</span> ok;<br>&#125;<br><span class="hljs-comment">//判断栈是否为空</span><br>Status <span class="hljs-title function_">StackEmpty</span><span class="hljs-params">(SqStack s)</span>&#123;<br>  <span class="hljs-keyword">return</span> s.top == s.base ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-comment">//清空栈</span><br>Status <span class="hljs-title function_">ClearStack</span><span class="hljs-params">(SqStack s)</span>&#123;<br>  <span class="hljs-keyword">if</span>(s.base) s.top = s.base;<br>  <span class="hljs-keyword">return</span> ok;<br>&#125;<br><span class="hljs-comment">//销毁栈</span><br>Status <span class="hljs-title function_">DestoryStack</span><span class="hljs-params">(SqStack s)</span>&#123;<br>  <span class="hljs-keyword">if</span>(s.base)&#123;<br>    delete s.base;<br>    s.stacksize = <span class="hljs-number">0</span>;<br>    s.base = s.top = null;<br>  &#125;<br>  <span class="hljs-keyword">return</span> ok;<br>&#125;<br><span class="hljs-comment">//入栈</span><br>Status <span class="hljs-title function_">Push</span><span class="hljs-params">(SqStack &amp;s, SElemType e)</span>&#123;<br>  <span class="hljs-keyword">if</span>(s.top - s.base == s.stacksize)<span class="hljs-comment">//栈满</span><br>    <span class="hljs-keyword">return</span> ERROR;<br>  <span class="hljs-keyword">else</span> *s.top++ = e；<span class="hljs-comment">//e编程栈顶元素，栈顶上移</span><br>&#125;<br><span class="hljs-comment">//出栈</span><br>Status Pop(SqStack &amp;s,SElemType &amp;e)&#123;<br>  <span class="hljs-keyword">if</span>(s.base == s.top)<span class="hljs-comment">//栈空</span><br>    <span class="hljs-keyword">return</span> ERROR;<br>  <span class="hljs-keyword">else</span> e = *--s.top;<br>  <span class="hljs-keyword">return</span> ok;<br>&#125;<br><br><span class="hljs-comment">//栈链</span><br><span class="hljs-comment">//头指针就是栈顶，不需要头节点，基本不存在栈满的情况，空栈相当于头指针指向空，插入和删除进在栈顶处执行</span><br><span class="hljs-comment">//表示</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">StackNode</span>&#123;</span><br>  SElemType data;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">StackNode</span> *<span class="hljs-title">next</span></span><br><span class="hljs-class">&#125;<span class="hljs-title">StackNode</span>,*<span class="hljs-title">LinkStack</span>;</span><br>LinkStack s;<br><span class="hljs-comment">//初始化</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">InitStack</span><span class="hljs-params">(Linkstack &amp;s)</span>&#123;<br>  s = null;<br>  <span class="hljs-keyword">return</span> ok;<br>&#125;<br><span class="hljs-comment">//入栈</span><br>Status <span class="hljs-title function_">Push</span><span class="hljs-params">(LinkStack &amp;s,SElemtype e)</span>&#123;<br>  p = new Stacknode;<span class="hljs-comment">//生成新节点p</span><br>  p-&gt;data = e;<span class="hljs-comment">//将新节点数据域置为e</span><br>  p-&gt;next = s;<span class="hljs-comment">//将新节点插入栈顶</span><br>  s = p;<span class="hljs-comment">//修改栈顶指针</span><br>  <span class="hljs-keyword">return</span> ok;<br>&#125;<br><span class="hljs-comment">//出栈</span><br>Status <span class="hljs-title function_">Pop</span><span class="hljs-params">(LinkStack &amp;s,SElemtype &amp;e)</span>&#123;<br>  <span class="hljs-keyword">if</span>(s == null) <span class="hljs-keyword">return</span> ERROR;<br>  e = s-&gt;data;<br>  p = s;<br>  s = s-&gt;next;<br>  delete p;<br>  <span class="hljs-keyword">return</span> ok;<br>&#125;<br><span class="hljs-comment">//取栈顶元素</span><br>SElemType <span class="hljs-title function_">GetTop</span><span class="hljs-params">(LinkStack s)</span>&#123;<br>  <span class="hljs-keyword">if</span>(s != null)&#123;<br>    <span class="hljs-keyword">return</span> s-&gt;data;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="栈与递归"><a href="#栈与递归" class="headerlink" title="栈与递归"></a>栈与递归</h4><blockquote><p>递归：若一个对象部分的包含它自己，或用它自己给自己定义，则称这个对象时递归的</p></blockquote><ul><li>1、递归定义的数学函数</li><li>阶乘函数</li><li>2、具有递归性质的数据结构</li><li>3、可递归求解的问题</li><li>Eg：迷宫问题、汉诺塔</li><li>分治法：一个较为复杂的问题，能够分解为几个相对简单的且解法相似或相同的子问题来求解</li></ul><blockquote><p>必备条件：转换为新问题、简化、有边界</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//一般形式</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">p</span><span class="hljs-params">(参数表)</span>&#123;<br>  <span class="hljs-keyword">if</span>(递归结束条件) 可直接求解步骤； <span class="hljs-comment">//基本项</span><br>  <span class="hljs-keyword">else</span> p(较小参数)；<span class="hljs-comment">//归纳项</span><br>&#125;<br><span class="hljs-comment">//例子：阶乘</span><br><span class="hljs-type">long</span> fact(<span class="hljs-type">long</span> n)&#123;<br>  <span class="hljs-keyword">if</span>(n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> n * fact(n - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">//单向递归：虽有一处以上的递归调用，但各次调用只和主调函数有关，相互之间参数无关，且递归语句处于算法最后</span><br><span class="hljs-type">long</span> <span class="hljs-title function_">fib</span><span class="hljs-params">(<span class="hljs-type">long</span> n)</span>&#123;<br>  <span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span> || n == <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> fib(n - <span class="hljs-number">1</span>) + fib(n - <span class="hljs-number">2</span>);<br>&#125;<br><span class="hljs-comment">//转换为循环结构效率更高</span><br><span class="hljs-type">long</span> <span class="hljs-title function_">fib</span><span class="hljs-params">(<span class="hljs-type">long</span> n)</span>&#123;<br>  <span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span> || n == <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-type">long</span> t1 = <span class="hljs-number">1</span>,t2 = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">long</span> i = <span class="hljs-number">3</span>; i &lt;= n; i++)&#123;<br>      t3 = t1 + t2;<br>      t1 = t2; t2 = t3;<br>      <span class="hljs-keyword">return</span> t3;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、队列-Queue"><a href="#3、队列-Queue" class="headerlink" title="3、队列(Queue)"></a>3、队列(Queue)</h3><blockquote><p>限定插入和删除只能在表的“断点”进行的线性表</p><ul><li>栈(Stack)：后进先出(LIFO)，只能在表尾进行插入和删除<ul><li>栈顶&#x2F;栈底：Top&#x2F;Base</li><li>入栈&#x2F;出栈：Push&#x2F;Pop</li></ul></li></ul></blockquote><blockquote><ul><li>队列(Queue)：先进先出(FIFO)<ul><li>应用：脱机打印输出；多用户系统分时循环分配资源；网络报文传输</li></ul></li></ul></blockquote><h4 id="类型定义-2"><a href="#类型定义-2" class="headerlink" title="类型定义"></a>类型定义</h4><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FvRoHhaUGrMNvoksov36Q8SBtTAh.png"></p><h4 id="常用操作-1"><a href="#常用操作-1" class="headerlink" title="常用操作"></a>常用操作</h4><ul><li>顺序队列</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>  QElemType *base;<span class="hljs-comment">//初始化动态分配存储空间</span><br>  <span class="hljs-type">int</span> front;<span class="hljs-comment">//头指针</span><br>  <span class="hljs-type">int</span> rear;<span class="hljs-comment">//尾指针</span><br>&#125;SqQueue<br><br><span class="hljs-comment">//初始化队列</span><br>Status <span class="hljs-title function_">Init</span><span class="hljs-params">(SqQueue &amp;q)</span>&#123;<br>  q.base = new QElmtype[maxsize];<span class="hljs-comment">//分配空间</span><br>  <span class="hljs-keyword">if</span>(!q.base) <span class="hljs-built_in">exit</span>(overflow);<span class="hljs-comment">//存储分配失败</span><br>  q.front = q.rear = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">return</span> ok;<br>&#125;<br><br><br><span class="hljs-comment">//为解决上溢，引入循环队列</span><br><span class="hljs-comment">//循环队列求队列长度</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">QueueLength</span><span class="hljs-params">(SqQueue q)</span>&#123;<br>  <span class="hljs-keyword">return</span> (q.rear - q.front + maxsize) % maxsize<br>&#125;<br><span class="hljs-comment">//循环队列入队</span><br>Status EnQueue(SqQueue &amp;q,QElemType e)&#123;<br>  <span class="hljs-keyword">if</span>((q.rear + <span class="hljs-number">1</span>) % maxsize = q.front) <span class="hljs-keyword">return</span> ERROR;<span class="hljs-comment">//队满</span><br>  q.base[q.rear] = e;<span class="hljs-comment">//新元素加入队尾</span><br>  q.rear = (q.rear + <span class="hljs-number">1</span>) % maxsize;<span class="hljs-comment">//队尾指针+1</span><br>  <span class="hljs-keyword">return</span> ok;<br>&#125;<br><span class="hljs-comment">//循环队列出队</span><br>Status <span class="hljs-title function_">DeQueue</span><span class="hljs-params">(SqQueue &amp;q, QElemType &amp;e)</span>&#123;<br>  <span class="hljs-keyword">if</span>(q.front == q.rear) <span class="hljs-keyword">return</span> ERROR;<br>  e = q.base[q.front];<br>  q.front = (q.front + <span class="hljs-number">1</span>) % maxsize;<br>  <span class="hljs-keyword">return</span> ok;<br>&#125;<br><span class="hljs-comment">//取队头元素</span><br>SElemType <span class="hljs-title function_">GetHead</span><span class="hljs-params">(SqQueue q)</span>「<br>  <span class="hljs-keyword">return</span> q.front != q.rear ? q.base[q.front] : null;<br></code></pre></td></tr></table></figure><ul><li>链式队列（无法估计队列长度可使用）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//链队列定义</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Qnode</span>&#123;</span><br> QElmType data;<br> stuct Qnode *next;<br>&#125;QNode,*QuenePtr<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br> QuenePtr front;<br> QuenePtr rear<br>&#125;LinkQueue<br><br><span class="hljs-comment">//链队列初始化</span><br>Status <span class="hljs-title function_">InitQueue</span><span class="hljs-params">(LinkQueue &amp;q)</span>&#123;<br> q.front = q.rear=(QueuePtr)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(QNode));<br> <span class="hljs-keyword">if</span>(!q.front) <span class="hljs-built_in">exit</span>(overflow)<br>   q.front-&gt;next=null;<br>&#125;<br><span class="hljs-comment">//销毁链队列</span><br>Status <span class="hljs-title function_">Destory</span><span class="hljs-params">(LinkQueue &amp;p)</span>&#123;<br> <span class="hljs-keyword">while</span>(.front)&#123;<br>   q.rear=-&gt;next;<br>   <span class="hljs-built_in">free</span>(q.front);<br>   q.front=q.rear<br> &#125;<br> <span class="hljs-keyword">return</span> ok;<br>&#125;<br><span class="hljs-comment">//入队</span><br>Status <span class="hljs-title function_">entry</span><span class="hljs-params">(LinkQueue &amp;q,QElmType e)</span>&#123;<br> p = (QueuePtr)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(QNode));<br> <span class="hljs-keyword">if</span>(!p) <span class="hljs-built_in">exit</span>(overflow);<br> p-&gt;data = e;p-&gt;next = null;<br> q.rear-&gt;next = p;<br> <span class="hljs-keyword">return</span> ok;<br>&#125;<br><span class="hljs-comment">//出队</span><br>Status <span class="hljs-title function_">Dequeue</span><span class="hljs-params">(LinkQueue &amp;q,QElemType &amp;e)</span>&#123;<br> <span class="hljs-keyword">if</span>(q.front == q.rear) <span class="hljs-keyword">return</span> error;<br> p = q.front-&gt;next;<br> e = p-&gt;data;<br> q.front-&gt;next = p.front;<br> <span class="hljs-keyword">if</span>(q.rear==p) q.rear = q.front;<br> delete p;<br> <span class="hljs-keyword">return</span> ok;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、串"><a href="#4、串" class="headerlink" title="4、串"></a>4、串</h3><blockquote><p>串（String）：零个或多个任意字符组成的有限序列</p><p>子串：串中人一个字符组成的子序列（含空串 ）</p></blockquote><ul><li>空格串：由一个或多个空格组成的串，与空串不同</li></ul><h4 id="类型定义-3"><a href="#类型定义-3" class="headerlink" title="类型定义"></a>类型定义</h4><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FmOuRyLqz7kY9ijSiVGW4qWxA_Md.png"></p><h4 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//顺序存储结构</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXLEN 255</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>  <span class="hljs-type">char</span> ch[MAXLEN + <span class="hljs-number">1</span>]<br>  <span class="hljs-type">int</span> length;<br>&#125;<br><br><span class="hljs-comment">//链式存储结构--块链结构</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CHUNKSIZE 80</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Chunk</span>&#123;</span><br>  <span class="hljs-type">char</span> ch[CHUNKSIZE];<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Chunk</span> *<span class="hljs-title">next</span>;</span><br>&#125;Chunk<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>  Chunk *head,*tail;<br>  <span class="hljs-type">int</span> curlen;<br>&#125;LString<br></code></pre></td></tr></table></figure><h4 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h4><p><strong>模式匹配算法</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//目的：确定主串种所含子串第一次出现的位置</span><br><span class="hljs-comment">//应用：搜索引擎、拼写检查、语言翻译，数据压缩</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">BF算法：简单匹配法，采用穷举法的思路</span><br><span class="hljs-comment">思路：主串第i个字符与子串第1个字符比较</span><br><span class="hljs-comment"> == 继续比较后续字符</span><br><span class="hljs-comment"> != 从主串下一字符起，重新与子串第一个字符比较</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Index_BF</span><span class="hljs-params">(String s,String t,<span class="hljs-type">int</span> pos)</span>&#123;<br>  <span class="hljs-type">int</span> i=pos,j=<span class="hljs-number">1</span>,index=<span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span>(i &lt;= s.length &amp;&amp; j &lt;= t.length)&#123;<br>    <span class="hljs-keyword">if</span>(s.ch[i] == t.ch[j])&#123;++i;++j;&#125;<span class="hljs-comment">//匹配成功一次匹配下一个字符</span><br>    <span class="hljs-keyword">else</span> &#123;i=i-j+<span class="hljs-number">2</span>;j=<span class="hljs-number">1</span>;&#125;<span class="hljs-comment">//失败主串、子串指针回溯重新开始下一次匹配</span><br>  &#125;<br>  <span class="hljs-keyword">if</span>(j &gt;= t,length) index = i-t.length;<span class="hljs-comment">//返回匹配的第一个字符的下标</span><br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> index;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">KMP算法：较BF不用回溯，效率提高O(n+m)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">KMP</span><span class="hljs-params">(<span class="hljs-type">char</span> * t, <span class="hljs-type">char</span> * p)</span><br>&#123;<br>  <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>  <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> (i &lt; <span class="hljs-built_in">strlen</span>(t) &amp;&amp; j &lt; <span class="hljs-built_in">strlen</span>(p))<br>  &#123;<br>    <span class="hljs-keyword">if</span> (j == <span class="hljs-number">-1</span> || t[i] == p[j])<br>    &#123;<br>      i++;j++;<br>    &#125;<br>    <span class="hljs-keyword">else</span> j = next[j];<br>  &#125;<br>  <span class="hljs-keyword">if</span> (j == <span class="hljs-built_in">strlen</span>(p))<br>    <span class="hljs-keyword">return</span> i - j;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">getNext</span><span class="hljs-params">(<span class="hljs-type">char</span> * p, <span class="hljs-type">int</span> * next)</span><br>&#123;<br>  next[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;<br>  <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">-1</span>;<br>  <span class="hljs-keyword">while</span> (i &lt; <span class="hljs-built_in">strlen</span>(p))<br>  &#123;<br>    <span class="hljs-keyword">if</span> (j == <span class="hljs-number">-1</span> || p[i] == p[j])<br>    &#123;<br>      ++i;<br>      ++j;<br>      next[i] = j;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>      j = next[j];<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、非线性结构"><a href="#2、非线性结构" class="headerlink" title="2、非线性结构"></a>2、非线性结构</h2><h3 id="1、数组"><a href="#1、数组" class="headerlink" title="1、数组"></a>1、数组</h3><blockquote><p>按一定格式排列起来具有相同类型的数据元素的集合</p></blockquote><ul><li>二维数组<ul><li>非线性结构：每个数据即在行表又在列表</li><li>线性结构定长线性表：线性表每个数据也是定长线性表</li></ul></li></ul><h4 id="N-维数组"><a href="#N-维数组" class="headerlink" title="N 维数组"></a>N 维数组</h4><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FqczHZ27w50OjlsazRAjH80UuNw4.png"></p><h4 id="矩阵压缩"><a href="#矩阵压缩" class="headerlink" title="矩阵压缩"></a>矩阵压缩</h4><ul><li>对称矩阵</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fmz2W5nyFyXo1dY_1_FN_ZFO9lXL.png"></p><p>从上到下，从左到右存储</p><ul><li>三角矩阵</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fld8O8VZO45PH9gc4d2Jsg_gsfIP.png"></p><ul><li>对角矩阵</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FiTQPJPHsGO1W9OCVmPCGwQZZ_E4.png"></p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FjZYYSl6tZEd6rXsSc59D-J_rVqP.png"></p><p>斜着按对角线存储，先存主对角线，再存其他的</p><ul><li>稀疏矩阵</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Ftv_V4q0Y39kLaRFilxUIixOsKXx.png"></p><p>三元组法：</p><p>使用三元组存储；{(i, j, a),…}分别为横&#x2F;纵坐标，值</p><p>优点：灵活插入和删除</p><p>十字链表法：</p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FrChmeMuq4M-g920HdZ89pvxkJCM.png"></p><h3 id="2、广义表"><a href="#2、广义表" class="headerlink" title="2、广义表"></a>2、广义表</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FqcMKa9Ba9qm5wvCLktu4l_tyyBC.png"></p><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FsTHytu95V_mDE32N7pywi10PkXc.png"></p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FnnMF4NYBmIFvhlasJuHxDJTRYTL.png"></p><h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FiNfAcOZ1WYYkUfTkxEkkDa18Ga3.png"></p><h4 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h4><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FtN_bdcEdXZ-XPSgHGCaallE8oUi.png"></p><h3 id="3、树"><a href="#3、树" class="headerlink" title="3、树"></a>3、树</h3><p>定义</p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FqUYyqXEb-Q7-lqDgi9FS-6AS1DN.png"></p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FnCk_UhxjK0D82ierbXhVXrlec4k.png"></p><h3 id="4、二叉树"><a href="#4、二叉树" class="headerlink" title="4、二叉树"></a>4、二叉树</h3><blockquote><p>性质特殊，单独从 🌲 中拿出来讲</p></blockquote><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FrWoPbBoXgU9R3Vh3x0kTbXDxnVc.png"></p><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FuASbXZPW4f1h9Ix73P4n41u9OCO.png"></p><ul><li>基本操作</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FoKSqWC0Jri1iWDyDUv-j8BO8FM6.png"></p><h4 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h4><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Flnor6mty2j_yyysG6pWejPViN6L.png"></p><p>第 i 层至少有 1 个节点</p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FnaUGFyzEio2zfQYppDHLQCIYvAr.png"></p><p>深度为 k 时至少有 k 个节点</p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fvsr2osW9dIWiOpR3nmP6jU6i_Wp.png"></p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FlsKsKhU3LvpWmnGhYrW67KpvpB7.png"></p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FoTOE0rOjY1L1tkR2klCr2orLx8C.png"></p><p>特殊形式</p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Ft0QT1g3w4kuanLQkxQJ6G166QF8.png"></p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fjxn_4awoFmj6ZpS_hluzK0Lc6ei.png"></p><h4 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h4><ul><li>顺序存储</li></ul><blockquote><p>从上到下，从左到右存储，空的不写</p><p>缺点：最坏情况，单支 🌲 浪费巨大空间</p></blockquote><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FohOgyGexTiO3ca1G9J3IHeWX3ns.png"></p><ul><li>链式存储</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fuhyfv3kVon82nxHoqtsuuHVPrJC.png"></p><p>存储结构</p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FvLaOE-Gxi6E8g6FrLiu6yJ5UXl1.png"></p><p>实现</p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FmnG4PKH2IcDKP0F9D5o81KQhqI0.png"></p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FggFulJphkQbONAdp3C_FyG1uKrW.png"></p><ul><li>三叉链表</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FmTNfLD8O48rUBL8AB9I2WZcukxx.png"></p><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fqqttr92cDnq1h-dsD-rCrot4h_8.png"></p><blockquote><p>先中 or 中后可确定唯一二叉树，先后不能确定唯一二叉树</p></blockquote><ul><li>题目</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fj0crqIKZkX61AVH--rN0mytf7tg.png"></p><ul><li>算法</li><li>中序遍历非递归算法</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FnUPayyTw7D48PnVOkjO8X37Frq6.png"></p><ul><li>层次遍历算法：从上到下，从左到右</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FhunB4V8-QBeAByCYo_9wiP_R4Rd.png"></p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FvXpupjQZumEMnX7tNv35Z0rfPvv.png"></p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FtnQKDoUR28pBFf6tSleFP5Q7y7f.png"></p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FnVVJLqgc9s-VqhKeeFOHcuK50g8.png"></p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FgbZ7YAqBhyE5Q-BVzPB2fzX6HmP.png"></p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FqD_a8raUvYfSJ-pR67jrKqG22M-.png"></p><h4 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h4><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Frh9bUwgBMpQZTfY8oXqFR0BD4Eb.png"></p><h4 id="森林"><a href="#森林" class="headerlink" title="森林"></a>森林</h4><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FkWFq3nPRAh31hEKE8gI7skQJzC_.png"></p><h3 id="6、图"><a href="#6、图" class="headerlink" title="6、图"></a>6、图</h3><h1 id="三、基本数据处理技术"><a href="#三、基本数据处理技术" class="headerlink" title="三、基本数据处理技术"></a>三、基本数据处理技术</h1><h2 id="1、查找技术"><a href="#1、查找技术" class="headerlink" title="1、查找技术"></a>1、查找技术</h2><h2 id="2、排序技术"><a href="#2、排序技术" class="headerlink" title="2、排序技术"></a>2、排序技术</h2>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>反射&amp;&amp;动态代理</title>
    <link href="/2022/08/13/yuque/%E5%8F%8D%E5%B0%84&amp;&amp;%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <url>/2022/08/13/yuque/%E5%8F%8D%E5%B0%84&amp;&amp;%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>反射和动态代理使用的地方非常多。</p><span id="more"></span><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><blockquote><p>在运行状态中，对于任意的一个类，都能够知道这个类的所有属性和方法，对任意一个对象都能够通过反射机制调用一个类的任意方法。</p></blockquote><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul><li><code>开发通用框架</code>反射最重要的用途就是开发各种通用框架。很多框架（比如 Spring）都是配置化的（比如通过 XML 文件配置 JavaBean、Filter 等），为了保证框架的通用性，它们可能需要根据配置文件加载不同的对象或类，调用不同的方法，这个时候就必须用到反射——运行时动态加载需要加载的对象。</li><li><code>动态代理</code>   在切面编程（AOP）中，需要拦截特定的方法，通常，会选择动态代理方式。这时，就需要反射技术来实现了。</li><li><code>注解</code>   注解本身仅仅是起到标记作用，它需要利用反射机制，根据注解标记去调用注解解释器，执行行为。如果没有反射机制，注解并不比注释更有用。</li><li><code>可扩展</code> - 应用程序可以通过使用完全限定名称创建可扩展性对象实例来使用外部的用户定义类。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li><code>性能开销</code> 由于反射涉及动态解析的类型，因此无法执行某些 Java 虚拟机优化。因此，反射操作的性能要比非反射操作的性能要差，应该在性能敏感的应用程序中频繁调用的代码段中避免。</li><li><code>破坏封装性</code>反射调用方法时可以忽略权限检查，因此可能会破坏封装性而导致安全问题。</li><li><code>内部曝光</code>由于反射允许代码执行在非反射代码中非法的操作，例如访问私有字段和方法，所以反射的使用可能会导致意想不到的副作用，这可能会导致代码功能失常并可能破坏可移植性。反射代码打破了抽象，因此可能会随着平台的升级而改变行为。</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="获取-Class"><a href="#获取-Class" class="headerlink" title="获取 Class"></a>获取 Class</h3><ol><li>使用<code>Class.forName()</code>静态方法</li><li>直接获取</li><li>调用<code>Object.getClass()</code></li><li>Type 属性</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestClass</span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>    <span class="hljs-type">Class</span> <span class="hljs-variable">mysql</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>    System.out.println(mysql.getCanonicalName());<br><br>    <span class="hljs-type">Class</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-type">boolean</span>.class;<br>    System.out.println(b.getCanonicalName());<br><br>    Set&lt;String&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>    <span class="hljs-type">Class</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> set.getClass();<br>    System.out.println(s.getCanonicalName());<br><br>    <span class="hljs-type">Class</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> Float.TYPE;<br>    System.out.println(f.getCanonicalName());<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="判断实例"><a href="#判断实例" class="headerlink" title="判断实例"></a>判断实例</h3><p>判断是否为某个类的实例有两种方式：</p><ol><li>用 <code>instanceof</code> 关键字</li><li>用 <code>Class.isInstance()</code> 方法（它是一个 Native 方法）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InstanceofDemo</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">ArrayList</span> <span class="hljs-variable">arrayList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>    <span class="hljs-keyword">if</span> (arrayList <span class="hljs-keyword">instanceof</span> List) &#123;<br>      System.out.println(<span class="hljs-string">&quot;ArrayList is List&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (List.class.isInstance(arrayList)) &#123;<br>      System.out.println(<span class="hljs-string">&quot;ArrayList is List&quot;</span>);<br>    &#125;<br>  &#125;<br>&#125;<span class="hljs-comment">//Output://ArrayList is List//ArrayList is List</span><br></code></pre></td></tr></table></figure><h3 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h3><ul><li>用 <code>Class</code> 对象的 <code>newInstance</code> 方法。</li><li>用 <code>Constructor</code> 对象的 <code>newInstance</code> 方法。</li></ul><p>示例：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NewInstanceDemo</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-title class_">String</span>[] args)throws <span class="hljs-title class_">IllegalAccessException</span>, <span class="hljs-title class_">InstantiationException</span>, <span class="hljs-title class_">NoSuchMethodException</span>, <span class="hljs-title class_">InvocationTargetException</span> &#123;<br>    <span class="hljs-title class_">Class</span>&lt;?&gt; c1 = <span class="hljs-title class_">StringBuilder</span>.<span class="hljs-property">class</span>;<br>    <span class="hljs-title class_">StringBuilder</span> sb = (<span class="hljs-title class_">StringBuilder</span>) c1.<span class="hljs-title function_">newInstance</span>();<br>    sb.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;aaa&quot;</span>);<br>    <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(sb.<span class="hljs-title function_">toString</span>());<br><br>    <span class="hljs-comment">//获取String类带一个String参数的构造器</span><br>    <span class="hljs-title class_">Class</span>&lt;?&gt; c2 = <span class="hljs-title class_">String</span>.<span class="hljs-property">class</span>;<br>    <span class="hljs-title class_">Constructor</span> constructor = c2.<span class="hljs-title function_">getConstructor</span>(<span class="hljs-title class_">String</span>.<span class="hljs-property">class</span>);<br>    <span class="hljs-comment">//根据构造器创建实例</span><br>    <span class="hljs-title class_">String</span> str2 = (<span class="hljs-title class_">String</span>) constructor.<span class="hljs-title function_">newInstance</span>(<span class="hljs-string">&quot;bbb&quot;</span>);<br>    <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(str2);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><ul><li>特点：字节码随用随创建，随用随加载</li><li>作用：不修改源码的基础上对方法增强</li></ul><h2 id="JDK-自带的-proxy"><a href="#JDK-自带的-proxy" class="headerlink" title="JDK 自带的 proxy"></a>JDK 自带的 proxy</h2><blockquote><p>基于接口的动态代理<br>涉及的类：Proxy  JDK 官方提供<br>如何创建：使用<code>Proxy类中的newProxyInstance方法</code><br>要求：<code>被代理类最少实现一个接口</code>，如果没有使用则不能用<br>newProxyInstance 方法参数：<br><code>ClassLoader</code>：类加载器<br>用于加载代理对象字节码的，和被代理对象使用相同的类加载器。固定写法<br><code>Class[]</code>:字节码数组<br>用于让代理对象和被代理对象有相同方法。固定写法<br><code>InvocationHandler</code>:提供增强代码<br>让我们写如何处理。一般写一个该接口的实现类，通常情况都是匿名内部类，但不必须<br>此接口的实现类都是谁用谁写</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.proxy;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lqs</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/4/2 - 18:57</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Producer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Producer</span>();<br><br>    <span class="hljs-type">IProducer</span> <span class="hljs-variable">proxyProducer</span> <span class="hljs-operator">=</span> (IProducer)Proxy.newProxyInstance(producer.getClass().getClassLoader(),                                                            producer.getClass().getInterfaces(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>() &#123;<br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">* 执行被代理对象的任何接口方法都会经过该方法</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> proxy 代理对象的引用</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> method 当前执行的方法</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> args 当前执行方法所需的参数</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span> 和被代理对象有相同的返回值</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@throws</span> Throwable</span><br><span class="hljs-comment">   */</span><br>   <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>     <span class="hljs-comment">//提供增强的代码</span><br>     <span class="hljs-type">Object</span> <span class="hljs-variable">returnValue</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>     <span class="hljs-comment">//1.获取方法执行的参数</span><br>     <span class="hljs-type">Float</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> (Float)args[<span class="hljs-number">0</span>];<br>     <span class="hljs-comment">//2.判断当前方法是不是销售</span><br>     <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;saleProduct&quot;</span>.equals(method.getName()))&#123;<br>       returnValue = method.invoke(producer,money*<span class="hljs-number">0.8f</span>);<br>     &#125;<br>     <span class="hljs-keyword">return</span> returnValue;<br>    &#125;<br>    &#125;);<br><br>    <span class="hljs-comment">//test</span><br>    proxyProducer.saleProduct(<span class="hljs-number">1000f</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第三方-cglib"><a href="#第三方-cglib" class="headerlink" title="第三方 cglib"></a>第三方 cglib</h2><blockquote><p>基于子类的动态代理<br>涉及的类：Enhancer   第三方 cglib<br>提供<br>如何创建：使用<code>Enhancer类中的create</code>方法<br>create 方法参数：<br><code>Class</code>；用于指定被代理对象的字节码<br><code>Callback</code>:提供增强代码<br>我们写如何处理。一般写一个该接口的实现类，通常情况都是匿名内部类，但不必须</p><p>此接口的实现类都是谁用谁写<br>一般写子接口实现类：MethodInterceptor</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.cglib;<br><br><span class="hljs-keyword">import</span> net.sf.cglib.proxy.Enhancer;<br><span class="hljs-keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;<br><span class="hljs-keyword">import</span> net.sf.cglib.proxy.MethodProxy;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lqs</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/4/2 - 18:57</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Producer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Producer</span>();<br><br>    <span class="hljs-type">Producer</span> <span class="hljs-variable">cglibProducer</span> <span class="hljs-operator">=</span> (Producer)Enhancer.create(producer.getClass(),<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodInterceptor</span>() &#123;<br>      <span class="hljs-comment">/**</span><br><span class="hljs-comment">       * 执行该对象的任何方法都会经过该方法</span><br><span class="hljs-comment">       * <span class="hljs-doctag">@param</span> obj</span><br><span class="hljs-comment">       * <span class="hljs-doctag">@param</span> method</span><br><span class="hljs-comment">       * <span class="hljs-doctag">@param</span> args</span><br><span class="hljs-comment">       * 以上三个参数和基于接口的动态代理invoke方法参数是一样的</span><br><span class="hljs-comment">       * <span class="hljs-doctag">@param</span> methodProxy 当前执行方法的代理对象</span><br><span class="hljs-comment">       * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">       * <span class="hljs-doctag">@throws</span> Throwable</span><br><span class="hljs-comment">       */</span><br>      <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">intercept</span><span class="hljs-params">(Object obj, Method method, Object[] args,</span><br><span class="hljs-params">          MethodProxy methodProxy)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-comment">//提供增强的代码</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">returnValue</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">//1.获取方法执行的参数</span><br>        <span class="hljs-type">Float</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> (Float)args[<span class="hljs-number">0</span>];<br>        <span class="hljs-comment">//2.判断当前方法是不是销售</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;saleProduct&quot;</span>.equals(method.getName()))&#123;<br>          returnValue = method.invoke(producer,money*<span class="hljs-number">0.8f</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> returnValue;<br>      &#125;<br>    &#125;);<br><br>    <span class="hljs-comment">//test</span><br>    cglibProducer.saleProduct(<span class="hljs-number">120000f</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Proxy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker-compose搭建Typecho博客</title>
    <link href="/2022/08/13/yuque/Docker-compose%E6%90%AD%E5%BB%BATypecho%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/08/13/yuque/Docker-compose%E6%90%AD%E5%BB%BATypecho%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>为了让个人博客更容易部署，以方便未来可能的迁移，我选择了 docker 搭建 typecho 个人博客</p><span id="more"></span><ul><li>说明:以下均在 Centos8 VPS 上操作</li></ul><h1 id="1、安装-Docker-环境"><a href="#1、安装-Docker-环境" class="headerlink" title="1、安装 Docker 环境"></a>1、安装 Docker 环境</h1><ul><li>安装 Docker 环境</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 设置存储库</span><br><br>sudo yum install -y yum-utils<br>sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<br><br><span class="hljs-section"># 安装 Docker 引擎</span><br><br>sudo yum install docker-ce docker-ce-cli containerd.io<br><br><span class="hljs-section"># 安装 docker-compose</span><br><br>sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose<br>sudo chmod +x /usr/local/bin/docker-compose<br>sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compos-<br></code></pre></td></tr></table></figure><ul><li>安装 docker-compose</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose<br>sudo chmod +x /usr/local/bin/docker-compose<br>sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose<br><br><span class="hljs-section"># 启动 Docker</span><br><br>sudo systemctl start docker<br></code></pre></td></tr></table></figure><ul><li>镜像加速</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 在阿里云容器镜像服务最下面找到</span><br><br>sudo mkdir -p /etc/docker<br>sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;<br>&#123;<br>&quot;registry-mirrors&quot;: [&quot;https://xxxxx.mirror.aliyuncs.com&quot;]<br>&#125;<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure><h1 id="2、部署博客"><a href="#2、部署博客" class="headerlink" title="2、部署博客"></a>2、部署博客</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@server1 ~]# mkdir my_typecho_blog<br>[root@server1 ~]# cd my_typecho_blog/<br>[root@server1 my_typecho_blog]# docker run -d -p 80:80 --name typecho -v &quot;$PWD&quot;:/var/www/html yangxuan8282/typecho:php<br>85ed22f1d571fda445746a59ac48596b60cdcb1691fef3116b13a8bd9194400e<br>[root@server1 my_typecho_blog]# cd usr/<br>[root@server1 usr]# ls<br>plugins  themes  uploads<br><span class="hljs-meta prompt_"># </span><span class="language-bash">必须在usr目录下进行此容器的创建</span><br>[root@server1 usr]# docker run -d -p 899:80 --name kodexplorer -v &quot;$PWD&quot;:/var/www/html yangxuan8282/kodexplorer<br>d25d10dd36711da3e83dfcba4da10859fc7eb9746572fe07864237be0d586ea0<br>[root@server1 usr]#<br></code></pre></td></tr></table></figure><h1 id="3、访问"><a href="#3、访问" class="headerlink" title="3、访问"></a>3、访问</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">访问 ip:80 进入设置<br>访问 ip:899 进行资源上传操作<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Blog</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>狂神Redis教程</title>
    <link href="/2022/08/13/yuque/%E7%8B%82%E7%A5%9ERedis%E6%95%99%E7%A8%8B/"/>
    <url>/2022/08/13/yuque/%E7%8B%82%E7%A5%9ERedis%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>最具有代表性的 KV 数据库，常用于分布式缓存</p><span id="more"></span><h1 id="一、NoSQL-概述"><a href="#一、NoSQL-概述" class="headerlink" title="一、NoSQL 概述"></a>一、NoSQL 概述</h1><h2 id="1、为什么要使用-NoSQL"><a href="#1、为什么要使用-NoSQL" class="headerlink" title="1、为什么要使用 NoSQL"></a>1、为什么要使用 NoSQL</h2><h3 id="1、单机-MySQL"><a href="#1、单机-MySQL" class="headerlink" title="1、单机 MySQL"></a>1、单机 MySQL</h3><ul><li>瓶颈：<ul><li>数据量太大，一个机器放不下</li><li>数据索引，机器内存不够</li><li>访问量（混合读写），一个机器承受不了</li></ul></li></ul><h3 id="2、MemCached-MySQL-垂直拆分-读写分离"><a href="#2、MemCached-MySQL-垂直拆分-读写分离" class="headerlink" title="2、MemCached + MySQL+ 垂直拆分(读写分离)"></a>2、MemCached + MySQL+ 垂直拆分(读写分离)</h3><ul><li>网站大部分都是读操作，每次都查询数据库就很麻烦，使用缓存保持效率</li><li>发展过程：优化数据结构和索引 –&gt; 文件缓存(IO) –&gt; Memcached（当时最流行）</li></ul><h3 id="3、分库分表-水平拆分-MySQL-集群"><a href="#3、分库分表-水平拆分-MySQL-集群" class="headerlink" title="3、分库分表 + 水平拆分(MySQL 集群)"></a>3、分库分表 + 水平拆分(MySQL 集群)</h3><ul><li>技术和业务发展的同时，对人的要求越来越高</li></ul><blockquote><p>本质：数据库（读&amp;写）</p></blockquote><ul><li>MylSAM：表锁，十分影响效率，高并发下出现严重问题</li><li>InnoDB：行锁</li><li>慢慢的用分库分表减轻写的压力，但 mySQL 推出的表分区没有被大规模使用</li></ul><h3 id="4、为什么要-NoSQL"><a href="#4、为什么要-NoSQL" class="headerlink" title="4、为什么要 NoSQL"></a>4、为什么要 NoSQL</h3><ul><li>用户个人信息，社交网络，地理位置，用户日志</li><li>数据多种多样：定位，音乐，热榜，图片</li><li>NoSQL 可以很好的处理以上情况：<br>不需要固定格式去存储这些，不需要太多操作去横向扩展</li></ul><h2 id="2、什么是-NoSQL"><a href="#2、什么是-NoSQL" class="headerlink" title="2、什么是 NoSQL"></a>2、什么是 NoSQL</h2><blockquote><p>NoSQL &#x3D; Not Only SQL，泛指非关系型数据库</p><p>非关系型数据库：</p></blockquote><blockquote><p>NoSQL 特点：</p></blockquote><p>解耦</p><ol><li>方便扩展，数据之间没有关系，很好扩展</li><li>大数据量高性能（redis 一秒写 8w 次，读 11w 次，NoSQL 的缓存记录级，是一种细粒度的缓存，性能比较高）</li><li>数据类型多样，不需要实现设计数据库，随取随用</li><li>传统 RDBMS 和 NoSQL 区别</li></ol><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">传统RDBMS<br><span class="hljs-bullet">- </span>结构化组织<br><span class="hljs-bullet">- </span>SQL<br><span class="hljs-bullet">- </span>数据和关系存储在单独的表中<br><span class="hljs-bullet">- </span>操作，数据定义语言<br><br>NoSql<br><span class="hljs-bullet">- </span>不仅仅是数据<br><span class="hljs-bullet">- </span>没有固定的查询语言<br><span class="hljs-bullet">- </span>简直对存储，列存储，文档存储，徒刑数据库<br><span class="hljs-bullet">- </span>最终一致性<br><span class="hljs-bullet">- </span>CAP定力和BASE理论（异地多活），初级架构师<br><span class="hljs-bullet">- </span>高性能，高可用，高可扩展性<br></code></pre></td></tr></table></figure><blockquote><p>了解：3V + 3 高</p><p>3V：海量 Volume，多样 Variety，实时 Velocity</p><p>3 高：高并发，高可扩，高性能</p></blockquote><p>真正在公司中的实践：NoSQL 与 RDBMS 结合使用最强大</p><h2 id="3、阿里巴巴演进分析"><a href="#3、阿里巴巴演进分析" class="headerlink" title="3、阿里巴巴演进分析"></a>3、阿里巴巴演进分析</h2><p>敏捷开发，极限编程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1、商品基本信息</span><br>名称、价格、商家信息<br>关系型数据库解决这些问题：Mysql/Oracle<br><span class="hljs-comment"># 2、商品的描述，评论（文字较多）</span><br>文档类型数据库，MangoDB<br><span class="hljs-comment"># 3、图片</span><br>分布式文件系统 FastDFS<br>- 淘宝自己的TFS<br>- Google的GFS<br>- Hadoop的HDFS<br>- 阿里云的OSS<br><span class="hljs-comment"># 4、商品的关键字(搜索)</span><br>- 搜索引擎 solr  elasticsearch<br>- 淘宝 ISearch：多隆<br><span class="hljs-comment"># 5、商品的热门波段信息</span><br>- 内存数据库<br>- Redis、Tair、Memcache<br><span class="hljs-comment"># 6、商品的交易，外部支付接口</span><br>- 三方应用<br></code></pre></td></tr></table></figure><ul><li>大型互联网公司应用问题<ul><li>数据问题太多</li><li>数据源繁多，经常重构</li><li>数据改造，大面积改造</li></ul></li><li>解决方案：统一的数据服务层 UDSL</li></ul><h2 id="4、NoSQL-四大分类"><a href="#4、NoSQL-四大分类" class="headerlink" title="4、NoSQL 四大分类"></a>4、NoSQL 四大分类</h2><h3 id="1、KV-键值对"><a href="#1、KV-键值对" class="headerlink" title="1、KV 键值对"></a>1、KV 键值对</h3><h3 id="2、文档类型数据库"><a href="#2、文档类型数据库" class="headerlink" title="2、文档类型数据库"></a>2、文档类型数据库</h3><ul><li>MongoDB<ul><li>一个基于分布式文件存储的数据库，C++编写，用来处理大量的文档</li><li>介于关系型和非关系型数据库之间，非关系型数据库功能最丰富，最像关系型数据库的</li></ul></li></ul><h3 id="3、列存储数据库"><a href="#3、列存储数据库" class="headerlink" title="3、列存储数据库"></a>3、列存储数据库</h3><ul><li>HBase</li><li>分布式文件系统</li></ul><h3 id="4、图关系数据库"><a href="#4、图关系数据库" class="headerlink" title="4、图关系数据库"></a>4、图关系数据库</h3><h1 id="二、Redis-入门"><a href="#二、Redis-入门" class="headerlink" title="二、Redis 入门"></a>二、Redis 入门</h1><blockquote><p>Redis 是什么？</p></blockquote><p>Redis (Remote Dictionary Server)，远程字典服务</p><p>Redis 是一个开源（BSD 许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 <a href="http://www.redis.cn/topics/data-types-intro.html#strings">字符串（strings）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hashes">散列（hashes）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#lists">列表（lists）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sets">集合（sets）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sorted-sets">有序集合（sorted sets）</a> 与范围查询， <a href="http://www.redis.cn/topics/data-types-intro.html#bitmaps">bitmaps</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hyperloglogs">hyperloglogs</a> 和 <a href="http://www.redis.cn/commands/geoadd.html">地理空间（geospatial）</a> 索引半径查询。 Redis 内置了 <a href="http://www.redis.cn/topics/replication.html">复制（replication）</a>，<a href="http://www.redis.cn/commands/eval.html">LUA 脚本（Lua scripting）</a>， <a href="http://www.redis.cn/topics/lru-cache.html">LRU 驱动事件（LRU eviction）</a>，<a href="http://www.redis.cn/topics/transactions.html">事务（transactions）</a> 和不同级别的 <a href="http://www.redis.cn/topics/persistence.html">磁盘持久化（persistence）</a>， 并通过 <a href="http://www.redis.cn/topics/sentinel.html">Redis 哨兵（Sentinel）</a>和自动 <a href="http://www.redis.cn/topics/cluster-tutorial.html">分区（Cluster）</a>提供高可用性（high availability）。</p><p><a href="http://www.redis.cn/commands.html">查看 Redis 命令大全 →</a></p><blockquote><p>Redis 能做什么？</p></blockquote><ol><li>内存存储，持久化，内存断电即失，持久化很重要（rdb，aof）</li><li>效率高，可用于高速缓存</li><li>发布订阅系统</li><li>地图信息分布</li><li>计时器，计数器</li></ol><blockquote><p>Redis 特性</p></blockquote><ol><li>多样的数据类型</li><li>持久化</li><li>集群</li><li>事务</li></ol><blockquote><p>Redis 安装步骤</p></blockquote><p><a href="https://blog.csdn.net/BigBingtang/article/details/83001102?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param">安装步骤</a></p><h2 id="1、基本使用"><a href="#1、基本使用" class="headerlink" title="1、基本使用"></a>1、基本使用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-server # 启动服务<br>redis-benchmark # 测试速度<br>redis-cli -p portName # 指定端口启动客户端<br>ps -ef|grep redis #查看redis进程状态<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">之后在客户端内操作</span><br>auth xxx #输入设置的密码<br>ping # 测试连接，成功结果为PONG<br>shutdown # 退出连接<br>exit # 退出<br><br>set name lqs #设置值<br>get name # 获取值<br>keys * # 获取所有键<br></code></pre></td></tr></table></figure><ul><li>压力测试参数</li></ul><h2 id="2、基础知识"><a href="#2、基础知识" class="headerlink" title="2、基础知识"></a>2、基础知识</h2><ul><li>默认有 16 个数据库，默认使用第 0 个数据库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">127.0.0.1:6379&gt; select 2 #切换数据库<br>127.0.0.1:6379[2]&gt; DBSIZE #查看数据库大小<br>(integer) 0<br>127.0.0.1:6379&gt; flushall # 清空全部<br>127.0.0.1:6379&gt; flushdb # 清空数据库<br></code></pre></td></tr></table></figure><blockquote><p>常见 Bug 及解决</p><p>1、MISCONF Redis is configured to save RDB snapshots, but it is currently not a</p><ul><li>config stop-writes-on-bgsave-error no （临时解决）</li><li><a href="https://blog.csdn.net/u014071875/article/details/103715183">最好的办法</a></li></ul></blockquote><h1 id="三、五大数据类型"><a href="#三、五大数据类型" class="headerlink" title="三、五大数据类型"></a>三、五大数据类型</h1><h2 id="1、Redis-Key"><a href="#1、Redis-Key" class="headerlink" title="1、Redis-Key"></a>1、Redis-Key</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">exists name <span class="hljs-comment"># 查看是否存在</span><br>move name 1 <span class="hljs-comment"># 从数据库1移除name</span><br><br>127.0.0.1:6379&gt; EXPIRE name 10 <span class="hljs-comment">#设置过期时间，单位为s</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; keys *<br>1) <span class="hljs-string">&quot;name&quot;</span><br>127.0.0.1:6379&gt; ttl name <span class="hljs-comment">#查看剩余时间</span><br>(<span class="hljs-built_in">integer</span>) 3<br>127.0.0.1:6379&gt; ttl name<br>(<span class="hljs-built_in">integer</span>) -2 <span class="hljs-comment">#表示已过期</span><br>127.0.0.1:6379&gt; get name<br>(nil)<br><br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> age 1<br>OK<br>127.0.0.1:6379&gt; <span class="hljs-built_in">type</span> age <span class="hljs-comment">#查看key类型</span><br>string<br></code></pre></td></tr></table></figure><h2 id="2、String"><a href="#2、String" class="headerlink" title="2、String"></a>2、String</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 字符串</span><br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> age 100<br>OK<br>127.0.0.1:6379&gt; APPEND age sui <span class="hljs-comment">#追加字符串，不存在则创建</span><br>(<span class="hljs-built_in">integer</span>) 6<br>127.0.0.1:6379&gt; STRLEN age<br>(<span class="hljs-built_in">integer</span>) 6<br><br><span class="hljs-comment"># 自增自减</span><br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> num 0<br>OK<br>127.0.0.1:6379&gt; INCR num<br><span class="hljs-comment">#相当于num++</span><br><span class="hljs-comment">#如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 INCR 操作。</span><br><span class="hljs-comment">#如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误。</span><br><span class="hljs-comment">#本操作的值限制在 64 位(bit)有符号数字表示之内。</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; get num<br><span class="hljs-string">&quot;1&quot;</span><br>127.0.0.1:6379&gt; DECR num <span class="hljs-comment">#相当于num--</span><br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; INCRBY num 10 <span class="hljs-comment">#设置步长，DECRBY同理</span><br>(<span class="hljs-built_in">integer</span>) 10<br><br><span class="hljs-comment"># 字符串截取</span><br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> name 12345678<br>OK<br>127.0.0.1:6379&gt; GETRANGE name 1 4 <span class="hljs-comment">#字符串截取</span><br><span class="hljs-string">&quot;2345&quot;</span><br>127.0.0.1:6379&gt; SETRANGE name 1 lqs <span class="hljs-comment">#替换指定位置字符串</span><br>(<span class="hljs-built_in">integer</span>) 8<br>127.0.0.1:6379&gt; get name<br><span class="hljs-string">&quot;1lqs5678&quot;</span> <span class="hljs-comment">#原来为12345678，234共3个长度替换为lqs</span><br><br>127.0.0.1:6379&gt; SETEX k2 30 lqs <span class="hljs-comment">#给k2设置为lqs，时间为30s</span><br><br>127.0.0.1:6379&gt; SETNX mykey 100 <span class="hljs-comment">#不存在就设置值，返回1</span><br><span class="hljs-comment">#在分布式锁中经常使用</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; get mykey<br><span class="hljs-string">&quot;100&quot;</span><br>127.0.0.1:6379&gt; SETNX mykey 101 <span class="hljs-comment">#存在就不设置，返回0</span><br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; get mykey<br><span class="hljs-string">&quot;100&quot;</span><br><br>127.0.0.1:6379&gt; mset k1 v1 k2 v2 k3 v3 <span class="hljs-comment">#批量创建，原子性操作</span><br>OK<br>127.0.0.1:6379&gt; mget k1 k2 k3 <span class="hljs-comment">#批量获取，原子性操作</span><br>1) <span class="hljs-string">&quot;v1&quot;</span><br>2) <span class="hljs-string">&quot;v2&quot;</span><br>3) <span class="hljs-string">&quot;v3&quot;</span><br><br><span class="hljs-comment"># 对象</span><br><span class="hljs-comment">#设置一个user：1对象值为json字符串来保存一个对象</span><br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> user:1 &#123;name:lqs,age:21&#125;<br>OK<br>127.0.0.1:6379&gt; get user:1 <span class="hljs-comment">#获取user：1</span><br><span class="hljs-string">&quot;&#123;name:lqs,age:21&#125;&quot;</span><br>127.0.0.1:6379&gt; mset user:1 name:zhangsan,age=12 <span class="hljs-comment">#修改对象</span><br>OK<br><br>127.0.0.1:6379&gt; getset k3 v33 <span class="hljs-comment">#先获取原来的值返回再设置新值，如果不存在返回nil</span><br><span class="hljs-string">&quot;v3&quot;</span><br>127.0.0.1:6379&gt; get k3<br><span class="hljs-string">&quot;v33&quot;</span><br></code></pre></td></tr></table></figure><h2 id="3、List"><a href="#3、List" class="headerlink" title="3、List"></a>3、List</h2><ul><li>所有的 list 命令以 l 开头</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; lpush list one <span class="hljs-comment">#向list插入值，单个或多个均可，插入到列表头部，left</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; lpush list two<br>(<span class="hljs-built_in">integer</span>) 2<br>127.0.0.1:6379&gt; lpush list three<br>(<span class="hljs-built_in">integer</span>) 3<br>127.0.0.1:6379&gt; lrange list 0 -1 <span class="hljs-comment">#获取所哟元素</span><br>1) <span class="hljs-string">&quot;three&quot;</span><br>2) <span class="hljs-string">&quot;two&quot;</span><br>3) <span class="hljs-string">&quot;one&quot;</span><br>127.0.0.1:6379&gt; lrange list 0 1 <span class="hljs-comment">#从左边获取0到1两个位置的元素，不能从右边获取</span><br>1) <span class="hljs-string">&quot;three&quot;</span><br>2) <span class="hljs-string">&quot;two&quot;</span><br>127.0.0.1:6379&gt; rpush list r1 r2 r3 r4 <span class="hljs-comment">#向list插入值，插入到列表尾部。right</span><br>(<span class="hljs-built_in">integer</span>) 10<br>127.0.0.1:6379&gt; lpop list <span class="hljs-comment">#从头部弹出</span><br><span class="hljs-string">&quot;3&quot;</span><br>127.0.0.1:6379&gt; rpop list <span class="hljs-comment">#从尾部弹出</span><br><span class="hljs-string">&quot;r4&quot;</span><br>127.0.0.1:6379&gt; lindex list 3 <span class="hljs-comment">#通过下标获取值，只能用l不能用r</span><br><span class="hljs-string">&quot;two&quot;</span><br>127.0.0.1:6379&gt; llen list <span class="hljs-comment"># 获取长度</span><br>(<span class="hljs-built_in">integer</span>) 8<br>127.0.0.1:6379&gt; lrem list a b <span class="hljs-comment">#从列表左边按顺序删除a个b元素</span><br>127.0.0.1:6379&gt; ltrim l 2 6 <span class="hljs-comment">#从l左边只保留2到6之内的元素</span><br>127.0.0.1:6379&gt; rpoplpush l list <span class="hljs-comment"># 将l弹出一个push到list中</span><br>127.0.0.1:6379&gt; rset l 0 r <span class="hljs-comment">#将l左边0号索引赋值为r</span><br><br>127.0.0.1:6379&gt; rpush mylist hello<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; rpush mylist world<br>(<span class="hljs-built_in">integer</span>) 2<br><span class="hljs-comment">#在mylist world后(before/after)插入other</span><br>127.0.0.1:6379&gt; linsert mylist before world other<br>(<span class="hljs-built_in">integer</span>) 3<br>127.0.0.1:6379&gt; lrange mylist 0 -1<br>1) <span class="hljs-string">&quot;hello&quot;</span><br>2) <span class="hljs-string">&quot;other&quot;</span><br>3) <span class="hljs-string">&quot;world&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>实际为一个链表，每个 node 的 right&#x2F;left 都要可以插入值</p><p>在左右两边插入或改动值效率最高，中间元素效率较低</p></blockquote><h2 id="4、Set"><a href="#4、Set" class="headerlink" title="4、Set"></a>4、Set</h2><blockquote><p>set 中的值不能重复</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; sadd ms 1 <span class="hljs-comment">#set添加元素</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; sadd ms 2<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; sadd ms 1<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; SMEMBERS ms <span class="hljs-comment"># 查看ms中所有元素 / set中的值不能重复</span><br>1) <span class="hljs-string">&quot;1&quot;</span><br>2) <span class="hljs-string">&quot;2&quot;</span><br><br>127.0.0.1:6379&gt; SISMEMBER ms 1 <span class="hljs-comment"># 判断某元素是否存在，返回0/1</span><br>127.0.0.1:6379&gt; SCARD ms <span class="hljs-comment">#获取ms中元素的个数</span><br>127.0.0.1:6379&gt; SREM ms 2 <span class="hljs-comment">#移除元素</span><br>127.0.0.1:6379&gt; SRANDMEMBER ms n <span class="hljs-comment">#从ms中随机抽取n个元素，不写默认为1</span><br>127.0.0.1:6379&gt; spop ms n <span class="hljs-comment">#随机从ms中删除n个元素</span><br>127.0.0.1:6379&gt; sdiff k1 k2 <span class="hljs-comment"># k1和k2的不同的元素，可扩展至n个</span><br>127.0.0.1:6379&gt; sinter k1 k2 <span class="hljs-comment">#求k1和k2的交集</span><br>127.0.0.1:6379&gt; sunion k1 k2 <span class="hljs-comment">#k1和k2的并集集</span><br></code></pre></td></tr></table></figure><h2 id="5、Hash"><a href="#5、Hash" class="headerlink" title="5、Hash"></a>5、Hash</h2><blockquote><p>Hash &#x3D;&#x3D; KEY– &lt;key,value&gt;</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; hset myhash field1 lqs <span class="hljs-comment">#存hash</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; hmset myhash field1 lqs f2 l2 f3 l3 <span class="hljs-comment"># 同时设置多个</span><br>OK<br>127.0.0.1:6379&gt; hget myhash field1 <span class="hljs-comment">#取hash值</span><br><span class="hljs-string">&quot;lqs&quot;</span><br>127.0.0.1:6379&gt; hmget myhash field1 f2 f3 <span class="hljs-comment">#获取多个hash值</span><br>1) <span class="hljs-string">&quot;lqs&quot;</span><br>2) <span class="hljs-string">&quot;l2&quot;</span><br>3) <span class="hljs-string">&quot;l3&quot;</span><br>127.0.0.1:6379&gt; hgetall myhash <span class="hljs-comment"># 获取所有值</span><br>127.0.0.1:6379&gt; hdel myhash f2 <span class="hljs-comment">#删除hash中某个key</span><br>127.0.0.1:6379&gt; hlen myhash <span class="hljs-comment">#获取hash的长度</span><br>127.0.0.1:6379&gt; hexists myhash field1 <span class="hljs-comment">#判断hash中key是否存在</span><br>127.0.0.1:6379&gt; hkeys myhash <span class="hljs-comment"># 获取所有的key</span><br>127.0.0.1:6379&gt; hvals myhash <span class="hljs-comment">#获取所有的value</span><br>127.0.0.1:6379&gt; hset myhash field 1 <span class="hljs-comment"># 设置值</span><br>127.0.0.1:6379&gt; HINCRBY myhash field1 1 <span class="hljs-comment"># 自增</span><br>127.0.0.1:6379&gt; HDECRBY myhash field1 1 <span class="hljs-comment"># 自减</span><br>127.0.0.1:6379&gt; HSETNX myhash field1 hello <span class="hljs-comment"># 不存在则设置，存在就不设置</span><br><span class="hljs-comment"># hash的value可以存储对象，适合存储用户信息这些经常变动的</span><br></code></pre></td></tr></table></figure><h2 id="6、Zset"><a href="#6、Zset" class="headerlink" title="6、Zset"></a>6、Zset</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; zadd myset 1 one 2 two 3 three <span class="hljs-comment"># 添加多个值</span><br>(<span class="hljs-built_in">integer</span>) 3<br>127.0.0.1:6379&gt; ZRANGE myset 0 -1<br>1) <span class="hljs-string">&quot;one&quot;</span><br>2) <span class="hljs-string">&quot;two&quot;</span><br>3) <span class="hljs-string">&quot;three&quot;</span><br></code></pre></td></tr></table></figure><h1 id="四、三种特殊数据类型"><a href="#四、三种特殊数据类型" class="headerlink" title="四、三种特殊数据类型"></a>四、三种特殊数据类型</h1><h2 id="1、Geospatial-地理位置"><a href="#1、Geospatial-地理位置" class="headerlink" title="1、Geospatial 地理位置"></a>1、Geospatial 地理位置</h2><blockquote><p>可以实现两地位置信息，两地之间的距离</p><p>文档：<a href="http://www.redis.net.cn/order/3685.html">http://www.redis.net.cn/order/3685.html</a></p></blockquote><h3 id="geoadd"><a href="#geoadd" class="headerlink" title="geoadd"></a>geoadd</h3><ul><li>添加地理坐标值</li><li>规则</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 有效的经度从-180 度到 180 度。<br><span class="hljs-bullet">-</span> 有效的纬度从-85.05112878 度到 85.05112878 度。<br><span class="hljs-bullet">-</span> 超过这个范围会报错<br><span class="hljs-bullet">-</span> 两级无法直接添加，一般直接下载城市数据，通过 Java 程序一次性导入<br><span class="hljs-bullet">-</span> 参数：key value(纬度 经度 城市名称)<br></code></pre></td></tr></table></figure><ul><li>例子</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">lqs@lqsdeiMac  ~  redis-cli  ✔  15:55:34<br>127.0.0.1:6379&gt; geoadd china:city 116.40 39.90 beijin<br>(integer) 1<br>127.0.0.1:6379&gt; geoadd china:city 127.47 31.23 shanghai<br>(integer) 1<br></code></pre></td></tr></table></figure><h3 id="geopos"><a href="#geopos" class="headerlink" title="geopos"></a>geopos</h3><ul><li>获得当前位置坐标</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">127.0.0.1:6379&gt; geopos china:city beijin<br><br><span class="hljs-bullet">1.</span> 1. &quot;116.39999896287918091&quot; 2) &quot;39.90000009167092543&quot;<br><span class="hljs-code">      127.0.0.1:6379&gt; geopos china:city shanghai</span><br><span class="hljs-code">1. 1. &quot;127.47000128030776978&quot; 2) &quot;31.22999903975783553&quot;</span><br><span class="hljs-code">      127.0.0.1:6379&gt;</span><br></code></pre></td></tr></table></figure><h3 id="geodist"><a href="#geodist" class="headerlink" title="geodist"></a>geodist</h3><blockquote><p>两地之间的距离</p></blockquote><ul><li>如果两个位置之间的其中一个不存在， 那么命令返回空值</li><li><code>GEODIST</code> 命令在计算距离时会假设地球为完美的球形， 在极限情况下， 这一假设最大会造成 0.5% 的误差。</li><li>单位<ul><li>m：米（默认值）</li><li>km：千米</li><li>mi：英里</li><li>ft：英尺</li></ul></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">127.0.0.1:6379&gt; geodist china:city beijin shanghai km<br>&quot;1388.2364&quot;<br>127.0.0.1:6379&gt; geodist china:city beijin shanghai<br>&quot;1388236.3971&quot;<br>redis&gt; GEODIST Sicily Foo Bar<br>(nil)<br></code></pre></td></tr></table></figure><h3 id="georadius"><a href="#georadius" class="headerlink" title="georadius"></a>georadius</h3><blockquote><p>以给定的经纬度为中心， 找出某一半径内的元素</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">127.0.0.1:6379&gt; GEOADD Sicily 13.361389 38.115556 &quot;Palermo&quot; 15.087269 37.502669 &quot;Catania&quot;<br>127.0.0.1:6379&gt; GEORADIUS Sicily 15 37 200 km<br><br><span class="hljs-bullet">1.</span> &quot;Palermo&quot;<br><span class="hljs-bullet">2.</span> &quot;Catania&quot;<br></code></pre></td></tr></table></figure><h4 id="几个可选参数"><a href="#几个可选参数" class="headerlink" title="几个可选参数"></a>几个可选参数</h4><ul><li><code>WITHDIST</code>: 在返回位置元素的同时， 将位置元素与中心之间的距离也一并返回。 距离的单位和用户给定的范围单位保持一致。</li><li><code>WITHCOORD</code>: 将位置元素的经度和维度也一并返回。</li><li><code>WITHHASH</code>: 以 52 位有符号整数的形式， 返回位置元素经过原始 geohash 编码的有序集合分值。 这个选项主要用于底层应用或者调试， 实际中的作用并不大。</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs markdown">redis&gt; GEORADIUS Sicily 15 37 200 km WITHDIST<br><br><span class="hljs-bullet">1.</span> 1. &quot;Palermo&quot;<br><span class="hljs-bullet">   2.</span> &quot;190.4424&quot;<br><span class="hljs-bullet">2.</span> 1. &quot;Catania&quot; 2) &quot;56.4413&quot;<br><span class="hljs-code">      redis&gt; GEORADIUS Sicily 15 37 200 km WITHCOORD</span><br><span class="hljs-code">3. 1. &quot;Palermo&quot;</span><br><span class="hljs-code">   2. 1. &quot;13.361389338970184&quot;</span><br><span class="hljs-code">      2. &quot;38.115556395496299&quot;</span><br><span class="hljs-code">4. 1. &quot;Catania&quot; 2) 1) &quot;15.087267458438873&quot; 2) &quot;37.50266842333162&quot;</span><br><span class="hljs-code">      redis&gt; GEORADIUS Sicily 15 37 200 km WITHDIST WITHCOORD</span><br><span class="hljs-code">5. 1. &quot;Palermo&quot;</span><br><span class="hljs-code">   2. &quot;190.4424&quot;</span><br><span class="hljs-code">   3. 1. &quot;13.361389338970184&quot;</span><br><span class="hljs-code">      2. &quot;38.115556395496299&quot;</span><br><span class="hljs-code">6. 1. &quot;Catania&quot; 2) &quot;56.4413&quot; 3) 1) &quot;15.087267458438873&quot; 2) &quot;37.50266842333162&quot;</span><br><span class="hljs-code">      redis&gt;</span><br></code></pre></td></tr></table></figure><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><ul><li><code>ASC</code>: 根据中心的位置， 按照从近到远的方式返回位置元素。</li><li><code>DESC</code>: 根据中心的位置， 按照从远到近的方式返回位置元素。</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">127.0.0.1:6379&gt; GEORADIUS Sicily 15 37 200 km WITHDIST WITHCOORD DESC COUNT 1<br><br><span class="hljs-bullet">1.</span> 1. &quot;Palermo&quot; 2) &quot;190.4424&quot; 3) 1) &quot;13.36138933897018433&quot; 2) &quot;38.11555639549629859&quot;<br><span class="hljs-code">      127.0.0.1:6379&gt;</span><br></code></pre></td></tr></table></figure><h4 id="截取"><a href="#截取" class="headerlink" title="截取"></a>截取</h4><ul><li><code>COUNT</code>：根据参数 n 返回 n 个数据</li><li>在默认情况下， GEORADIUS 命令会返回所有匹配的位置元素。 虽然用户可以使用**COUNT **<code>**&lt;count&gt;**</code> 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用<code>COUNT</code> 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用<code>COUNT</code> 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</li></ul><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><ul><li>在没有给定任何<code>WITH</code> 选项的情况下， 命令只会返回一个像 [“New York”,”Milan”,”Paris”] 这样的线性（linear）列表。</li><li>在指定了<code>WITHCOORD</code> 、<code>WITHDIST</code> 、<code>WITHHASH</code> 等选项的情况下， 命令返回一个二层嵌套数组， 内层的每个子数组就表示一个元素。</li></ul><p>在返回嵌套数组时， 子数组的第一个元素总是位置元素的名字。 至于额外的信息， 则会作为子数组的后续元素， 按照以下顺序被返回：</p><ol><li>以浮点数格式返回的中心与位置元素之间的距离， 单位与用户指定范围时的单位一致。</li><li>geohash 整数。</li><li>由两个元素组成的坐标，分别为经度和纬度。</li></ol><h2 id="2、HyperLogLog"><a href="#2、HyperLogLog" class="headerlink" title="2、HyperLogLog"></a>2、HyperLogLog</h2><blockquote><ul><li>基数统计,有误差，可忽略</li><li>非常节省内存，2^64 个数据也只需要 12KB 内存</li><li>适合统计各种计数，比如<code>注册 IP 数</code>、<code>每日访问 IP 数</code>、<code>页面实时UV</code>、<code>在线用户数</code>等</li><li>只能统计数量，而没办法去知道具体的内容是什么</li></ul></blockquote><h3 id="pfadd"><a href="#pfadd" class="headerlink" title="pfadd"></a>pfadd</h3><ul><li>新建元素</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">127.0.0.1:6379&gt; pfadd lqs 1 2 3 4 5<br>(integer) 1<br></code></pre></td></tr></table></figure><h3 id="pfcount"><a href="#pfcount" class="headerlink" title="pfcount"></a>pfcount</h3><ul><li>统计数量</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs markdown">127.0.0.1:6379&gt; pfadd lqs 1 2 3 4 5<br>(integer) 1<br>127.0.0.1:6379&gt; pfadd lxl 2 4 5 6 5<br>(integer) 1<br>127.0.0.1:6379&gt; pfcount lqs<br>(integer) 5<br>127.0.0.1:6379&gt; pfcount lxl<br>(integer) 4<br>127.0.0.1:6379&gt; pfmerge lqs lxl<br>OK<br>127.0.0.1:6379&gt; pfcount lqs<br>(integer) 6<br>127.0.0.1:6379&gt; pfcount lxl<br>(integer) 4<br>127.0.0.1:6<br></code></pre></td></tr></table></figure><h3 id="pfmerge"><a href="#pfmerge" class="headerlink" title="pfmerge"></a>pfmerge</h3><ul><li>合并</li><li>合并后的数据</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">127.0.0.1:6379&gt; pfmerge lqs lxl<br>OK<br>127.0.0.1:6379&gt; pfcount lqs<br>(integer) 6<br>127.0.0.1:6379&gt; pfcount lxl<br>(integer) 4<br>127.0.0.1:6<br></code></pre></td></tr></table></figure><h2 id="3、Bitmaps"><a href="#3、Bitmaps" class="headerlink" title="3、Bitmaps"></a>3、Bitmaps</h2><blockquote><p>位图：适合只有两个状态的需求</p></blockquote><ul><li>0 和 1 相对：活跃&#x2F;不活跃，登陆&#x2F;未登陆，打卡&#x2F;未打卡</li></ul><h3 id="setbit"><a href="#setbit" class="headerlink" title="setbit"></a>setbit</h3><ul><li>用 Bitmaps 记录一周的打卡</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs markdown">127.0.0.1:6379&gt; setbit sign 0 1<br>(integer) 0<br>127.0.0.1:6379&gt; setbit sign 2 0<br>(integer) 0<br>127.0.0.1:6379&gt; setbit sign 1 1<br>(integer) 0<br>127.0.0.1:6379&gt; setbit sign 3 0<br>(integer) 0<br>127.0.0.1:6379&gt; setbit sign 4 1<br>(integer) 0<br>127.0.0.1:6379&gt; setbit sign 5 0<br>(integer) 0<br>127.0.0.1:6379&gt; setbit sign 6 0<br>(integer) 0<br>127.0.0.1:6379&gt; setbit sign 7 0<br>(integer) 0<br>127.0.0.1:6379&gt;<br></code></pre></td></tr></table></figure><h3 id="getbit"><a href="#getbit" class="headerlink" title="getbit"></a>getbit</h3><ul><li>获取某一天的状态</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">127.0.0.1:6379&gt; getbit sign 1<br>(integer) 1<br></code></pre></td></tr></table></figure><h3 id="bitcout"><a href="#bitcout" class="headerlink" title="bitcout"></a>bitcout</h3><ul><li>统计结果</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">127.0.0.1:6379&gt; bitcount sign<br>(integer) 3<br></code></pre></td></tr></table></figure><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><blockquote><p>Redis 事务本质：一组命令的集合。一个事务中所有命令都会被序列化，执行过程中按照顺序执行</p></blockquote><h2 id="事务概念"><a href="#事务概念" class="headerlink" title="事务概念"></a>事务概念</h2><ul><li>Redis 没有隔离级别的概念</li><li>Redis 单条命令保证原子性，事务不保证原子性</li><li>Redis 事务过程<ul><li>开启事务：multi</li><li>命令入队：……<ul><li>事务中所有事务没用被直接执行，发起执行命令时才会执行</li></ul></li><li>执行事务：exec</li></ul></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 正常开启事务</span><br><br>127.0.0.1:6379&gt; multi<br>OK<br>127.0.0.1:6379&gt; set k1 v1<br>QUEUED<br>127.0.0.1:6379&gt; set k2 v1<br>QUEUED<br>127.0.0.1:6379&gt; set k3 v2<br>QUEUED<br>127.0.0.1:6379&gt; set k4 v4<br>QUEUED<br>127.0.0.1:6379&gt; exec<br><br><span class="hljs-bullet">1.</span> OK<br><span class="hljs-bullet">2.</span> OK<br><span class="hljs-bullet">3.</span> OK<br><span class="hljs-bullet">4.</span> OK<br><br><span class="hljs-section"># 不正常的结束事务</span><br><br>127.0.0.1:6379&gt; multi<br>OK<br>127.0.0.1:6379&gt; set a 1<br>QUEUED<br>127.0.0.1:6379&gt; set b 2<br>QUEUED<br><br><span class="hljs-bullet">-</span> 手动结束事务<br>  127.0.0.1:6379&gt; discard<br>  OK<br>  127.0.0.1:6379&gt; get b<br>  (nil)<br></code></pre></td></tr></table></figure><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="编译期异常"><a href="#编译期异常" class="headerlink" title="编译期异常"></a>编译期异常</h3><ul><li>代码有问题，事务中所有命令都不执行</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown">127.0.0.1:6379&gt; multi<br>OK<br>127.0.0.1:6379&gt; set a 1<br>QUEUED<br>127.0.0.1:6379&gt; setget b<br>(error) ERR unknown command <span class="hljs-code">`setget`</span>, with args beginning with: <span class="hljs-code">`b`</span>,<br>127.0.0.1:6379&gt; set b 1<br>QUEUED<br>127.0.0.1:6379&gt; exec<br>(error) EXECABORT Transaction discarded because of previous errors.<br></code></pre></td></tr></table></figure><h3 id="运行时异常"><a href="#运行时异常" class="headerlink" title="运行时异常"></a>运行时异常</h3><ul><li>类似 1&#x2F;0，如果语法没问题，其他命令可以执行</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs markdown">127.0.0.1:6379&gt; set k1 &quot;v1&quot;<br>OK<br>127.0.0.1:6379&gt; multi<br>OK<br><br><span class="hljs-section"># 操作不对，但是语法没有错误</span><br><br>127.0.0.1:6379&gt; incr k1<br>QUEUED<br>127.0.0.1:6379&gt; set k2 v2<br>QUEUED<br>127.0.0.1:6379&gt; set k3 v3<br>QUEUED<br>127.0.0.1:6379&gt; get k3<br>QUEUED<br>127.0.0.1:6379&gt; exec<br><br><span class="hljs-bullet">1.</span> (error) ERR value is not an integer or out of range<br><br><span class="hljs-section"># 第一条不对，但其他的仍被执行</span><br><br><span class="hljs-bullet">2.</span> OK<br><span class="hljs-bullet">3.</span> OK<br><span class="hljs-bullet">4.</span> &quot;v3&quot;<br>   127.0.0.1:6379&gt;<br></code></pre></td></tr></table></figure><h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><ul><li>悲观锁：认为做什么都会出问题，做什么都加锁</li><li>乐观锁：认为什么时候都不出问题，加一个 version！更新数据的时候判断一下</li></ul><h3 id="测试多线程监控"><a href="#测试多线程监控" class="headerlink" title="测试多线程监控"></a>测试多线程监控</h3><ul><li>1、先单独执行左边事务，成功</li><li>2、中间线程，先开始监视，不执行事务</li><li>3、获取 money 并设置值，此时 exec 中间线程的事务，失败</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FrwzvtX1705COLETJxero9uRr94k.png"></p><ul><li>测试多线程修改值，使用 watch 可以当作 Redis 的乐观锁操作</li></ul><h1 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h1><blockquote><p>Redis 官方推荐的的 Java 连接开发工具，使用 Java 操作 Redis 中间件</p></blockquote><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FmHdZwXVBHyDIs3pKJ2IMdvF3H7q.png"></p><h1 id="SpringBoot-整合-Redis"><a href="#SpringBoot-整合-Redis" class="headerlink" title="SpringBoot 整合 Redis"></a>SpringBoot 整合 Redis</h1><blockquote><p>SpringData 是和 SpringBoot 齐名的项目</p><p>在 SpringBoot2.x 之后，SpringData 使用 Lettuce 替代率 Jedis</p><p>Jedis:直连技术，多线程操作不安全；想要避免不安全可以使用 pool 技术，更像 BIO</p><p>Lettuce:采用 netty，实例可以在多个线程在进行共享，多线程安全，更像 NIO</p></blockquote><h2 id="1、源码分析"><a href="#1、源码分析" class="headerlink" title="1、源码分析"></a>1、源码分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//默认为true。false：不使用代理，每次获取新的，性能更高</span><br><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnClass(RedisOperations.class)</span><br><span class="hljs-meta">@EnableConfigurationProperties(RedisProperties.class)</span><br><span class="hljs-meta">@Import(&#123; LettuceConnectionConfiguration.class, JedisConnectionConfiguration.class &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisAutoConfiguration</span> &#123;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-comment">//不存在redistemplate配置类时，默认配置类生效</span><br><span class="hljs-meta">@ConditionalOnMissingBean(name = &quot;redisTemplate&quot;)</span><br><span class="hljs-comment">//默认两个Object，需要强制转换</span><br><span class="hljs-keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span><br><span class="hljs-keyword">throws</span> UnknownHostException &#123;<br>RedisTemplate&lt;Object, Object&gt; template = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>template.setConnectionFactory(redisConnectionFactory);<br><span class="hljs-keyword">return</span> template;<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean</span><br><span class="hljs-comment">//String常用，单独提出来一个bean</span><br><span class="hljs-keyword">public</span> StringRedisTemplate <span class="hljs-title function_">stringRedisTemplate</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span><br><span class="hljs-keyword">throws</span> UnknownHostException &#123;<br><span class="hljs-type">StringRedisTemplate</span> <span class="hljs-variable">template</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisTemplate</span>();<br>template.setConnectionFactory(redisConnectionFactory);<br><span class="hljs-keyword">return</span> template;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、自定义-redisTemplate"><a href="#2、自定义-redisTemplate" class="headerlink" title="2、自定义 redisTemplate"></a>2、自定义 redisTemplate</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> &#123;<br><br>    <span class="hljs-comment">//自定义一个redisTemplate</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory factory)</span>&#123;<br>        <span class="hljs-comment">//一般直接使用&lt;String, Object&gt;</span><br>        RedisTemplate&lt;String, Object&gt; template = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        template.setConnectionFactory(factory);<br>        <span class="hljs-keyword">return</span> template;<br><br>        <span class="hljs-comment">//json序列化设置</span><br>        <span class="hljs-type">Jackson2JsonRedisSerializer</span> <span class="hljs-variable">jackson2JsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonRedisSerializer</span>(Object.class);<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">om</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(om);<br><br>        <span class="hljs-comment">//String序列化</span><br>        <span class="hljs-type">StringRedisSerializer</span> <span class="hljs-variable">stringRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>();<br><br>        <span class="hljs-comment">//key采用String方式序列化</span><br>        template.setKeySerializer(stringRedisSerializer);<br>        <span class="hljs-comment">//hash也采用String序列化</span><br>        template.setHashKeySerializer(stringRedisSerializer);<br>        <span class="hljs-comment">//value序列化采用jsckson</span><br>        template.setValueSerializer(jackson2JsonRedisSerializer);<br>        <span class="hljs-comment">//hash的value采用jsckson</span><br>        template.setHashValueSerializer(jackson2JsonRedisSerializer);<br>        template.afterPropertiesSet();<br><br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、自定义-Redis-工具类"><a href="#3、自定义-Redis-工具类" class="headerlink" title="3、自定义 Redis 工具类"></a>3、自定义 Redis 工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisUtil</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;<br><br>    <span class="hljs-comment">// =============================common============================</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定缓存失效时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time 时间(秒)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">expire</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> time)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>) &#123;<br>                redisTemplate.expire(key, time, TimeUnit.SECONDS);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据key 获取过期时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键 不能为null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 时间(秒) 返回0代表为永久有效</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getExpire</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断key是否存在</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true 存在 false不存在</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasKey</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.hasKey(key);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除缓存</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 可以传一个值 或多个</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">del</span><span class="hljs-params">(String... key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (key != <span class="hljs-literal">null</span> &amp;&amp; key.length &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (key.length == <span class="hljs-number">1</span>) &#123;<br>                redisTemplate.delete(key[<span class="hljs-number">0</span>]);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                redisTemplate.delete(CollectionUtils.arrayToList(key));<br>            &#125;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">// ============================String=============================</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 普通缓存获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">return</span> key == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : redisTemplate.opsForValue().get(key);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 普通缓存放入</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true成功 false失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">set</span><span class="hljs-params">(String key, Object value)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForValue().set(key, value);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 普通缓存放入并设置时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true成功 false 失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">set</span><span class="hljs-params">(String key, Object value, <span class="hljs-type">long</span> time)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>) &#123;<br>                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                set(key, value);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 递增</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> delta 要增加几(大于0)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">incr</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> delta)</span> &#123;<br>        <span class="hljs-keyword">if</span> (delta &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;递增因子必须大于0&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForValue().increment(key, delta);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 递减</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> delta 要减少几(小于0)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">decr</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> delta)</span> &#123;<br>        <span class="hljs-keyword">if</span> (delta &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;递减因子必须大于0&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);<br>    &#125;<br><br><br>    <span class="hljs-comment">// ================================Map=================================</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * HashGet</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键 不能为null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> item 项 不能为null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">hget</span><span class="hljs-params">(String key, String item)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().get(key, item);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取hashKey对应的所有键值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 对应的多个键值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Map&lt;Object, Object&gt; <span class="hljs-title function_">hmget</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().entries(key);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * HashSet</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> map 对应多个键值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hmset</span><span class="hljs-params">(String key, Map&lt;String, Object&gt; map)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForHash().putAll(key, map);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * HashSet 并设置时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> map  对应多个键值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time 时间(秒)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true成功 false失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hmset</span><span class="hljs-params">(String key, Map&lt;String, Object&gt; map, <span class="hljs-type">long</span> time)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForHash().putAll(key, map);<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>) &#123;<br>                expire(key, time);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向一张hash表中放入数据,如果不存在将创建</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> item  项</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true 成功 false失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hset</span><span class="hljs-params">(String key, String item, Object value)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForHash().put(key, item, value);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向一张hash表中放入数据,如果不存在将创建</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> item  项</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true 成功 false失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hset</span><span class="hljs-params">(String key, String item, Object value, <span class="hljs-type">long</span> time)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForHash().put(key, item, value);<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>) &#123;<br>                expire(key, time);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除hash表中的值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键 不能为null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> item 项 可以使多个 不能为null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hdel</span><span class="hljs-params">(String key, Object... item)</span> &#123;<br>        redisTemplate.opsForHash().delete(key, item);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断hash表中是否有该项的值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键 不能为null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> item 项 不能为null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true 存在 false不存在</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hHasKey</span><span class="hljs-params">(String key, String item)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> item 项</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> by   要增加几(大于0)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">hincr</span><span class="hljs-params">(String key, String item, <span class="hljs-type">double</span> by)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * hash递减</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> item 项</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> by   要减少记(小于0)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">hdecr</span><span class="hljs-params">(String key, String item, <span class="hljs-type">double</span> by)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);<br>    &#125;<br><br><br>    <span class="hljs-comment">// ============================set=============================</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据key获取Set中的所有值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Set&lt;Object&gt; <span class="hljs-title function_">sGet</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForSet().members(key);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据value从一个set中查询,是否存在</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true 存在 false不存在</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">sHasKey</span><span class="hljs-params">(String key, Object value)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForSet().isMember(key, value);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将数据放入set缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key    键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> values 值 可以是多个</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 成功个数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">sSet</span><span class="hljs-params">(String key, Object... values)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForSet().add(key, values);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将set数据放入缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key    键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time   时间(秒)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> values 值 可以是多个</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 成功个数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">sSetAndTime</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> time, Object... values)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> redisTemplate.opsForSet().add(key, values);<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>)<br>                expire(key, time);<br>            <span class="hljs-keyword">return</span> count;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取set缓存的长度</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">sGetSetSize</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForSet().size(key);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 移除值为value的</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key    键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> values 值 可以是多个</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 移除的个数</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">setRemove</span><span class="hljs-params">(String key, Object... values)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> redisTemplate.opsForSet().remove(key, values);<br>            <span class="hljs-keyword">return</span> count;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// ===============================list=================================</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取list缓存的内容</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> start 开始</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> end   结束 0 到 -1代表所有值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title function_">lGet</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> start, <span class="hljs-type">long</span> end)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForList().range(key, start, end);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取list缓存的长度</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">lGetListSize</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForList().size(key);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过索引 获取list中的值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">lGetIndex</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> index)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForList().index(key, index);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将list放入缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">lSet</span><span class="hljs-params">(String key, Object value)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForList().rightPush(key, value);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将list放入缓存</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time  时间(秒)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">lSet</span><span class="hljs-params">(String key, Object value, <span class="hljs-type">long</span> time)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForList().rightPush(key, value);<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>)<br>                expire(key, time);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将list放入缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">lSet</span><span class="hljs-params">(String key, List&lt;Object&gt; value)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForList().rightPushAll(key, value);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将list放入缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time  时间(秒)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">lSet</span><span class="hljs-params">(String key, List&lt;Object&gt; value, <span class="hljs-type">long</span> time)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForList().rightPushAll(key, value);<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>)<br>                expire(key, time);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据索引修改list中的某条数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 索引</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">lUpdateIndex</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> index, Object value)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForList().set(key, index, value);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 移除N个值为value</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> count 移除多少个</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 移除的个数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">lRemove</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> count, Object value)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Long</span> <span class="hljs-variable">remove</span> <span class="hljs-operator">=</span> redisTemplate.opsForList().remove(key, count, value);<br>            <span class="hljs-keyword">return</span> remove;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Redis-conf-详解"><a href="#Redis-conf-详解" class="headerlink" title="Redis.conf 详解"></a>Redis.conf 详解</h1><ul><li>通过配置文件启动</li><li>Mac 使用 HomeBrew 安装的 Redis 配置文件位置为:&#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis.conf</li><li>配置文件对大小写不敏感</li></ul><h2 id="1、网络"><a href="#1、网络" class="headerlink" title="1、网络"></a>1、网络</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 绑定的 IP</span><br><br>bind 127.0.0.1 ::1<br><br><span class="hljs-section"># 保护模式</span><br><br>protected-mode yes<br><br><span class="hljs-section"># 端口</span><br><br>port 6379<br></code></pre></td></tr></table></figure><h2 id="2、通用"><a href="#2、通用" class="headerlink" title="2、通用"></a>2、通用</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 以守护进程运行，默认为 no，需要手动开启为 yes</span><br><br>daemonize yes<br><br><span class="hljs-section"># 如果后台方式运行，需要指定 pid 文件</span><br><br>pidfile /var/run/redis<span class="hljs-emphasis">_6379.pid</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis"># 日志信息</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis"># Specify the server verbosity level.</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis"># This can be one of:</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis"># debug (a lot of information, useful for development/testing)</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis"># verbose (many rarely useful info, but not a mess like the debug level)</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis"># notice (moderately verbose, what you want in production probably)</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis"># warning (only very important / critical messages are logged)</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">loglevel notice</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis"># 日志文件位置名</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">logfile &quot;&quot;</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis"># 数据库数量,默认 16 个</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">database 16</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis"># 是否显示 logo</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">always-show-logo yes</span><br></code></pre></td></tr></table></figure><h2 id="3、快照"><a href="#3、快照" class="headerlink" title="3、快照"></a>3、快照</h2><ul><li>持久化，在规定的时间内，执行了多少操作，会持久化到.rdb.aof 文件中</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 900s 内，如果至少有一个 key 进行修改，进行持久化操作</span><br><br>save 900 1<br><br><span class="hljs-section"># 300s 内，至少 10 个 key 修改，进行持久化操作</span><br><br>save 300 10<br><br><span class="hljs-section"># 60s 内 1000 个 key 修改，进行持久化操作</span><br><br>save 60 10000<br><br><span class="hljs-section"># 持久化出错，是否还进行工作</span><br><br>stop-writes-on-bgsave-error yes<br><br><span class="hljs-section"># 是否压缩 rdb 文件，需要消耗一定 cpu 资源</span><br><br>rdbcompression yes<br><br><span class="hljs-section"># 保存 rdb 文件的时候，进行错误的检查校验</span><br><br>rdbchecksum yes<br><br><span class="hljs-section"># 文件保存目录</span><br><br>dir ./<br></code></pre></td></tr></table></figure><h2 id="4、主从复制"><a href="#4、主从复制" class="headerlink" title="4、主从复制"></a>4、主从复制</h2><h2 id="5、安全"><a href="#5、安全" class="headerlink" title="5、安全"></a>5、安全</h2><ul><li>默认没用密码</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">127.0.0.1:6379&gt; ping<br>PONG<br>127.0.0.1:6379&gt; config get requirepass<br><br><span class="hljs-bullet">1.</span> &quot;requirepass&quot;<br><span class="hljs-bullet">2.</span> &quot;&quot;<br></code></pre></td></tr></table></figure><ul><li>可以加一个密码</li><li>设置完之后重启 redis</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown">127.0.0.1:6379&gt; config set requirepass &quot;123456&quot;<br>OK<br>127.0.0.1:6379&gt; config get requirepass<br><br><span class="hljs-bullet">1.</span> &quot;requirepass&quot;<br><span class="hljs-bullet">2.</span> &quot;123456&quot;<br><br><span class="hljs-section"># 重启之后登陆</span><br><br>127.0.0.1:6379&gt; auth 123456<br></code></pre></td></tr></table></figure><h2 id="6、客户端"><a href="#6、客户端" class="headerlink" title="6、客户端"></a>6、客户端</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 客户端最多数量</span><br><br>maxclients 10000<br><br><span class="hljs-section"># 最大内存容量（单位：字节）</span><br><br>maxmemory <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">bytes</span>&gt;</span></span><br><br><span class="hljs-section"># 内存满了处理策略策略</span><br><br>maxmemory-policy noeviction<br><br><span class="hljs-bullet">-</span> volatile-lru -&gt; 根据 LRU 算法生成的过期时间来删除。<br><span class="hljs-bullet">-</span> allkeys-lru -&gt; 根据 LRU 算法删除任何 key。<br><span class="hljs-bullet">-</span> volatile-random -&gt; 根据过期设置来随机删除 key。<br><span class="hljs-bullet">-</span> allkeys-&gt;random -&gt; 无差别随机删。<br><span class="hljs-bullet">-</span> volatile-ttl -&gt; 根据最近过期时间来删除（辅以 TTL）<br><span class="hljs-bullet">-</span> noeviction -&gt; 谁也不删，直接在写操作时返回错误。<br></code></pre></td></tr></table></figure><h2 id="7、APPEND-ONLY-模式"><a href="#7、APPEND-ONLY-模式" class="headerlink" title="7、APPEND ONLY 模式"></a>7、APPEND ONLY 模式</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 默认不开启</span><br><br>appendonly no<br><br><span class="hljs-section"># 持久化文件的名字(default: &quot;appendonly.aof&quot;)</span><br><br>appendfilename &quot;appendonly.aof&quot;<br><br><span class="hljs-section"># always：每次修改都执行 sync，消耗性能</span><br><br><span class="hljs-section"># everysec：默认值，每秒执行一次 sync，可能丢失这一秒的数据</span><br><br><span class="hljs-section"># no：不执行 sync，操作系统自己同步数据，速度最快</span><br><br>appendfsync everysec/always/no<br></code></pre></td></tr></table></figure><h1 id="Redis-持久化"><a href="#Redis-持久化" class="headerlink" title="Redis 持久化"></a>Redis 持久化</h1><blockquote><p>Redis 是内存数据库，关机数据丢失，所以需要持久化操作</p></blockquote><h2 id="1、RDB"><a href="#1、RDB" class="headerlink" title="1、RDB"></a>1、RDB</h2><blockquote><p>Redis DataBase</p><p>默认的持久化规则</p><p>在指定时间间隔内将内存中的数据集快照写入磁盘，即 SnapShot 快照，恢复时将快照文件存进内存</p></blockquote><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FtIkZLXJgIuCNE1RODaMJ7hxw5_4.png"></p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li>会单独创建一个子进程进行持久化，先将数据写入到一个临时文件中。</li><li>待持久化结束之后，在用临时文件替换上次持久化的文件</li><li>整个过程中，主进程不进行任何 IO 操作，确保极高性能</li></ul><blockquote><p>优点：性能比 AOF 更高效，需要大规模数据且数据恢复完整性不太敏感可以使用 RDB</p><p>缺点：最后一次持久化的数据可能丢失</p></blockquote><h3 id="触发规则"><a href="#触发规则" class="headerlink" title="触发规则"></a>触发规则</h3><blockquote><p>save 规则满足的情况</p><p>执行 flushall 命令</p><p>退出 Redis</p></blockquote><h3 id="恢复文件"><a href="#恢复文件" class="headerlink" title="恢复文件"></a>恢复文件</h3><blockquote><p>文件名：dump.rdb</p><p>将 rdb 文件放入 redis 启动目录即可</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 查看目录位置</span><br><br>127.0.0.1:6379&gt; config get dir<br><br><span class="hljs-bullet">1.</span> &quot;dir&quot;<br><span class="hljs-bullet">2.</span> &quot;/usr/local/var/db/redis&quot;<br>   127.0.0.1:6379&gt;<br><br><span class="hljs-section"># 生产环境可能需要备份 dump.rdb</span><br></code></pre></td></tr></table></figure><h2 id="2、AOF"><a href="#2、AOF" class="headerlink" title="2、AOF"></a>2、AOF</h2><blockquote><p>Append Only File</p><p>以日志的形式记录每个写操作，将 Redis 执行过的所有指令记录下来</p></blockquote><ul><li>只许追加文件但不可以改写文件，Redis 启动之后会读取该文件重新构建数据</li><li>如果 aof 文件有错误，Redis 会启动失败，利用自动提供的工具<code>redis-check-aof</code>进行修复</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FiO6hn7Lp7OkDZm6Bc41q5Y-7fVZ.png"></p><ul><li>优点<ul><li>每次修改都同步，文件完整性更好</li><li>每次同步一次，可能会丢失一秒的数据</li><li>从不同步，效率最高</li></ul></li><li>缺点<ul><li>相对于数据文件来说，aof 远大于 rdb，修复文件慢</li><li>aof 运行效率要比 rdb 慢，默认使用 rdb</li></ul></li></ul><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ol><li>只做缓存，就不需要持久化</li><li>同时开启两种持久化</li></ol><ul><li>Redis 重启的时候首先载入 AOF 文件恢复原始数据，通常情况下 AOF 比 RDB 数据更完整</li><li>RDB 数据不实时，同时使用两者也只会找 AOF 文件。建议不使用 AOF，只用 RDB 备份数据库，方便快速重启，不会有 AOF 潜在的 bug</li></ul><ol start="3"><li>性能建议</li></ol><ul><li>RDB 文件只用作后背用途，建议只在 Slave 上持久化 RDB 文件，15 分钟备份一次即可，即 save 900 1</li><li>使用 AOF 的好处：情况最恶劣也只丢失不超过 2s 的数据，编写脚本 load AOF 文件即可。代价：带来持续 IO。AOF rewrite 过程中产生的新数据到文件的阻塞基本不可避免；磁盘许可时，应该尽量见效 AOF rewrite 的频率，将默认值从 64M 改到 5G 以上</li><li>不使用 AOF，仅靠 Master-Slave Replcation 也可实现高可用，节省 IO，减少 rewrite 带来的系统波动。代价：如果 master&#x2F;Slave 通水倒掉，会丢失十几分钟的数据，启动脚本也要比较 master&#x2F;Slave 的 RDB 文件，载入较新的</li></ul><h1 id="Redis-发布订阅"><a href="#Redis-发布订阅" class="headerlink" title="Redis 发布订阅"></a>Redis 发布订阅</h1><blockquote><p>Redis 发布订阅（pub&#x2F;sub）：一种<strong>消息通信模式</strong>，发送者发送信息，订阅者接收消息。微信&#x2F;微博关注系统</p></blockquote><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fv2pLsLpwNbX0Ztec2v2y_KDAZGY.png"></p><p>下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：</p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fi8gYhy9aqt6ZZS1H09P_KqVVssV.png"></p><p>当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：</p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fm5evS_m7GNLcXuToLnE2XvYTdnT.png"></p><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><ul><li>基本命令</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FgTLuHU4H4uIEMeZXU2c0aGDXQqm.png"></p><ul><li>两个订阅者都订阅一个发布者</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fgoj9pNxJADtdQL8urKoFvVzy7xN.png"></p><ul><li>发布者发布再发布消息</li><li>订阅端会接收到消息</li></ul><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FrJdJuGEjOuiwpOo18RuQilmfLH9.png"></p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FvoVXIG5DTfhHhwTL3IqhxhX8IkQ.png"></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FsoIWYB9Wk_hxshS27Sq3qLcVyr4.png"></p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>实时消息系统</li><li>群聊天室</li></ul><p>更复杂的会使用 MQ</p><h1 id="Redis-主从复制"><a href="#Redis-主从复制" class="headerlink" title="Redis 主从复制"></a>Redis 主从复制</h1><blockquote><ul><li>将一台 Redis 服务器的数据复制到其他 redis 服务器。</li><li>前者为主节点（Master），后者为从节点（Slave）。</li><li>数据复制为单向的，只能从主节点到从节点。</li><li>Master 以写为主，Slave 以读为主。</li></ul></blockquote><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ol><li>数据冗余：实现数据热备份，是持久化之外的数据冗余方式</li><li>服务冗余：当主节点出问题时，可由从节点提供服务，实现快速故障恢复。</li><li>负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，从节点提供读服务，分担负载。在写少读多读情况下可大大提高 redis 服务器读并发量</li><li>高可用基石：哨兵和集群实施的基础</li></ol><p>工程中，只用一台服务器是不行的，原因：</p><ol><li>结构上，单个 redis 会发生单点故障，一台服务器需要处理所有的请求负载，压力太大</li><li>容量上，单台 Redis 的最大使用内存不应该超过 20g</li><li>很多数据，如电商网站的商品数据，一般都是写少读多，适合使用主从复制</li></ol><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FpK04czKpz4OmulYctZV70ML-E7I.png"></p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 查看当前库的信息</span><br><br>127.0.0.1:6379&gt; info replication<br><br><span class="hljs-section"># Replication</span><br><br>role:master<br>connected<span class="hljs-emphasis">_slaves:0</span><br><span class="hljs-emphasis">master_</span>replid:a30fd1701c63d8b83fd8fe449d30c92c63be3156<br>master<span class="hljs-emphasis">_replid2:0000000000000000000000000000000000000000</span><br><span class="hljs-emphasis">master_</span>repl<span class="hljs-emphasis">_offset:0</span><br><span class="hljs-emphasis">second_</span>repl<span class="hljs-emphasis">_offset:-1</span><br><span class="hljs-emphasis">repl_</span>backlog<span class="hljs-emphasis">_active:0</span><br><span class="hljs-emphasis">repl_</span>backlog<span class="hljs-emphasis">_size:1048576</span><br><span class="hljs-emphasis">repl_</span>backlog<span class="hljs-emphasis">_first_</span>byte<span class="hljs-emphasis">_offset:0</span><br><span class="hljs-emphasis">repl_</span>backlog<span class="hljs-emphasis">_histlen:0</span><br><span class="hljs-emphasis">127.0.0.1:6379&gt;</span><br></code></pre></td></tr></table></figure><p>注意：使用 Docker 可以简单的部署集群，此处只用实现伪集群，了解即可</p><blockquote><p>原理：将 redis.conf 复制为多份，启动时使用不同配置文件启动即可</p></blockquote><ol><li>复制多份配置文件</li></ol><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FijCHcqYAlWud_dc4YwcL2r0wNsI.png"></p><ol start="2"><li>修改复制配置文件的几项关键内容</li></ol><ul><li>端口</li><li>pid 名字</li><li>log 文件名字</li><li>dump.rdb 名字</li></ul><ol start="3"><li>以不同配置文件分别启动 redis-server</li></ol><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FmjHHZEh4MwHo3dIdlRzS24n9CXq.png"></p><ol start="4"><li>配置一主二从</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 6377 和 6378 认 6379 为主</span><br><br>127.0.0.1:6378&gt; SLAVEOF 127.0.0.1 6379<br>127.0.0.1:6377&gt; SLAVEOF 127.0.0.1 6379<br><br><span class="hljs-section"># 使用 info replication 可以看到主从关系</span><br></code></pre></td></tr></table></figure><p>细节</p><ul><li>确定主从之后，主机可以写，从机不可再进行写操作</li><li>主机断开连接之后，从机连接到主机的，但是没有写操作，这个时候如果重启了，就会变回主机。只要变回从机，立马就会从从机中获取值</li></ul><h2 id="主从复制原理"><a href="#主从复制原理" class="headerlink" title="主从复制原理"></a>主从复制原理</h2><ul><li>总结的不太好，不过发现一篇不错的博客，<a href="https://www.cnblogs.com/daofaziran/p/10978628.html">redis 主从复制原理</a>,有时间了好好总结一下。</li></ul><ol><li>Slave 启动成功连接到 Matser 后发送一个 sync 同步命令</li><li>Master 接到命令，启动后台的存盘进程，同时手机所有接收到的用于修改数据集命令。在后台执行完毕之后，Master 将传送整个数据文件到 Slave，并完成一次完全同步</li></ol><ul><li>全量复制：</li><li>增量复制：</li></ul><p>………………</p><h2 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h2><blockquote><p>自动选举主机的模式</p></blockquote><ol><li>主服务器宕机之后，手动将其中一台服务器升级为主服务器，需要人工干预，费时费力，导致一段时间内的服务不可用，一般不推荐使用。现在一般使用哨兵模式。Redis 自 2.8 版本开始正式提供了 Sentinel 架构来解决此问题</li></ol><p>优点：</p><ul><li>哨兵集群，基于主从复制模式，所有主从配置的优点，它都有</li><li>主从可以切换，故障可以转移，系统可用性会更好</li><li>哨兵模式就是主从模式的升级，手动–&gt;自动,健壮性更好</li></ul><p>缺点：</p><ul><li>Redis 不方便在线扩容，集群容量一旦到达上限，在线扩容就比较麻烦</li></ul><p>哨兵模式的全部配置</p><h1 id="Redis-缓存穿透和雪崩（面试-amp-常用）"><a href="#Redis-缓存穿透和雪崩（面试-amp-常用）" class="headerlink" title="Redis 缓存穿透和雪崩（面试&amp;常用）"></a>Redis 缓存穿透和雪崩（面试&amp;常用）</h1><ul><li>关系到服务的高可用</li></ul><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><blockquote><p>用户查询一个数据，Redis 中没有查询到，缓存未命中，于是向持久层数据库进行查询，也没有查询到结果，于是本次查询失败。当很多种这个情况发生时，会给持久层数据库带来很大压力，即缓存穿透</p></blockquote><ul><li>解决方案</li></ul><h3 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h3><blockquote><p>一种数据结构，对所有可能的查询的参数以 hash 形式存储，在控制层先进性校验，不符合则丢弃，避免了对底层存储系统的查询压力</p></blockquote><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FlLlBbSAL4qzwe2_kP2RCezdZ5Nk.png"></p><h3 id="缓存空对象"><a href="#缓存空对象" class="headerlink" title="缓存空对象"></a>缓存空对象</h3><blockquote><p>当存储层不命中后，即使返回的空对象也将其缓存起来，同时设置一个过期时间。之后再访问这个数据将会从缓存中获取，保护后端数据源</p></blockquote><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/FrwpM9T-eayCUlFcWOH4nQOH_dRg.png"></p><p>带来两个问题</p><ul><li>如果空值被缓存起来，意味着缓存需要更多的空间存储更多的键，因为其中可能有很多空值的键</li><li>基石对空值设置了过期时间，还是会存在缓存层和存储层会有一段时间窗口的不一致，这对于需要一致性的业务需求有一定影响</li></ul><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><blockquote><p>指一个 key 非常热点，不停扛着大并发，集中对一个点进行访问，当着个 key 失效多瞬间，持续多大并发就会击破缓存，直接请求数据库</p></blockquote><ul><li>解决方案</li></ul><h3 id="设置热点数据永不过期"><a href="#设置热点数据永不过期" class="headerlink" title="设置热点数据永不过期"></a>设置热点数据永不过期</h3><ol><li>从缓存层面看，没有设置过期时间，所以不会出现热点 key 过气候产生的问题</li></ol><h3 id="加互斥锁"><a href="#加互斥锁" class="headerlink" title="加互斥锁"></a>加互斥锁</h3><ol><li>分布式锁：使用分布式锁，保证每个 key 同时只有一个线程去查询后端服务，其他线程没有获得分布式锁多权限，只需要等待即可。这种方式将高并发多压力转移到了分布式锁，因此对分布式锁的考验很大</li></ol><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><blockquote><p>在某一个时间段，缓存集中过期失效，Redis 宕机</p></blockquote><p>eg：双十二之前一个小时设置了时间为一小时的一批缓存，当双十二零点时，缓存集体失效，此时有大量访问，查询全部落到数据库。数据库产生周期性多压力波峰，所有请求同时到持久层，导致持久层挂掉。</p><p><img src="https://lqsgoodboy.oss-cn-shanghai.aliyuncs.com/yuque_hexo/Fm9Tti6Xs9ctKBuJoWqHEMq0QeeP.png"></p><ul><li>解决方案</li></ul><h3 id="Redis-高可用"><a href="#Redis-高可用" class="headerlink" title="Redis 高可用"></a>Redis 高可用</h3><p>增加几台 Redis 服务器，一台挂掉其他的还能继续工作。异地多活</p><h3 id="限流降级"><a href="#限流降级" class="headerlink" title="限流降级"></a>限流降级</h3><p>缓存失效后，通过加锁或队列来控制读数据库写缓存多线程数量。比如对某个 key 只允许一个线程查询数据和写缓存，其他线程等待</p><h3 id="数据预热"><a href="#数据预热" class="headerlink" title="数据预热"></a>数据预热</h3><p>正式部署前，把可能多数据预先访问一遍，这样部分可能大量访问多数据就会加载到缓存中。载即将发生大并发访问前手动触发加载缓存不同的 key，设置不同多过期时间，让缓存失效的时间尽量均匀</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>资料获取：公众号回复 Redis 即可</p><p><a href="https://space.bilibili.com/95256449?spm_id_from=333.788.b_765f7570696e666f.1">遇见狂神说</a></p>]]></content>
    
    
    <categories>
      
      <category>NoSQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
